<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java语法</title>
    <link href="/2021/07/26/02java%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/26/02java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一章、Java小基础"><a href="#第一章、Java小基础" class="headerlink" title="第一章、Java小基础"></a>第一章、Java小基础</h1><h2 id="每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。"><a href="#每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。" class="headerlink" title="每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。"></a><strong>每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。</strong></h2><h2 id="一、Java基本语法格式"><a href="#一、Java基本语法格式" class="headerlink" title="一、Java基本语法格式"></a><strong>一、Java基本语法格式</strong></h2><p><strong>1.1.Java代码必须要声明一个类，然后才可以写业务代码哦。</strong></p><p><strong>类的关键字 class</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-string">[修饰符]</span>  <span class="hljs-keyword"><code class="language-hljs angelscript"><span class="hljs-string">[修饰符]</span>  <span class="hljs-keyword">class</span>  类名 &#123;<br>    代码块<br>&#125;    <br></code></pre></td></tr></table></figure><p><strong>1.2.java中的注释</strong></p><p>为了方便解释我们自己写的代码，必须、必须、必须加上注释，这也是一个高素质代码者要干的事情，不然估计过段时间都不知道自己写的啥玩意儿！！！</p><p>（1）单行注释 用符号“ // ” 在idea中快捷键为：Ctrl+/</p><p>（2）多行注释 用符号“ /** * ***/ ” 在idea中快捷键为：Ctrl+Shift+/</p><p>（3）文档注释 用符号“/** <em>/ ” 在idea中直接 /</em>* +回车即可</p><p>注意的是：多行注释可以嵌套单行注释，但不能嵌多行注释哦。</p><p><strong>1.3. 关键字： 是事先就被定义好的拥有特殊含义的单词。 关键字都是小写的哦</strong></p><p><img src="https://pic1.zhimg.com/v2-91dcb078a3dd7dc3c841a835ad0edd10_b.jpg" alt="img"></p><p><strong>1.4.标识符</strong></p><p>标识符不能以数字开头，也不能是关键字。但可以是任意大小写英文、数字、下划线_ 和美刀$哦 。建议按以下几个规范：</p><p>（1）包名都用小写</p><p>（2）类名和接口的首字母要大写</p><p>（3）常量名大写时可以用下划线_隔开</p><p>（4）变量名和方法名首字母要小写</p><p><img src="https://pic3.zhimg.com/v2-c0512886dba7d919f000a7a55bab3c5a_b.jpg" alt="img"></p><h2 id="二、常量与变量"><a href="#二、常量与变量" class="headerlink" title="二、常量与变量"></a>二、常量与变量</h2><p><strong>1.变量</strong>：程序运行会保存一些数据到内存单元中，用一个标识符来标识这些内存单元。 这些内存单元就是变量，而标识它们就是变量名。</p><p>语法格式：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript">变量类型  变量名 = 初始值 ;    <br>ex:  <span class="hljs-built_in">int</span> a = <span class="hljs-number"><code class="language-hljs angelscript">变量类型  变量名 = 初始值 ;    <br>ex:  <span class="hljs-built_in">int</span> a = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p><strong>1.1.变量数据类型</strong></p><p>数据类型分为两种：基本数据类型和引用类型</p><p><img src="https://pic3.zhimg.com/v2-cbdcd7b60548ee41c9e7c4e886c12aea_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-f9318bd6e955705beeee919484b6b494_b.jpg" alt="img"></p><p>注意： 在使用Long类型，在赋值后面加一个字母L ,说明赋值的为Long类型 。但是没超过int 类型就不用加L。</p><p>在使用Float类型，在赋值后面加一个字母F ，说明赋值的为float类型。</p><p><strong>1.2.变量类型转换</strong></p><p>数据类型转换分为两种：自动类型转换和强制类型转换</p><p>自动转换：从左往右（小类型数据—&gt;大类型数据）</p><p>强制转换：从右往左（大类型数据—&gt;小类型数据）</p><p><img src="https://pic2.zhimg.com/v2-3b604fd0fd8ea6bb8a131b53ef9ede61_b.jpg" alt="img"></p><p><strong>1.3.变量作用域</strong></p><p>变量需要在它作用范围才可以被使用，该作用范围称为变量作用域。</p><p><img src="https://pic3.zhimg.com/v2-a1d7dce7c91bb39301b7bf170bb07cd6_b.gif" alt="img"></p><h2 id="2-1-Java中的常量：就是在程序中属于固定不变的值，无法改变的数据。"><a href="#2-1-Java中的常量：就是在程序中属于固定不变的值，无法改变的数据。" class="headerlink" title="2.1.Java中的常量：就是在程序中属于固定不变的值，无法改变的数据。"></a><strong>2.1.Java中的常量：</strong>就是在程序中属于固定不变的值，无法改变的数据。</h2><p>java中的常量包括整数常量、浮点数常量、布尔常量、字符串常量等等。</p><ul><li><strong>整数常量</strong>：一般有4中表现形式：二进制、八进制、十进制、十六进制</li></ul><p>（1）二进制：由0和1组成数字序列。ex:101001</p><p>（2）八进制：由0开头，后面由（0~7）整数组成数字序列。ex:0624</p><p>（3）十进制：由（0~9）整数组成数字序列。ex:123456</p><p>（4）十六进制：以0x或0X开头，后面由（0<del>9）或（A</del>F）组成序列。ex:0x56AF</p><ul><li><strong>浮点数常量</strong>：分float单精度浮点数和double双精度浮点数。</li></ul><p>一般都要在浮点数加： float后面加F或f、double后面加D或d</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs apache"><span class="hljs-attribute">2e4f</span>      <span class="hljs-number">3</span>.<span class="hljs-number">8</span>d      <span class="hljs-number">0</span>f    <span class="hljs-number">3</span>.<span class="hljs-number">66</span>d      <span class="hljs-number">5</span>.<span class="hljs-number">20</span>e +  <span class="hljs-number">13</span>.<span class="hljs-number"><code class="language-hljs apache"><span class="hljs-attribute">2e4f</span>      <span class="hljs-number">3</span>.<span class="hljs-number">8</span>d      <span class="hljs-number">0</span>f    <span class="hljs-number">3</span>.<span class="hljs-number">66</span>d      <span class="hljs-number">5</span>.<span class="hljs-number">20</span>e +  <span class="hljs-number">13</span>.<span class="hljs-number">14</span>f<br></code></pre></td></tr></table></figure><ul><li><strong>字符常量</strong>：使用英文单引号 ‘ ‘ 修饰。</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs scheme"><span class="hljs-symbol">&#x27;a</span>&#x27;       <span class="hljs-symbol">&#x27;A</span>&#x27;         <span class="hljs-symbol">&#x27;$</span>&#x27;     <span class="hljs-symbol"><code class="language-hljs scheme"><span class="hljs-symbol">&#x27;a</span>&#x27;       <span class="hljs-symbol">&#x27;A</span>&#x27;         <span class="hljs-symbol">&#x27;$</span>&#x27;     <span class="hljs-symbol">&#x27;*</span>&#x27;<br></code></pre></td></tr></table></figure><ul><li><strong>字符串常量</strong>： 使用英文双引号 “ “ 修饰。</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs 1c"><span class="hljs-string">&quot;Java&quot;</span>           <span class="hljs-string">&quot;1234&quot;</span>          <span class="hljs-string">&quot;  &quot;</span>     <span class="hljs-string"><code class="language-hljs 1c"><span class="hljs-string">&quot;Java&quot;</span>           <span class="hljs-string">&quot;1234&quot;</span>          <span class="hljs-string">&quot;  &quot;</span>     <span class="hljs-string">" 我爱java"</span><br></code></pre></td></tr></table></figure><ul><li><strong>布尔常量</strong>： 分为true值和false值。</li><li><strong>null常量</strong>：表示对象的引用为空。</li></ul><h2 id="2-2-java运算符：一些特殊符号（-、-、-、-、-、-）"><a href="#2-2-java运算符：一些特殊符号（-、-、-、-、-、-）" class="headerlink" title="2.2.java运算符：一些特殊符号（+ 、-、 *、 %、 =、$ ）"></a><strong>2.2.java运算符：一些特殊符号（+ 、-、 *、 %、 =、$ ）</strong></h2><ul><li><strong>算数运算符</strong></li></ul><p><img src="https://pic4.zhimg.com/v2-6de6eab6888a6bf91f82c5f7cfb1f2cf_b.jpg" alt="img"></p><ul><li><strong>赋值运算符</strong></li></ul><p><img src="https://pic2.zhimg.com/v2-bd70cb692dae7f6da46c9efc04beb729_b.jpg" alt="img"></p><ul><li><strong>比较运算符</strong></li></ul><p><img src="https://pic1.zhimg.com/v2-930e1c088bf93e36f4d774f394794298_b.jpg" alt="img"></p><ul><li><strong>逻辑运算符</strong></li></ul><p><img src="https://pic2.zhimg.com/v2-fd28c236f400f7a6d51f748535964951_b.jpg" alt="img"></p><ul><li><strong>位运算符</strong></li></ul><p><img src="https://pic3.zhimg.com/v2-b4bb21ffc38eb260c4085ccab9dc1c26_b.jpg" alt="img"></p><ul><li><strong>条件运算符</strong></li></ul><p>三元运算符：由 ? : 组成</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs actionscript">(条件表达式=成功) ? <span class="hljs-literal">true</span>（成功执行） : <span class="hljs-literal"><code class="language-hljs actionscript">(条件表达式=成功) ? <span class="hljs-literal">true</span>（成功执行） : <span class="hljs-literal">false</span>（或者执行） ;<br></code></pre></td></tr></table></figure><ul><li><strong>运算符优先级</strong></li></ul><p><img src="https://pic1.zhimg.com/v2-b51114b6b944521dbd5cc7780bdcd008_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-95e447e417e4af45ecc4cde5fe7cfc48_b.gif" alt="img"></p><h2 id="3-1-选择结构语句"><a href="#3-1-选择结构语句" class="headerlink" title="3.1.选择结构语句"></a><strong>3.1.选择结构语句</strong></h2><ul><li><strong>if 条件语句</strong></li><li>解释：指满足某种条件，就可以进行某种处理。判断条件是一个布尔值，当判断条件为true时，就会执行执行语句。</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs dust"><span class="xml">if ( 判断条件 )</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">     执行语句</span><br><span class="hljs-template-variable"><code class="language-hljs dust"><span class="xml">if ( 判断条件 )</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">     执行语句</span><br><span class="hljs-template-variable">  &#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>if….else 语句</strong></li><li>解释：指满足某种条件，就执行某种处理，否则就执行另一种处理。</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs dust"><span class="xml">if（判断条件）</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    执行语句1</span><br><span class="hljs-template-variable">   &#125;</span><span class="xml">else</span><span class="hljs-template-variable">&#123; </span><br><span class="hljs-template-variable">  执行语句2</span><br><span class="hljs-template-variable"><code class="language-hljs dust"><span class="xml">if（判断条件）</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    执行语句1</span><br><span class="hljs-template-variable">   &#125;</span><span class="xml">else</span><span class="hljs-template-variable">&#123; </span><br><span class="hljs-template-variable">  执行语句2</span><br><span class="hljs-template-variable"> &#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>switch 条件语句</strong></li><li>解释:switch为选择性语句。即通过控制表达式的值与每一个case的目标值进行匹配，匹配成功就执行该case的执行语句，并通过break关键字跳出switch语句。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(控制表达式)&#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br>      执行语句<span class="hljs-number">1</span><br>         <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :<br>       执行语句<span class="hljs-number">2</span><br>       <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :<br>        执行语句<span class="hljs-number">3</span><br>         <span class="hljs-keyword">break</span>;<br>     ...........<br><br>   <span class="hljs-keyword">default</span>:<br>      执行语句n<br>      <span class="hljs-keyword"><code class="language-hljs arduino"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(控制表达式)&#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br>      执行语句<span class="hljs-number">1</span><br>         <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :<br>       执行语句<span class="hljs-number">2</span><br>       <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :<br>        执行语句<span class="hljs-number">3</span><br>         <span class="hljs-keyword">break</span>;<br>     ...........<br><br>   <span class="hljs-keyword">default</span>:<br>      执行语句n<br>      <span class="hljs-keyword">break</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="3-2循环结构语句"><a href="#3-2循环结构语句" class="headerlink" title="3.2循环结构语句"></a><strong>3.2循环结构语句</strong></h2><ul><li><strong>while循环语句</strong></li><li>解释：当循环条件为true时，循环体就会执行。循环执行完又去判断循环条件是否为true，为true则继续执行循环体，不为true就结束循环。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params"><code class="language-hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(循环条件)</span></span>&#123;<br>    执行语句（循环体）<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>do……..while循环语句</strong></li><li>解释：无条件先执行循环体，然后再根据循环条件进行判断为true，则再次执行循环体，否则为false就跳出循环语句。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs gcode"><span class="hljs-keyword">do</span> &#123;  <br>    执行语句（循环体）<br>       .....<br> &#125; <span class="hljs-keyword">while</span><span class="hljs-comment"><code class="language-hljs gcode"><span class="hljs-keyword">do</span> &#123;  <br>    执行语句（循环体）<br>       .....<br> &#125; <span class="hljs-keyword">while</span><span class="hljs-comment">(循环条件)</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>for循环</strong></li><li>解释：第一步 执行1。</li><li>第二步 执行2，如果循环条件为true，则执行3、如果循环条件为false，则执行5。</li><li>第三步 执行4。</li><li>第四步 执行3，再去重复第二步。</li><li>第五步 执行5。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs lasso">       for(初始化表达式;循环条件;操作表达式)&#123;<br>               执行语句<br>                <span class="hljs-params">...</span><span class="hljs-params">...</span><br>       &#125;<br><br><span class="hljs-comment"><code class="language-hljs lasso">       for(初始化表达式;循环条件;操作表达式)&#123;<br>               执行语句<br>                <span class="hljs-params">...</span><span class="hljs-params">...</span><br>       &#125;<br><br><span class="hljs-comment">//1.代表-初始化表达式、2.代表-循环条件、3.代表-操作表达式 、  4.代表-执行语句 、 5.代表-跳出循环</span><br></code></pre></td></tr></table></figure><ul><li><strong>循环嵌套</strong></li><li>解释：指在一个循环语句中再用一个循环语句。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs lasso">for(初始化表达式;循环条件;操作表达式)&#123;<br>         <span class="hljs-params">...</span><span class="hljs-params">...</span>.. <br>     for(初始化表达式;循环条件;操作表达式)&#123;<br>         执行语句<br>          <span class="hljs-params">...</span><span class="hljs-params">...</span><br>     &#125;<br>        <span class="hljs-params"><code class="language-hljs lasso">for(初始化表达式;循环条件;操作表达式)&#123;<br>         <span class="hljs-params">...</span><span class="hljs-params">...</span>.. <br>     for(初始化表达式;循环条件;操作表达式)&#123;<br>         执行语句<br>          <span class="hljs-params">...</span><span class="hljs-params">...</span><br>     &#125;<br>        <span class="hljs-params">...</span>..<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><strong>跳转语句</strong></li><li>**break **解释：就是跳出当前循环结构语句。</li><li>**continue **解释：终止本次循环，执行下次循环。</li></ul><p><img src="https://pic1.zhimg.com/v2-4454f2d1d27cb717bfa879693840217c_b.gif" alt="img"></p><h2 id="4-1数组"><a href="#4-1数组" class="headerlink" title="4.1数组"></a><strong>4.1数组</strong></h2><p>数组指的是一组数据的集合，数组中的每一个数据称为元素。数组中可以存放任意类型数据，但存放的数据类型の统一一致。数组分为一维数组和多维数组。</p><p>索引：（数组中的元素有对应的下标即索引）</p><p>（1）从0开始 （2）是连续的 （3）逐一增加 每次+1</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs inform7">数组的定义三种方式：<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型 <span class="hljs-comment">[ 数组长度 ]</span>;<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型<span class="hljs-comment">[]</span>&#123; 元素1,元素2,元素3，... &#125;;<br><br>           数组类型<span class="hljs-comment"><code class="language-hljs inform7">数组的定义三种方式：<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型 <span class="hljs-comment">[ 数组长度 ]</span>;<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型<span class="hljs-comment">[]</span>&#123; 元素1,元素2,元素3，... &#125;;<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = &#123; 元素1,元素2,元素3，...&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>java不同数据类型元素的默认值</strong></p></blockquote><p><img src="https://pic3.zhimg.com/v2-de5542d27e363b8363e1982601c07bfe_b.jpg" alt="img"></p><p><strong>4.2.常见的数组操作</strong></p><ul><li><strong>数组遍历 ： 依次访问数组中的每一个元素，该操作称为数组遍历。</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs awk">ex：     int [ ] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <br>             sout(arr [<span class="hljs-number">0</span>]);   <span class="hljs-regexp">//</span>表示第一个元素   <br>             sout(arr [<span class="hljs-number">1</span>]);   <span class="hljs-regexp">//</span>表示第二个元素    <br>             sout(arr [<span class="hljs-number">2</span>]);   <span class="hljs-regexp">//</span>表示第三个元素    <br><br>        <span class="hljs-regexp">//</span> 一个一个太麻烦 用循环解决：<br><br>        <span class="hljs-keyword">for</span>（int i=<span class="hljs-number">0</span>； i&lt;<span class="hljs-number">5</span>; i++）&#123;<br>           sout( arr[i] ); <span class="hljs-regexp"><code class="language-hljs awk">ex：     int [ ] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <br>             sout(arr [<span class="hljs-number">0</span>]);   <span class="hljs-regexp">//</span>表示第一个元素   <br>             sout(arr [<span class="hljs-number">1</span>]);   <span class="hljs-regexp">//</span>表示第二个元素    <br>             sout(arr [<span class="hljs-number">2</span>]);   <span class="hljs-regexp">//</span>表示第三个元素    <br><br>        <span class="hljs-regexp">//</span> 一个一个太麻烦 用循环解决：<br><br>        <span class="hljs-keyword">for</span>（int i=<span class="hljs-number">0</span>； i&lt;<span class="hljs-number">5</span>; i++）&#123;<br>           sout( arr[i] ); <span class="hljs-regexp">//</span>代表每个索引元素<br>     &#125; <br></code></pre></td></tr></table></figure><ul><li><strong>数组最值： 获取数组中的最值（最大值、最小值）</strong></li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs excel">ex：         <span class="hljs-built_in">int</span> [ ] arr =&#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">33</span>&#125;; <br>                  <span class="hljs-built_in">int</span> <span class="hljs-built_in">Max</span> = arr[<span class="hljs-number">0</span>];<br>              for(<span class="hljs-built_in">int</span> x= <span class="hljs-number">1</span>; x&lt; arr.length; x++)&#123;<br>                 <span class="hljs-built_in">if</span>(arr[x]&gt;<span class="hljs-built_in">Max</span>)&#123;<br>                   sout(<span class="hljs-string">&quot;Max&quot;</span>+<span class="hljs-built_in">Max</span>);<br>              &#125;<br>          &#125;<br>          注：把第一个数假设当<span class="hljs-built_in"><code class="language-hljs excel">ex：         <span class="hljs-built_in">int</span> [ ] arr =&#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">33</span>&#125;; <br>                  <span class="hljs-built_in">int</span> <span class="hljs-built_in">Max</span> = arr[<span class="hljs-number">0</span>];<br>              for(<span class="hljs-built_in">int</span> x= <span class="hljs-number">1</span>; x&lt; arr.length; x++)&#123;<br>                 <span class="hljs-built_in">if</span>(arr[x]&gt;<span class="hljs-built_in">Max</span>)&#123;<br>                   sout(<span class="hljs-string">&quot;Max&quot;</span>+<span class="hljs-built_in">Max</span>);<br>              &#125;<br>          &#125;<br>          注：把第一个数假设当<span class="hljs-built_in">Max</span> 与后面的数比较   <br></code></pre></td></tr></table></figure><ul><li><strong>数组排序： 对数组中的元素进行排序</strong></li></ul><blockquote><p>基本思想: 冒泡排序，类似于水中冒泡，较大的数沉下去，较小的数慢慢冒起来，假设从小到大，即为较大的数慢慢往后排，较小的数慢慢往前排。 直观表达，每一趟遍历，将一个最大的数移到序列末尾。</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;<br>           <span class="hljs-built_in">exSort</span>(arr);<br>        ArrayUtil.<span class="hljs-built_in">print</span>(arr);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * @param arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr==null || arr.length &lt; <span class="hljs-number">2</span> )&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i <span class="hljs-number">-1</span>; j++) &#123;   <br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number"><code class="language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;<br>           <span class="hljs-built_in">exSort</span>(arr);<br>        ArrayUtil.<span class="hljs-built_in">print</span>(arr);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * @param arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr==null || arr.length &lt; <span class="hljs-number">2</span> )&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i <span class="hljs-number">-1</span>; j++) &#123;   <br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.3.多维数组</strong></p><p>多维数组，其实就是多个一维数组结合起来的，数组里面套数组。</p><p><img src="https://pic4.zhimg.com/v2-73b7ec3d67ed2bf730413ef88fc80bfb_b.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-5b164717409490488a541e3160c7a1d1_b.gif" alt="img"></p><p><strong>好了，今天就到这儿吧，小伙伴们点赞、收藏、评论，一键三连走起呀，我是买盐，我们下期见</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java了解</title>
    <link href="/2021/07/26/01java%E5%85%A5%E9%97%A8/"/>
    <url>/2021/07/26/01java%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-tTJzuwUV" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="30394495" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1.Java概述"></a>1.Java概述</h2><p><img src="https://pic4.zhimg.com/v2-f584bd516ff116cdc5511e3491235653_b.gif" alt="img"></p><blockquote><p>1.什么是java？       </p></blockquote><p>了解Java语言是什么之前，让我们先认识什么是计算机语言。计算机语言就是我们于计算机之间的通信语言，由指令进行操作。计算机语言分为三大类：<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%80">机器语言</a>、<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/61826">汇编语言</a>、<a href="https://baike.baidu.com/item/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80">高级语言</a>。 </p><p>Java则是一种高级语言。它由Sun公司于1995年5月所推出可以编写跨平台应用软件、完全面向对象的程序设计语言。  </p><p>   对于不同开发市场，Java分为3个技术平台，JavaSE、JavaEE、JavaME。</p><ul><li>  JavaSE(JavaPlatformStandardEdition，Java平台标准版）该版本是为开发普通桌面和    商务应用程序提供的解决方案，JavaSE是三个平台中最核心部分。JavaSE和JavaME都是从JavaSE的基础上发展而来的。</li><li>  JavaEE(JavaPlatformEnterpriseEdition，Java平台企业版）该版本是为开发企业级应用程序提供的解决方案。JavaEE可以被看作一个技术平台，该平台用于开发、装配以及部署企业级应用程序，其中主要包括servlet、JSP、JavaBean、EJB.WebService等。</li><li>  JavaME(JavaPIatformMicroEdition，Java平台微型版）该版本是为开发电子消费产品和嵌人式设备提供的解决方案。JavaME主要用于微型数字电子设备上软件程序的开发。例如，为家用电器增加智能化控制和联网功能，为手机增加游戏和通讯录管理功能。此外，JavaME提供了HTTP等高级lnternet协议，使移动电话能以Client/Server(客户/服务器）方式直接访问lnternet的全部信息，提供最高效率的无线交流。</li></ul><blockquote><p>2.Java语言特点</p></blockquote><ul><li>跨平台                                      </li><li>面向对象                                            </li><li>简单易用</li><li>安全，支持多线程</li></ul><h2 id="2-JDK的了解"><a href="#2-JDK的了解" class="headerlink" title="2.JDK的了解"></a>2.JDK的了解</h2><blockquote><p>1.JDK是什么？</p></blockquote><p>JDK是Java核心、是<a href="https://baike.baidu.com/item/Java/85979">Java</a>语言的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/10418833">软件开发工具包</a>，主要用于<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/9157757">移动设备</a>、<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87/10055189">嵌入式设备</a>上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。  </p><p><img src="https://pic1.zhimg.com/v2-012e07cd9a0d10266c6245ea8bd76340_b.png" alt="img"></p><blockquote><p>2.如何安装JDK</p></blockquote><p><img src="https://pic2.zhimg.com/v2-d9c6679c149aa0d15c650505d99d81a1_b.png" alt="img"></p><p>下面以Windows10系统下的JDK下载和安装为例进行说明。</p><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h2><p>个人附上俺的安装包：<br>链接：<a href="https://pan.baidu.com/s/1Sa2O4rYGgZwXR5M9Hdu5aQ">https://pan.baidu.com/s/1Sa2O4rYGgZwXR5M9Hdu5aQ</a> 提取码：vyff</p><p>还可以访问oracle官网：<a href="http://www.oracle.com/">http://www.oracle.com</a><br>在首页点击Downloads，进入oracle软件下载页。</p><p><img src="https://pic4.zhimg.com/v2-a485f9d08cef042a013c46671bc9b6eb_b.jpg" alt="img"></p><p>在下载页面，点击Java。</p><p><img src="https://pic2.zhimg.com/v2-3d45b0adae3b5150e43cb0592c89877d_b.jpg" alt="img"></p><p>选择Java (JDK) for Developers，点击。</p><p><img src="https://pic2.zhimg.com/v2-7bb299d07c0ead5f9030a93225dda92d_b.jpg" alt="img"></p><p>在 Java SE Downloads 页面，点击中间的DOWNLOAD按钮。</p><p><img src="https://pic4.zhimg.com/v2-bb7df35ab224b4ba20ac600839c1210b_b.jpg" alt="img"></p><p>在JDK下载页，首先勾选Accept License Agreement，同意Oracle Java SE的Oracle技术网许可协议。</p><p><img src="https://pic3.zhimg.com/v2-e92ca94f39b4f6b07a068b105c53f6b2_b.jpg" alt="img"></p><p>最后，根据操作系统选择合适的版本下载，以课程为例，我们选择Windows系统64位版本，exe是安装程序，点击下载即可。 </p><p><img src="https://pic3.zhimg.com/v2-605a774c8914b9b1a17ab16888529e8a_b.jpg" alt="img"></p><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>Windows版JDK安装，基本是傻瓜式安装，直接下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理，最好修改下安装路径，将与开发相关的软件都安装到一个文件夹下，例如E:\develop。注意，安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p><p>首先双击打开安装程序，点击下一步。</p><p><img src="https://pic4.zhimg.com/v2-55f0acf073d9d8777d74e18257cbbddf_b.jpg" alt="img"></p><p>默认安装目录为C盘，点击更改，修改安装路径。</p><p><img src="https://pic2.zhimg.com/v2-d699b701488d8c4450c337af81a6c7f5_b.jpg" alt="img"></p><p>将目录更改至E:\develop，要注意不要修改后面的Java\jdk-11\目录结构。点击确定，进入下一步。</p><p><img src="https://pic3.zhimg.com/v2-0fd00914f3b265f9c12109dfa288a742_b.jpg" alt="img"></p><p>点击下一步，开始安装。</p><p><img src="https://pic4.zhimg.com/v2-dbf8e6e96542ae81b1feef02b2be3e3b_b.jpg" alt="img"></p><p>看到安装成功界面，点击关闭，完成安装。</p><p><img src="https://pic3.zhimg.com/v2-1b48380fa799fa6164d06bbacd083b12_b.jpg" alt="img"></p><blockquote><p>当我们配置安装好就需要在windows系统中来使用Java就需要配置系统变量</p></blockquote><p><img src="https://pic3.zhimg.com/v2-4bafbedb6c2cac4ea37a23c423768bd6_b.jpeg" alt="img"></p><p>下面以Windows10系统下的Java环境变量配置为例进行说明。</p><ol><li>右键点击“此电脑”，选择“属性”项。</li></ol><p><img src="https://pic3.zhimg.com/v2-adf216938d82649c704588085c6ec8fa_b.jpg" alt="img"></p><ol><li>点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。</li></ol><p><img src="https://pic4.zhimg.com/v2-4e7d963fac01412b4112f7c5aea6b183_b.jpg" alt="img"></p><ol><li>在弹出的“环境变量”框，中选择下方的系统变量，点击新建。</li></ol><p><img src="https://pic2.zhimg.com/v2-ec07be29e818e547cf2ad090d356b6c5_b.jpg" alt="img"></p><ol><li>在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。</li></ol><p>变量名为：JAVA_HOME</p><p>变量值为JDK的安装路径，到bin目录的上一层即可。比如E:\develop\Java\jdk-11</p><p>注意：为防止路径输入错误，可以打开文件夹，拷贝路径。</p><p><img src="https://pic3.zhimg.com/v2-74a2f9d470ec259137885f6741934ad6_b.jpg" alt="img"></p><p>点击确定后，系统变量中会出现一条新的记录。</p><p><img src="https://pic1.zhimg.com/v2-20457aba4d9b2a9059a096f555ba1974_b.jpg" alt="img"></p><ol><li>然后选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA_HOME变量添加到“Path”变量中。</li></ol><p><img src="https://pic4.zhimg.com/v2-0a218e92be02de4220d8de4b0cd7c9ab_b.jpg" alt="img"></p><p>在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin。</p><p><img src="https://pic2.zhimg.com/v2-59afad93b16c426165c360cbd8499c49_b.jpg" alt="img"></p><p>输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。</p><p><img src="https://pic2.zhimg.com/v2-58e42051bf6e164349ac1ec945e7d1fd_b.jpg" alt="img"></p><ol><li>至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。</li></ol><p>如果之前已经打开命令行窗口，需要关闭重新启动才可。在非JDK安装的bin目录下，输入java或者javac命令，查看效果。</p><p><img src="https://pic2.zhimg.com/v2-b034baedaf78395f99940bc83b3dceb9_b.jpg" alt="img"></p><p>​                                 安装好这两步就可以秃头得来学Java了</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
