<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>html入门</title>
    <link href="/post/4d1fc600-f29c-11eb-9e66-8d498331ecec/"/>
    <url>/post/4d1fc600-f29c-11eb-9e66-8d498331ecec/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h1 id="1-HTML5概述"><a href="#1-HTML5概述" class="headerlink" title="1.HTML5概述"></a>1.HTML5概述</h1><h2 id="01-html5是什么"><a href="#01-html5是什么" class="headerlink" title="01-html5是什么"></a>01-html5是什么</h2><blockquote><p>HTML(Hyper Text Markup Language)超文本标记语言</p><p>超文本:超越了普通文本的功能,不仅可以展示文字,还可以展示超链接,图片,音乐,视频等丰富内容</p><p>标记语言:描述特定功能的标签.w3c(World wide web consortium)世界万维网联盟定义好了一套标签.</p></blockquote><h2 id="02-第一个html页面"><a href="#02-第一个html页面" class="headerlink" title="02-第一个html页面"></a>02-第一个html页面</h2><blockquote><p>创建一个.html(.htm)后缀的文件</p><p>在文件中使用标签</p><p>html:页面根标签</p><p>head: 页面文件的主要信息</p><p>body:浏览器中显示的内容</p></blockquote><p>具体实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <span class="hljs-comment">&lt;!--html的声明，约束--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--元标签，描述了页面的编码--&gt;</span><br>    <span class="hljs-comment">&lt;!--这是html的注释 ctrl + / 或者 ctrl + shift + /--&gt;</span><br>  <span class="hljs-comment">&lt;!--    meta标签charset=&quot;UTF-8&quot;声明页面中字符的编码集utf-8--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    html,DDYS!<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <span class="hljs-comment">&lt;!--html的声明，约束--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--元标签，描述了页面的编码--&gt;</span><br>    <span class="hljs-comment">&lt;!--这是html的注释 ctrl + / 或者 ctrl + shift + /--&gt;</span><br>  <span class="hljs-comment">&lt;!--    meta标签charset=&quot;UTF-8&quot;声明页面中字符的编码集utf-8--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    html,DDYS!<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="03-html组成与书写规范"><a href="#03-html组成与书写规范" class="headerlink" title="03-html组成与书写规范"></a>03-html组成与书写规范</h2><blockquote><p>html:页面根标签</p><p>head: 页面文件的主要信息</p><p>body:浏览器中显示的内容</p><p>html注释 <code>&lt;!--注释--&gt;</code></p><p>标签属性(标签指明是什么,属性为其增加特殊的特性)</p><p>普通标签可以层层嵌套</p><p>标签分为两种</p><p>​    1.双标签(有内容) 例如<code> &lt;title&gt;index&lt;/title&gt;</code></p><p>​    2.单标签(没有内容) 自闭合标签 例如 <code>&lt;meta charset=&quot;UTF-8&quot;/&gt;</code></p></blockquote><h1 id="2-HTML常用标签"><a href="#2-HTML常用标签" class="headerlink" title="2. HTML常用标签"></a>2. HTML常用标签</h1><h2 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h2><h3 id="01-文本标签"><a href="#01-文本标签" class="headerlink" title="01-文本标签"></a>01-文本标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">h1~h6(hn) 标题 序号的取值范围只能是1~6 超出范围没有任何特殊效果</span><br><span class="hljs-comment">h$&#123;标题$&#125;*6</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        html的语法</span><br><span class="hljs-comment">            标签(元素)的分类：</span><br><span class="hljs-comment">                1. 有主体内容的标签  &lt;开始标签&gt;标签内容&lt;/结束标签&gt;</span><br><span class="hljs-comment">                2. 没有主体内容的标签  &lt;开始标签/&gt;</span><br><span class="hljs-comment">            注意：</span><br><span class="hljs-comment">                1. html语法不严谨。</span><br><span class="hljs-comment">                2. html中标签的名字是不区分大小写的。</span><br><span class="hljs-comment">                3. html中的结束标签可以省略，如果省略会帮我们自动补齐结束标签。</span><br><span class="hljs-comment">        html中的文本标签：</span><br><span class="hljs-comment">            标题标签：&lt;h1-h6&gt; 数字越小，标题越大</span><br><span class="hljs-comment">            分割线标签： &lt;hr/&gt;</span><br><span class="hljs-comment">            文字标签：&lt;font&gt;</span><br><span class="hljs-comment">                属性face：表示字体样式</span><br><span class="hljs-comment">            加粗：&lt;b&gt;</span><br><span class="hljs-comment">            倾斜：&lt;i&gt;</span><br><span class="hljs-comment">            换行：&lt;br/&gt;</span><br><span class="hljs-comment">            段落标签：&lt;p&gt; 有行间距</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是标题h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是标题h4<span class="hljs-tag">&lt;/<span class="hljs-name">H4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我是标题h5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>我是标题h6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;楷体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>买盐<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗的java程序员<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>斜的java程序员<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>又粗又斜的java程序员<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--换行--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    你好换行<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    我好换行<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>           普通文本<br><span class="hljs-tag">&lt;<span class="hljs-name">h0</span>&gt;</span>标题0<span class="hljs-tag">&lt;/<span class="hljs-name">h0</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h7</span>&gt;</span>标题7<span class="hljs-tag">&lt;/<span class="hljs-name">h7</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">h1~h6(hn) 标题 序号的取值范围只能是1~6 超出范围没有任何特殊效果</span><br><span class="hljs-comment">h$&#123;标题$&#125;*6</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        html的语法</span><br><span class="hljs-comment">            标签(元素)的分类：</span><br><span class="hljs-comment">                1. 有主体内容的标签  &lt;开始标签&gt;标签内容&lt;/结束标签&gt;</span><br><span class="hljs-comment">                2. 没有主体内容的标签  &lt;开始标签/&gt;</span><br><span class="hljs-comment">            注意：</span><br><span class="hljs-comment">                1. html语法不严谨。</span><br><span class="hljs-comment">                2. html中标签的名字是不区分大小写的。</span><br><span class="hljs-comment">                3. html中的结束标签可以省略，如果省略会帮我们自动补齐结束标签。</span><br><span class="hljs-comment">        html中的文本标签：</span><br><span class="hljs-comment">            标题标签：&lt;h1-h6&gt; 数字越小，标题越大</span><br><span class="hljs-comment">            分割线标签： &lt;hr/&gt;</span><br><span class="hljs-comment">            文字标签：&lt;font&gt;</span><br><span class="hljs-comment">                属性face：表示字体样式</span><br><span class="hljs-comment">            加粗：&lt;b&gt;</span><br><span class="hljs-comment">            倾斜：&lt;i&gt;</span><br><span class="hljs-comment">            换行：&lt;br/&gt;</span><br><span class="hljs-comment">            段落标签：&lt;p&gt; 有行间距</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是标题h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是标题h4<span class="hljs-tag">&lt;/<span class="hljs-name">H4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我是标题h5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>我是标题h6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;楷体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>买盐<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗的java程序员<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>斜的java程序员<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>又粗又斜的java程序员<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--换行--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    你好换行<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    我好换行<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>           普通文本<br><span class="hljs-tag">&lt;<span class="hljs-name">h0</span>&gt;</span>标题0<span class="hljs-tag">&lt;/<span class="hljs-name">h0</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h7</span>&gt;</span>标题7<span class="hljs-tag">&lt;/<span class="hljs-name">h7</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br><br></code></pre></td></tr></table></figure><h3 id="02-标签属性"><a href="#02-标签属性" class="headerlink" title="02-标签属性"></a>02-标签属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--属性：</span><br><span class="hljs-comment">            属性格式：</span><br><span class="hljs-comment">                &lt;开始标签 属性名=属性值 属性名=属性值&gt;标签内容&lt;/结束标签&gt;</span><br><span class="hljs-comment">                &lt;开始标签 属性名=属性值 属性名=属性值/&gt;</span><br><span class="hljs-comment">            通用属性：</span><br><span class="hljs-comment">                size：大小。单位是px表示像素，px也可以省略</span><br><span class="hljs-comment">                color：颜色。 取值可以是以下内容。</span><br><span class="hljs-comment">                    1. 颜色的英语单词</span><br><span class="hljs-comment">                    2. 是红绿蓝三原色组成的颜色。</span><br><span class="hljs-comment">                        #六个字符表示。 比如#00ff00</span><br><span class="hljs-comment">                        每一个颜色都是使用十六进制表示的，最大ff，最小是00</span><br><span class="hljs-comment">                        #ff0000：红色</span><br><span class="hljs-comment">                        #00ff00：绿色</span><br><span class="hljs-comment">                        #0000ff：蓝色</span><br><span class="hljs-comment">                        如果同颜色的两个字符相同，可以写成一个，比如：#00ff00  -&gt; #0f0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                width：宽度。取值可以是以下内容。</span><br><span class="hljs-comment">                    1. 像素，单位px，px也可以省略</span><br><span class="hljs-comment">                    2. 百分比。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                align：排版方式</span><br><span class="hljs-comment">                    1. left：左对齐</span><br><span class="hljs-comment">                    2. right：右对齐</span><br><span class="hljs-comment">                    3. center：居中</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是标题h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是标题h4<span class="hljs-tag">&lt;/<span class="hljs-name">H4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我是标题h5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>我是标题h6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#ff0000&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--属性：</span><br><span class="hljs-comment">            属性格式：</span><br><span class="hljs-comment">                &lt;开始标签 属性名=属性值 属性名=属性值&gt;标签内容&lt;/结束标签&gt;</span><br><span class="hljs-comment">                &lt;开始标签 属性名=属性值 属性名=属性值/&gt;</span><br><span class="hljs-comment">            通用属性：</span><br><span class="hljs-comment">                size：大小。单位是px表示像素，px也可以省略</span><br><span class="hljs-comment">                color：颜色。 取值可以是以下内容。</span><br><span class="hljs-comment">                    1. 颜色的英语单词</span><br><span class="hljs-comment">                    2. 是红绿蓝三原色组成的颜色。</span><br><span class="hljs-comment">                        #六个字符表示。 比如#00ff00</span><br><span class="hljs-comment">                        每一个颜色都是使用十六进制表示的，最大ff，最小是00</span><br><span class="hljs-comment">                        #ff0000：红色</span><br><span class="hljs-comment">                        #00ff00：绿色</span><br><span class="hljs-comment">                        #0000ff：蓝色</span><br><span class="hljs-comment">                        如果同颜色的两个字符相同，可以写成一个，比如：#00ff00  -&gt; #0f0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                width：宽度。取值可以是以下内容。</span><br><span class="hljs-comment">                    1. 像素，单位px，px也可以省略</span><br><span class="hljs-comment">                    2. 百分比。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                align：排版方式</span><br><span class="hljs-comment">                    1. left：左对齐</span><br><span class="hljs-comment">                    2. right：右对齐</span><br><span class="hljs-comment">                    3. center：居中</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是标题h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是标题h4<span class="hljs-tag">&lt;/<span class="hljs-name">H4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我是标题h5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>我是标题h6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#ff0000&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h3 id="03-简单案例"><a href="#03-简单案例" class="headerlink" title="03-简单案例"></a>03-简单案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs html"> <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        如果想要在html中表示空格，那么需要使用&amp;nbsp;</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>公司简介<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;orange&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>谷歌公司<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>是由<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>拉里·佩奇和谢尔盖·布林<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>被公认为全球最大的搜索引擎公司 。谷歌是一家位于美国的跨国科技企业，业务包括互联网搜索、云计算、广告技术等，同时开发并提供大量基于互联网的产品与服务，其主要利润来自于AdWords等广告服务。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>1999年下半年，谷歌网站“Google”正式启用 。2010年3月23日，宣布关闭在中国大陆市场搜索服务。2015年8月10日，宣布对企业架构进行调整，并创办了一家名为Alphabet的“伞形公司”（Umbrella Company），成为Alphabet旗下子公司。2015年，在2015年度“世界品牌500强”排行中重返榜首，苹果和亚马逊分别位居第二和第三名。2016年6月8日，《2016年BrandZ全球最具价值品牌百强榜》公布，以2291.98亿美元的品牌价值重新超越苹果成为百强第一   。2017年2月，Brand Finance发布2017年度全球500强品牌榜单，排名第一 。2017年6月，《2017年BrandZ最具价值全球品牌100强》公布，谷歌公司名列第一位。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>2017年12月13日，谷歌正式宣布谷歌AI中国中心（Google AI China Center）在北京成立。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>2018年1月，腾讯和谷歌宣布双方签署一份覆盖多项产品和技术的专利交叉授权许可协议 。2018年5月29日，《2018年BrandZ全球最具价值品牌100强》发布，谷歌公司名列第一位。12月18日，世界品牌实验室编制的《2018世界品牌500强》揭晓，Google排名第2位 。2019年度全球最具价值100大品牌榜第二位。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;orange&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--公司的页脚--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#999999&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#999999&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>完美的搜索引擎，不作恶（Dont be evil）<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"> <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        如果想要在html中表示空格，那么需要使用&amp;nbsp;</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>公司简介<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;orange&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>谷歌公司<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>是由<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>拉里·佩奇和谢尔盖·布林<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>被公认为全球最大的搜索引擎公司 。谷歌是一家位于美国的跨国科技企业，业务包括互联网搜索、云计算、广告技术等，同时开发并提供大量基于互联网的产品与服务，其主要利润来自于AdWords等广告服务。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>1999年下半年，谷歌网站“Google”正式启用 。2010年3月23日，宣布关闭在中国大陆市场搜索服务。2015年8月10日，宣布对企业架构进行调整，并创办了一家名为Alphabet的“伞形公司”（Umbrella Company），成为Alphabet旗下子公司。2015年，在2015年度“世界品牌500强”排行中重返榜首，苹果和亚马逊分别位居第二和第三名。2016年6月8日，《2016年BrandZ全球最具价值品牌百强榜》公布，以2291.98亿美元的品牌价值重新超越苹果成为百强第一   。2017年2月，Brand Finance发布2017年度全球500强品牌榜单，排名第一 。2017年6月，《2017年BrandZ最具价值全球品牌100强》公布，谷歌公司名列第一位。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>2017年12月13日，谷歌正式宣布谷歌AI中国中心（Google AI China Center）在北京成立。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>2018年1月，腾讯和谷歌宣布双方签署一份覆盖多项产品和技术的专利交叉授权许可协议 。2018年5月29日，《2018年BrandZ全球最具价值品牌100强》发布，谷歌公司名列第一位。12月18日，世界品牌实验室编制的《2018世界品牌500强》揭晓，Google排名第2位 。2019年度全球最具价值100大品牌榜第二位。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;orange&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--公司的页脚--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#999999&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#999999&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>完美的搜索引擎，不作恶（Dont be evil）<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br><br></code></pre></td></tr></table></figure><h3 id="04-超链接"><a href="#04-超链接" class="headerlink" title="04-超链接"></a>04-超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        超链接可以让文本变得可以被点击，点击后跳转到其他位置。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        超链接标签名称：&lt;a&gt;</span><br><span class="hljs-comment">        标签的属性</span><br><span class="hljs-comment">            href：表示跳转到哪个地方。取值可以是以下内容</span><br><span class="hljs-comment">                1. # 表示跳转到本页</span><br><span class="hljs-comment">                2. 本地的页面（重要）</span><br><span class="hljs-comment">                3. 互联网上的页面(重要)</span><br><span class="hljs-comment">            title：表示鼠标悬停时的提示</span><br><span class="hljs-comment">            target：打开方式</span><br><span class="hljs-comment">                _self：在本页面中打开，默认值</span><br><span class="hljs-comment">                _blank：新的页面中打开。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;01.第一个html文件.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>进入新html页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>进入百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        超链接可以让文本变得可以被点击，点击后跳转到其他位置。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        超链接标签名称：&lt;a&gt;</span><br><span class="hljs-comment">        标签的属性</span><br><span class="hljs-comment">            href：表示跳转到哪个地方。取值可以是以下内容</span><br><span class="hljs-comment">                1. # 表示跳转到本页</span><br><span class="hljs-comment">                2. 本地的页面（重要）</span><br><span class="hljs-comment">                3. 互联网上的页面(重要)</span><br><span class="hljs-comment">            title：表示鼠标悬停时的提示</span><br><span class="hljs-comment">            target：打开方式</span><br><span class="hljs-comment">                _self：在本页面中打开，默认值</span><br><span class="hljs-comment">                _blank：新的页面中打开。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;01.第一个html文件.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>进入新html页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>进入百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="05-列表标签"><a href="#05-列表标签" class="headerlink" title="05-列表标签"></a>05-列表标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        列表标签可以将数据以列表的形式展示。只需要掌握ol,ul,li。 里面的属性作为了解。</span><br><span class="hljs-comment">        1.有序列表：</span><br><span class="hljs-comment">            &lt;ol&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;/ol&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            ol的属性：</span><br><span class="hljs-comment">               type 列表项序号类型 取值 1数字(默认) A,a大小写英语字母 I,i大小写罗马字符</span><br><span class="hljs-comment">               start 起始序号 默认值1</span><br><span class="hljs-comment">               reversed 降序 默认不写是升序</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        2.无序列表：</span><br><span class="hljs-comment">            &lt;ul&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;/ul&gt;</span><br><span class="hljs-comment">            ul的属性：</span><br><span class="hljs-comment">                type 列表项图标类型 取值 disc实心圆(默认) circle空心圆 square方块</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序1号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序2号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序3号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;ol type=&quot;1&quot;&gt;</span><br><span class="hljs-comment">        &lt;li&gt;你好&lt;/li&gt;</span><br><span class="hljs-comment">        &lt;li&gt;我好&lt;/li&gt;</span><br><span class="hljs-comment">        &lt;li&gt;大家&lt;/li&gt;</span><br><span class="hljs-comment">    &lt;/ol&gt;</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        列表标签可以将数据以列表的形式展示。只需要掌握ol,ul,li。 里面的属性作为了解。</span><br><span class="hljs-comment">        1.有序列表：</span><br><span class="hljs-comment">            &lt;ol&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;/ol&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            ol的属性：</span><br><span class="hljs-comment">               type 列表项序号类型 取值 1数字(默认) A,a大小写英语字母 I,i大小写罗马字符</span><br><span class="hljs-comment">               start 起始序号 默认值1</span><br><span class="hljs-comment">               reversed 降序 默认不写是升序</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        2.无序列表：</span><br><span class="hljs-comment">            &lt;ul&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">               &lt;li&gt;内容&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;/ul&gt;</span><br><span class="hljs-comment">            ul的属性：</span><br><span class="hljs-comment">                type 列表项图标类型 取值 disc实心圆(默认) circle空心圆 square方块</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序1号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序2号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序3号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;ol type=&quot;1&quot;&gt;</span><br><span class="hljs-comment">        &lt;li&gt;你好&lt;/li&gt;</span><br><span class="hljs-comment">        &lt;li&gt;我好&lt;/li&gt;</span><br><span class="hljs-comment">        &lt;li&gt;大家&lt;/li&gt;</span><br><span class="hljs-comment">    &lt;/ol&gt;</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br><br></code></pre></td></tr></table></figure><h2 id="06-图片标签"><a href="#06-图片标签" class="headerlink" title="06-图片标签"></a>06-图片标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        图片标签可以将图片显示在网页中</span><br><span class="hljs-comment">        标签名称：&lt;img/&gt;</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">            src：必须的。表示图片的位置，图片可以来自本地，也可以来自互联网。</span><br><span class="hljs-comment">            width：表示图片的宽度。 单位是px像素，也可以是百分比。修改宽度后，高度会自动改变</span><br><span class="hljs-comment">            height：表示图片的高度。</span><br><span class="hljs-comment">            title：鼠标悬停时的提示</span><br><span class="hljs-comment">            alt：图片没有加载出来的提示</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ..表示上一级目录</span><br><span class="hljs-comment">        .表示当前目录</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;E:\Mine\Mine-life\blog\hexo\source\_posts\html入门\1.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;情侣&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片没有加载出来&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;img src=&quot;http://ntlias3.boxuegu.com/images/login/login-logo.png&quot; /&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        图片标签可以将图片显示在网页中</span><br><span class="hljs-comment">        标签名称：&lt;img/&gt;</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">            src：必须的。表示图片的位置，图片可以来自本地，也可以来自互联网。</span><br><span class="hljs-comment">            width：表示图片的宽度。 单位是px像素，也可以是百分比。修改宽度后，高度会自动改变</span><br><span class="hljs-comment">            height：表示图片的高度。</span><br><span class="hljs-comment">            title：鼠标悬停时的提示</span><br><span class="hljs-comment">            alt：图片没有加载出来的提示</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ..表示上一级目录</span><br><span class="hljs-comment">        .表示当前目录</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;E:\Mine\Mine-life\blog\hexo\source\_posts\html入门\1.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;情侣&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片没有加载出来&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;img src=&quot;http://ntlias3.boxuegu.com/images/login/login-logo.png&quot; /&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="07-内联标签和块标签"><a href="#07-内联标签和块标签" class="headerlink" title="07-内联标签和块标签"></a>07-内联标签和块标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        内联标签（行内标签）：不会自动换行。</span><br><span class="hljs-comment">        块标签：会自动换行（独占一行）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在html中有两个语义化标签，语义化标签本身没有含义，只是将代码从逻辑上分成不同的部分。</span><br><span class="hljs-comment">            span：内联标签（行内标签）</span><br><span class="hljs-comment">            div：块标签</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>点点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>再点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        内联标签（行内标签）：不会自动换行。</span><br><span class="hljs-comment">        块标签：会自动换行（独占一行）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在html中有两个语义化标签，语义化标签本身没有含义，只是将代码从逻辑上分成不同的部分。</span><br><span class="hljs-comment">            span：内联标签（行内标签）</span><br><span class="hljs-comment">            div：块标签</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>点点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>再点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="08-表格便签"><a href="#08-表格便签" class="headerlink" title="08-表格便签"></a>08-表格便签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        表格标签可以将数据按照表格的方式进行展示。</span><br><span class="hljs-comment">        要求：展示一个3行4列的表格</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表格标签：&lt;table&gt;</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">                border：边框线，单位是px像素</span><br><span class="hljs-comment">                width：表格的宽度</span><br><span class="hljs-comment">                cellspacing：单元格和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">                cellpadding：数据和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">        子标签：</span><br><span class="hljs-comment">            tr：表示行</span><br><span class="hljs-comment">            td：表示列</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第二行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第三行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        表格标签可以将数据按照表格的方式进行展示。</span><br><span class="hljs-comment">        要求：展示一个3行4列的表格</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表格标签：&lt;table&gt;</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">                border：边框线，单位是px像素</span><br><span class="hljs-comment">                width：表格的宽度</span><br><span class="hljs-comment">                cellspacing：单元格和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">                cellpadding：数据和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">        子标签：</span><br><span class="hljs-comment">            tr：表示行</span><br><span class="hljs-comment">            td：表示列</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第二行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第三行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="09-表格便签及其其他"><a href="#09-表格便签及其其他" class="headerlink" title="09-表格便签及其其他"></a>09-表格便签及其其他</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        表格标签可以将数据按照表格的方式进行展示。</span><br><span class="hljs-comment">        要求：展示一个3行4列的表格</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表格标签：&lt;table&gt;</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">                border：边框线，单位是px像素</span><br><span class="hljs-comment">                width：表格的宽度</span><br><span class="hljs-comment">                cellspacing：单元格和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">                cellpadding：数据和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">        子标签：</span><br><span class="hljs-comment">            tr：表示行</span><br><span class="hljs-comment">            td：表示列</span><br><span class="hljs-comment">            th：列。（表示表头，th中的内容会自动居中，并加粗）</span><br><span class="hljs-comment">            caption：表格的标题</span><br><span class="hljs-comment">            thead：语义化标签，本身没有含义，可以将代码从逻辑上分成不同的部分</span><br><span class="hljs-comment">            tbody：语义化标签，本身没有含义，可以将代码从逻辑上分成不同的部分</span><br><span class="hljs-comment">            tfoot：语义化标签，本身没有含义，可以将代码从逻辑上分成不同的部分</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            table表格中必须要先写tr行，写完tr行之后再写td列</span><br><span class="hljs-comment">            表格中最常用的三个标签是：table，tr，td。其他子标签作为了解。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>这是一个表格<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>描述<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--第一行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--第二行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--第三行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        表格标签可以将数据按照表格的方式进行展示。</span><br><span class="hljs-comment">        要求：展示一个3行4列的表格</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表格标签：&lt;table&gt;</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">                border：边框线，单位是px像素</span><br><span class="hljs-comment">                width：表格的宽度</span><br><span class="hljs-comment">                cellspacing：单元格和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">                cellpadding：数据和单元格之间的间距  一般固定0</span><br><span class="hljs-comment">        子标签：</span><br><span class="hljs-comment">            tr：表示行</span><br><span class="hljs-comment">            td：表示列</span><br><span class="hljs-comment">            th：列。（表示表头，th中的内容会自动居中，并加粗）</span><br><span class="hljs-comment">            caption：表格的标题</span><br><span class="hljs-comment">            thead：语义化标签，本身没有含义，可以将代码从逻辑上分成不同的部分</span><br><span class="hljs-comment">            tbody：语义化标签，本身没有含义，可以将代码从逻辑上分成不同的部分</span><br><span class="hljs-comment">            tfoot：语义化标签，本身没有含义，可以将代码从逻辑上分成不同的部分</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            table表格中必须要先写tr行，写完tr行之后再写td列</span><br><span class="hljs-comment">            表格中最常用的三个标签是：table，tr，td。其他子标签作为了解。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>这是一个表格<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>描述<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--第一行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--第二行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--第三行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="10-实体字符"><a href="#10-实体字符" class="headerlink" title="10-实体字符"></a>10-实体字符</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>15-实体字符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">HTML中有两种特殊的转义字符</span><br><span class="hljs-comment">    1. 与html语法有冲突  &amp;lt;表示小于号 例如:  a &lt; b &gt; c</span><br><span class="hljs-comment">    2.输入法输入不方便  例如 ♥ &amp;hearts;</span><br><span class="hljs-comment">常用的实体字符</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">半个英文字母英文空格&amp;nbsp;</span><br><span class="hljs-comment">一个汉字中文空格&amp;emsp;</span><br><span class="hljs-comment">小于号&amp;lt;</span><br><span class="hljs-comment">大于号&amp;gt;</span><br><span class="hljs-comment">&amp;符号&amp;amp;</span><br><span class="hljs-comment">×叉号&amp;times;</span><br><span class="hljs-comment">￥人民币符号&amp;yen;</span><br><span class="hljs-comment">美元符号$</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br>半个英文字母英文空格<span class="hljs-symbol">&amp;nbsp;</span><br>一个汉字中文空格<span class="hljs-symbol">&amp;emsp;</span><br>小于号<span class="hljs-symbol">&amp;lt;</span><br>大于号<span class="hljs-symbol">&amp;gt;</span><br>&amp;符号<span class="hljs-symbol">&amp;amp;</span><br>×叉号<span class="hljs-symbol">&amp;times;</span><br>￥人民币符号<span class="hljs-symbol">&amp;yen;</span><br>美元符号$<br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>you see see you,one day day de.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>you see see you,one day day de.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;emsp;</span><span class="hljs-symbol">&amp;emsp;</span>你看看你,一天天的.你看看你,一天天的.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>你看看你,一天天的.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>15-实体字符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">HTML中有两种特殊的转义字符</span><br><span class="hljs-comment">    1. 与html语法有冲突  &amp;lt;表示小于号 例如:  a &lt; b &gt; c</span><br><span class="hljs-comment">    2.输入法输入不方便  例如 ♥ &amp;hearts;</span><br><span class="hljs-comment">常用的实体字符</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">半个英文字母英文空格&amp;nbsp;</span><br><span class="hljs-comment">一个汉字中文空格&amp;emsp;</span><br><span class="hljs-comment">小于号&amp;lt;</span><br><span class="hljs-comment">大于号&amp;gt;</span><br><span class="hljs-comment">&amp;符号&amp;amp;</span><br><span class="hljs-comment">×叉号&amp;times;</span><br><span class="hljs-comment">￥人民币符号&amp;yen;</span><br><span class="hljs-comment">美元符号$</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br>半个英文字母英文空格<span class="hljs-symbol">&amp;nbsp;</span><br>一个汉字中文空格<span class="hljs-symbol">&amp;emsp;</span><br>小于号<span class="hljs-symbol">&amp;lt;</span><br>大于号<span class="hljs-symbol">&amp;gt;</span><br>&amp;符号<span class="hljs-symbol">&amp;amp;</span><br>×叉号<span class="hljs-symbol">&amp;times;</span><br>￥人民币符号<span class="hljs-symbol">&amp;yen;</span><br>美元符号$<br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>you see see you,one day day de.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>you see see you,one day day de.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;emsp;</span><span class="hljs-symbol">&amp;emsp;</span>你看看你,一天天的.你看看你,一天天的.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>你看看你,一天天的.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="11-合并单元格"><a href="#11-合并单元格" class="headerlink" title="11-合并单元格"></a>11-合并单元格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        如果要合并单元格，可以使用下面的两个属性进行操作</span><br><span class="hljs-comment">            rowspan：合并行</span><br><span class="hljs-comment">            colspan：合并列</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        上面两个属性的值是要合并单元格的属性，如果要合并两个单元格，那么直就是2.</span><br><span class="hljs-comment">        如果想合并单元格，那么就找到要合并的前一个单元格，在该单元格中写上rowspan或colspan即可。</span><br><span class="hljs-comment">        合并单元格之后多出来的内容需要删除</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将第一行第一列，和第一行第二列的单元格进行合并--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;500&quot;&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash;第一行&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;tr&gt;</span><br><span class="hljs-comment">            &lt;td colspan=&quot;2&quot;&gt;你好1&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;我好1&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;大家好1&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;/tr&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash;第二行&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;tr&gt;</span><br><span class="hljs-comment">            &lt;td&gt;你好2&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;我好2&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;大家好2&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;哈哈哈2&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;/tr&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash;第三行&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;tr&gt;</span><br><span class="hljs-comment">            &lt;td&gt;你好3&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;我好3&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;大家好3&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;哈哈哈3&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;/tr&gt;</span><br><span class="hljs-comment">    &lt;/table&gt;</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--将第二行第三列和第三行第三列进行合并--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第二行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>大家好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第三行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        如果要合并单元格，可以使用下面的两个属性进行操作</span><br><span class="hljs-comment">            rowspan：合并行</span><br><span class="hljs-comment">            colspan：合并列</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        上面两个属性的值是要合并单元格的属性，如果要合并两个单元格，那么直就是2.</span><br><span class="hljs-comment">        如果想合并单元格，那么就找到要合并的前一个单元格，在该单元格中写上rowspan或colspan即可。</span><br><span class="hljs-comment">        合并单元格之后多出来的内容需要删除</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将第一行第一列，和第一行第二列的单元格进行合并--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;500&quot;&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash;第一行&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;tr&gt;</span><br><span class="hljs-comment">            &lt;td colspan=&quot;2&quot;&gt;你好1&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;我好1&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;大家好1&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;/tr&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash;第二行&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;tr&gt;</span><br><span class="hljs-comment">            &lt;td&gt;你好2&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;我好2&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;大家好2&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;哈哈哈2&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;/tr&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash;第三行&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;tr&gt;</span><br><span class="hljs-comment">            &lt;td&gt;你好3&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;我好3&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;大家好3&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;td&gt;哈哈哈3&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;/tr&gt;</span><br><span class="hljs-comment">    &lt;/table&gt;</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--将第二行第三列和第三行第三列进行合并--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第二行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>大家好2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>哈哈哈2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第三行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>你好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>大家好3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第九章、TCP/UDP</title>
    <link href="/post/000c0e31-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000c0e31-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、网络编程基础"><a href="#一、网络编程基础" class="headerlink" title="一、网络编程基础"></a><strong>一、网络编程基础</strong></h2><p><strong>1.1.网络通信协议</strong></p><p>计算机之间通过特定的规则进行连接和通信，对数据进行传输格式、传输速率、传输步骤进行统一管理规定，通信双方必须同时遵守的规则才能进行数据交互。这些规则便是协议。</p><p>网络通信协议有很多种，最下饭的是TCP/IP协议（传输控制协议/英特网互联协议）、UDP协议（用户数据报协议）等等。为减少其网络复杂性，大多数网络采用分层设计法（按照信息流动过程将网络的整体功能分解为不同的功能层，同等功能层采用相同协议，相邻功能层通过接口进行信息传递。）</p><p><img src="https://pic1.zhimg.com/v2-ead52b52d9aac27c6dd27af9fd1b92b8_b.jpg" alt="img"></p><blockquote><p>(1)<strong>链路层</strong>：又称网络接口层，用于定义物理传输通道，通常用于网络连接设备的驱动协议。比如：光纤、双绞线等提供的驱动。<br>(2)<strong>网络层</strong>：主要用于将传输的数据进行分组，将分组的数据发送到目标计算机或网络。<br>(3)<strong>运输层</strong>：主要用于网络程序进行通信，在进行网络通信可使用TCP协议或UDP协议。<br>(4)<strong>应用层</strong>：为各种网络应用提供服务。</p></blockquote><p><strong>1.2.软件架构分类</strong></p><blockquote><p>C/S : Client(客户端) Server(服务器端)<br>B/S : Browser(浏览器) Server(服务器端)</p></blockquote><p><strong>1.3.常用的通信协议</strong></p><blockquote><p><strong>IP协议</strong>：规定计算机ip地址值<br><strong>TCP协议</strong>：有链接（要通过“三次握手”进行连接），数据安全，数据完整，性能低。<br><strong>UDP协议</strong>：没有链接，数据不安全，数据不一定完整，性能高。</p></blockquote><p><strong>1.4.三要素</strong></p><p>1.网络通信协议。</p><p>2.IP地址：计算机唯一标识。</p><blockquote><p><a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/IPv4/422599?fr=aladdin">IPv4</a>：由32位组成。 <a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/IPv6">IPv6</a>: 由128位组成。<br><strong>ipconfig</strong>(查看本机ip地址) 、 <strong>ping</strong> （是用于测试网络连接状态）</p></blockquote><p>3.端口号：计算机种应用程序的标识。</p><blockquote><p>计算机中有0~65535个端口号，软件只使用1024以上的端口号。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-2c6a48e3131ab7bf7ddf7060e4b72d6b_b.gif" alt="img"></p><h2 id="二、TCP通信"><a href="#二、TCP通信" class="headerlink" title="二、TCP通信"></a><strong>二、TCP通信</strong></h2><p>TCP是Transmission Control Protocol 即传输控制协议。TCP协议是面向连接的通信协议，即传输数据前先在发送端与接收端建立逻辑连接，才能进行数据传输。</p><p>所以就有了“三次握手”：</p><blockquote><p>第一次握手：客户端向服务端发送出连接请求，等待服务端确认。<br>第二次握手：服务端就得响应客户端，通知客户端“我”接收到请求。<br>第三次握手：客户端再次向服务端发送确认信息进行连接。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-de330ad64f89141c271d99a7426f4312_b.jpg" alt="img"></p><blockquote><p>由于TCP协议的面向连接特性，保证数据传输的安全性和完整性，多用于文件下载。</p></blockquote><p>TCP通信分为客户端和服务端其代表类：客户端（Socket）、服务端（ServerSocket）。</p><p><strong>TCP服务端</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPServer</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws IOException </span>&#123;<br><span class="hljs-comment">//        服务器步骤:</span><br><span class="hljs-comment">//        1.创建服务器对象</span><br>        ServerSocket server = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ServerSocket</span>(<span class="hljs-number">6666</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;服务器启动成功...&quot;</span>);<br><br><span class="hljs-comment">//        2.接收客户端的连接,得到连接到服务器的那个客户端对象</span><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;等待客户端连接..&quot;</span>);<br>        <span class="hljs-comment">//accept方法具有阻塞功能</span><br>        Socket client = server.<span class="hljs-built_in">accept</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;有客户端连接了:&quot;</span>+client.<span class="hljs-built_in">getInetAddress</span>().<span class="hljs-built_in">getHostAddress</span>());<br><span class="hljs-comment">//        3.获取通道中的输入流</span><br>        InputStream in = client.<span class="hljs-built_in">getInputStream</span>();<br><br><span class="hljs-comment">//        4.调用输入流的read方法,读取客户端发送来的数据</span><br>        <span class="hljs-keyword">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = in.<span class="hljs-built_in">read</span>(bs);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;客户端说:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(bs, <span class="hljs-number">0</span>, len));<br><br><span class="hljs-comment">//        5.释放资源</span><br>        in.<span class="hljs-built_in">close</span>();<br>        client.<span class="hljs-built_in">close</span>();<br>        server.<span class="hljs-built_in">close</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string"><code class="language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPServer</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws IOException </span>&#123;<br><span class="hljs-comment">//        服务器步骤:</span><br><span class="hljs-comment">//        1.创建服务器对象</span><br>        ServerSocket server = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ServerSocket</span>(<span class="hljs-number">6666</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;服务器启动成功...&quot;</span>);<br><br><span class="hljs-comment">//        2.接收客户端的连接,得到连接到服务器的那个客户端对象</span><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;等待客户端连接..&quot;</span>);<br>        <span class="hljs-comment">//accept方法具有阻塞功能</span><br>        Socket client = server.<span class="hljs-built_in">accept</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;有客户端连接了:&quot;</span>+client.<span class="hljs-built_in">getInetAddress</span>().<span class="hljs-built_in">getHostAddress</span>());<br><span class="hljs-comment">//        3.获取通道中的输入流</span><br>        InputStream in = client.<span class="hljs-built_in">getInputStream</span>();<br><br><span class="hljs-comment">//        4.调用输入流的read方法,读取客户端发送来的数据</span><br>        <span class="hljs-keyword">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = in.<span class="hljs-built_in">read</span>(bs);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;客户端说:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(bs, <span class="hljs-number">0</span>, len));<br><br><span class="hljs-comment">//        5.释放资源</span><br>        in.<span class="hljs-built_in">close</span>();<br>        client.<span class="hljs-built_in">close</span>();<br>        server.<span class="hljs-built_in">close</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"服务器成功关闭..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TCP客户端</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPClient</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws IOException </span>&#123;<br><span class="hljs-comment">//        客户端步骤:</span><br><span class="hljs-comment">//        1.创建客户端对象</span><br>        Socket client = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">888</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;成功连接上服务器了...&quot;</span>);<br><span class="hljs-comment">//        2.获取通道的输出流</span><br>        OutputStream out = client.<span class="hljs-built_in">getOutputStream</span>();<br><span class="hljs-comment">//        3.调用输出流的writer方法,给服务器发数据</span><br>        out.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;你好,TCP&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;给服务器发送数完毕...&quot;</span>);<br><span class="hljs-comment">//        4.释放资源</span><br>        out.<span class="hljs-built_in">close</span>();<br>        client.<span class="hljs-built_in">close</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string"><code class="language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPClient</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws IOException </span>&#123;<br><span class="hljs-comment">//        客户端步骤:</span><br><span class="hljs-comment">//        1.创建客户端对象</span><br>        Socket client = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">888</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;成功连接上服务器了...&quot;</span>);<br><span class="hljs-comment">//        2.获取通道的输出流</span><br>        OutputStream out = client.<span class="hljs-built_in">getOutputStream</span>();<br><span class="hljs-comment">//        3.调用输出流的writer方法,给服务器发数据</span><br>        out.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;你好,TCP&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;给服务器发送数完毕...&quot;</span>);<br><span class="hljs-comment">//        4.释放资源</span><br>        out.<span class="hljs-built_in">close</span>();<br>        client.<span class="hljs-built_in">close</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"客户端成功关闭..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-a1d7dce7c91bb39301b7bf170bb07cd6_b.gif" alt="img"></p><h2 id="三、UDP通信"><a href="#三、UDP通信" class="headerlink" title="三、UDP通信"></a><strong>三、UDP通信</strong></h2><p>UDP是面向无连接的协议，在通信时客户端与服务端不用建立连接。UDP通过“集装箱”去打包数据进行传输，为此JDK提供DatagramPacket类来作为这个集装箱，将要发送接收的数据封装其中。再通过DatagramSocket类来安放集装箱。</p><p><img src="https://pic3.zhimg.com/v2-2fc9f483cd5e659a040a47aba1cd6f66_b.jpg" alt="img"></p><p><strong>3.1.DatagramPacket</strong></p><blockquote><p>DatagramPacket用于封装UDP通信的数据，服务端要接收一个字节数组来存放收到的数据，客户端则存放该字节数组和指定客户端的IP地址和端口号。</p></blockquote><p><strong>DatagramPacket构造方法</strong></p><table><thead><tr><th>构造方法</th><th>描述</th></tr></thead><tbody><tr><td>DatagramPacket(byte[ ] buf, int length)</td><td>创建一个DatagramPacket对象指定其字节大小和数据大小。作用于接收端。</td></tr><tr><td>DatagramPacket(byte[ ] buf, int offset ,int length )</td><td>创建一个DatagramPacket对象指定其字节大小和数据大小，并指定offset开始索引位置。作用于接收端。</td></tr><tr><td>DatagramPacket(byte[ ]buf,int length,InetAddress addr ,int port )</td><td>创建一个DatagramPacket对象指定其字节大小和数据大小，并指定数据包的IP地址、端口号。作用于发送端。</td></tr><tr><td>DatagramPacket(byte[ ] buf ,int offset,int length ,InetAddress addr ,int port)</td><td>创建一个DatagramPacket对象指定其字节大小和数据大小，并指定数据包的IP地址、端口号，并指定offset开始索引位置。作用于发送端。</td></tr></tbody></table><p><strong>DatagramPacket常用方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>InetAddress getAddress()</td><td>返回IP地址</td></tr><tr><td>int getPort()</td><td>返回端口号</td></tr><tr><td>byte[ ] getData()</td><td>返回数据包中的数据</td></tr><tr><td>int getLength()</td><td>返回数据长度</td></tr></tbody></table><p><strong>3.2.DatagramSocket</strong></p><blockquote><p>DatagramSocket用于创建发送端和接收端对象。</p></blockquote><p><strong>DatagramSocket构造方法</strong></p><table><thead><tr><th>构造方法</th><th>描述</th></tr></thead><tbody><tr><td>DatagramSocket()</td><td>创建发送端DatagramSocket对象</td></tr><tr><td>DatagramSocket(int port)</td><td>创建接收端DatagramSocket对象，指定端口</td></tr><tr><td>DatagramSocket(int port,InetAddress addr)</td><td>创建接收端DatagramSocket对象，指定端口号和IP地址</td></tr></tbody></table><p><strong>DatagramSocket常用方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>receive(DatagramPacket p)</td><td>接收DatagramPacket对象</td></tr><tr><td>send(DatagramPacket p)</td><td>发送DatagramPacket对象</td></tr><tr><td>close()</td><td>关闭DatagramSocket对象，释放资源</td></tr></tbody></table><p><strong>接收端</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author 买盐</span><br><span class="hljs-comment"> * @date 2021年07月01日 9:41</span><br><span class="hljs-comment"> *   UDP接收端</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> UDPReceiver &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws IOException &#123;<br>        <span class="hljs-comment">//1.创建端口号为8900的接收端</span><br>        DatagramSocket socket = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket(9800)</span>;<br>        <span class="hljs-comment">//2.指定接收长度为1024的字节数组，用于接收数据</span><br>        byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>        <span class="hljs-comment">//3.定义一个&quot;DatagramPacket&quot;集装箱,用于封装接收数据</span><br>        DatagramPacket packet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">bytes</span>, <span class="hljs-params">bytes</span>.<span class="hljs-params">length</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;等待数据.....&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//等待接收数据，在每接收到数据前处于等待状态</span><br>            <span class="hljs-comment">//接收端接收集装箱</span><br>            socket.receive(packet);<br>            <span class="hljs-comment">//调用DatagramPacket的方法接收数据，并转换为字符串形式</span><br>            <span class="hljs-comment">//参数1： 拿取集装箱里数据、参数2:从头开始  、参数3：要获取的长度</span><br>            String s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">packet</span>.<span class="hljs-params">getData</span>()</span>, <span class="hljs-number">0</span>, packet.get<span class="hljs-constructor">Length()</span>);<br><br>            <span class="hljs-comment">//</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(packet.get<span class="hljs-constructor">Address()</span>+<span class="hljs-string">&quot;:&quot;</span>+packet.get<span class="hljs-constructor">Port()</span>+<span class="hljs-string"><code class="language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author 买盐</span><br><span class="hljs-comment"> * @date 2021年07月01日 9:41</span><br><span class="hljs-comment"> *   UDP接收端</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> UDPReceiver &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws IOException &#123;<br>        <span class="hljs-comment">//1.创建端口号为8900的接收端</span><br>        DatagramSocket socket = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket(9800)</span>;<br>        <span class="hljs-comment">//2.指定接收长度为1024的字节数组，用于接收数据</span><br>        byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>        <span class="hljs-comment">//3.定义一个&quot;DatagramPacket&quot;集装箱,用于封装接收数据</span><br>        DatagramPacket packet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">bytes</span>, <span class="hljs-params">bytes</span>.<span class="hljs-params">length</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;等待数据.....&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//等待接收数据，在每接收到数据前处于等待状态</span><br>            <span class="hljs-comment">//接收端接收集装箱</span><br>            socket.receive(packet);<br>            <span class="hljs-comment">//调用DatagramPacket的方法接收数据，并转换为字符串形式</span><br>            <span class="hljs-comment">//参数1： 拿取集装箱里数据、参数2:从头开始  、参数3：要获取的长度</span><br>            String s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">packet</span>.<span class="hljs-params">getData</span>()</span>, <span class="hljs-number">0</span>, packet.get<span class="hljs-constructor">Length()</span>);<br><br>            <span class="hljs-comment">//</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(packet.get<span class="hljs-constructor">Address()</span>+<span class="hljs-string">&quot;:&quot;</span>+packet.get<span class="hljs-constructor">Port()</span>+<span class="hljs-string">"接收到消息："</span>+s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发送端</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author 买盐</span><br><span class="hljs-comment"> * @date 2021年07月01日 10:00</span><br><span class="hljs-comment"> * UDP发送端</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> UDPSend &#123;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) throws IOException &#123;<br>        <span class="hljs-comment">//1.创建一个指定端口9801的发送端I</span><br>        DatagramSocket send = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket(9801)</span>;<br>        <span class="hljs-comment">//2.定义要发送的数据</span><br>        String s = <span class="hljs-string">&quot;UDP,HELL0&quot;</span>;<br>        <span class="hljs-comment">//3.定义一个集装箱 。 参数1：要发送的数据 、 参数2： 数据长度 、 参数3：地址名  、参数4：接收端端口</span><br>        DatagramPacket packet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">s</span>.<span class="hljs-params">getBytes</span>()</span>,<br>                              s.get<span class="hljs-constructor">Bytes()</span>.length,<br>                              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;localhost&quot;</span>)</span>,<br>                              <span class="hljs-number">9800</span>);<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;开始发送信息中....&quot;</span>);<br>        <span class="hljs-comment">//4.发送集装箱</span><br>        send.send(packet);<br>        <span class="hljs-comment">//5.关闭资源</span><br>        send.close<span class="hljs-literal"><code class="language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author 买盐</span><br><span class="hljs-comment"> * @date 2021年07月01日 10:00</span><br><span class="hljs-comment"> * UDP发送端</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> UDPSend &#123;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) throws IOException &#123;<br>        <span class="hljs-comment">//1.创建一个指定端口9801的发送端I</span><br>        DatagramSocket send = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket(9801)</span>;<br>        <span class="hljs-comment">//2.定义要发送的数据</span><br>        String s = <span class="hljs-string">&quot;UDP,HELL0&quot;</span>;<br>        <span class="hljs-comment">//3.定义一个集装箱 。 参数1：要发送的数据 、 参数2： 数据长度 、 参数3：地址名  、参数4：接收端端口</span><br>        DatagramPacket packet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">s</span>.<span class="hljs-params">getBytes</span>()</span>,<br>                              s.get<span class="hljs-constructor">Bytes()</span>.length,<br>                              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;localhost&quot;</span>)</span>,<br>                              <span class="hljs-number">9800</span>);<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;开始发送信息中....&quot;</span>);<br>        <span class="hljs-comment">//4.发送集装箱</span><br>        send.send(packet);<br>        <span class="hljs-comment">//5.关闭资源</span><br>        send.close<span class="hljs-literal">()</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果端口号被占用，可用”netstat -anb” 命令来查看当前端口占用情况。</p><p><img src="https://pic2.zhimg.com/v2-5b164717409490488a541e3160c7a1d1_b.gif" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第八章、多线程</title>
    <link href="/post/000c0e33-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000c0e33-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、了解线程"><a href="#一、了解线程" class="headerlink" title="一、了解线程"></a><strong>一、了解线程</strong></h2><p><strong>1.1.进程</strong></p><p>在了解线程之前我们要知道<strong>进程</strong>是什么？这个就很容易解释，就像我们玩手机一样，开一个软件，就相当于一个进程（<strong>“正在进行的程序”</strong>）。</p><blockquote><p>那么在多任务操作系统中，看着好多进程一起执行，但实际上这些<strong>进程并不是同一个时刻运行</strong>的。因为进程是由CPU执行，我CPU就一个怎么同时干活？当然是一个时间点只能运行一个程序。只不过每一个进程都能给到CPU一段极短的使用时间，（CPU大意了，我有闪）在执行该进程会快速去执行下一个进程。CPU运行速度快的一比，就可以在不同的进程之间来回切换，给予人错觉会认为是同一时刻执行多进程。</p></blockquote><p><strong>1.2.线程</strong></p><p>我们知道了进程，那线程是什么？这一也容易解释，手机开了微信软件，再在微信里我开知乎小程序、开个B站小程序等等，这时这一个小程序就是一个线程。由此而知，进程和线程的关系。<strong>一个进程至少有一个线程</strong>。</p><ul><li><strong>线程调度分类:</strong></li></ul><blockquote><p>分时调度: 每个线程<strong>平均</strong>获得CPU的执行时间。<br>抢占式调度:每个线程<strong>随机</strong>获得CPU的执行时间。<br>**注意:**Java程序采用抢占式调度。</p></blockquote><ul><li><strong>内存线程分配情况：</strong></li></ul><blockquote><p>同一个进程中的多个线程,每个线程拥有独立栈(从进程的栈中分配)<br>所有线程共享堆(进程的堆)</p></blockquote><p><img src="https://pic1.zhimg.com/v2-2a87aa675f0ffa574899147e6f94187c_b.gif" alt="img"></p><h2 id="二、创建线程"><a href="#二、创建线程" class="headerlink" title="二、创建线程"></a><strong>二、创建线程</strong></h2><p><strong>2.1通过三种方式来实现多线程：</strong></p><blockquote><p>方式一： 继承Thread类，重写run()方法。<br>方式二：实现Runnable接口，重写run方法。<br>方式三：实现Callable接口，重写call方法。<br><strong>注意：</strong>程序开始-&gt;main线程开启-&gt;线程.start()-&gt;开启其他线程的同时main线程也在执行-&gt;直到都执行完成结束程序。</p></blockquote><ul><li><strong>Thread类实现多线程</strong></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewThread</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;</span><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">1000</span> ; i++) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;run线程正在执行！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        NewThread newThread = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NewThread</span>();<br>        newThread.<span class="hljs-built_in">start</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000</span>; i++) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string"><code class="language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewThread</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;</span><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">1000</span> ; i++) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;run线程正在执行！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        NewThread newThread = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NewThread</span>();<br>        newThread.<span class="hljs-built_in">start</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000</span>; i++) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"主线程正在执行"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>Runnable接口实现多线程</strong></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewThread02</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Runnable</span></span> </span>&#123;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> void run() &#123;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">1000</span> ; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;run线程正在执行！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>       <span class="hljs-comment">//创建Runnable实现类对象</span><br>        NewThread02 <span class="hljs-keyword">new</span><span class="hljs-type">Thread02</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">NewThread02</span>();<br>       <span class="hljs-comment">//讲对象放入线程执行</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(<span class="hljs-keyword">new</span><span class="hljs-type">Thread02</span>).start();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string"><code class="language-hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewThread02</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Runnable</span></span> </span>&#123;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> void run() &#123;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">1000</span> ; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;run线程正在执行！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>       <span class="hljs-comment">//创建Runnable实现类对象</span><br>        NewThread02 <span class="hljs-keyword">new</span><span class="hljs-type">Thread02</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">NewThread02</span>();<br>       <span class="hljs-comment">//讲对象放入线程执行</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(<span class="hljs-keyword">new</span><span class="hljs-type">Thread02</span>).start();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">"实现Runnable的对象线程执行中！"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>使用匿名内部类创建线程</strong></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">public <span class="hljs-keyword">class</span> NiMThreadDemo &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-comment">//1.使用继承方式</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread()</span>&#123;<br>            @Override<br>            public void run<span class="hljs-literal">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;...&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;.start<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-comment">//2.使用实现方式</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">new</span> Runnable()</span>&#123;<br>            @Override<br>            public void run<span class="hljs-literal">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;...&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;).start<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string"><code class="language-hljs reasonml">public <span class="hljs-keyword">class</span> NiMThreadDemo &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-comment">//1.使用继承方式</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread()</span>&#123;<br>            @Override<br>            public void run<span class="hljs-literal">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;...&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;.start<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-comment">//2.使用实现方式</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">new</span> Runnable()</span>&#123;<br>            @Override<br>            public void run<span class="hljs-literal">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;...&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;).start<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">"..."</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>Callable接口实现多线程</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        CallableThread callableThread = <span class="hljs-keyword">new</span> CallableThread();<br>        <span class="hljs-comment">//通过创建FutureTask来执行给定的Callable</span><br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask(callableThread);<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(futureTask);<br>        t1.start();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//get()方法的返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span><br>            Object sum = futureTask.get();<br>            System.out.println(sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现Callable接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span></span>&#123;<br>    <span class="hljs-comment">//重写接口call()方法，即线程执行内容</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        CallableThread callableThread = <span class="hljs-keyword">new</span> CallableThread();<br>        <span class="hljs-comment">//通过创建FutureTask来执行给定的Callable</span><br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask(callableThread);<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(futureTask);<br>        t1.start();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//get()方法的返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span><br>            Object sum = futureTask.get();<br>            System.out.println(sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现Callable接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span></span>&#123;<br>    <span class="hljs-comment">//重写接口call()方法，即线程执行内容</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>创建线程的三种方式优缺点：</strong></li></ul><blockquote><p>1.被Thread类继承的线程类无法去继承其他父类。<br>2.实现Runnable接口与实现Callable接口的方式基本相同，只是Callable接口里定义的方法<strong>有返回值</strong>，可以<strong>声明抛出异常</strong>。 一般推荐采用实现Runnable接口、Callable接口的方式来创建多线程。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-55e914eb9382a2bb00719c705e10e1b3_b.gif" alt="img"></p><h2 id="三、线程的生命周期"><a href="#三、线程的生命周期" class="headerlink" title="三、线程的生命周期"></a><strong>三、线程的生命周期</strong></h2><p><strong>3.1.线程的六种状态</strong></p><p><strong>a.新建状态(New)</strong></p><blockquote><p>刚刚创建的线程,并没有调用start方法。</p></blockquote><p><strong>b.可运行状态(Runnable)</strong></p><blockquote><p>新建状态的线程,调用了start方法之后。</p></blockquote><p><strong>c.锁阻塞状态(Blocked)</strong></p><blockquote><p>当线程执行时需要锁对象,但是锁对象被其他线程持有。</p></blockquote><p><strong>d.限时等待状态(Timed_waiting)</strong></p><blockquote><p>在线程中调用Thread.sleep(毫秒值)方法之后。</p></blockquote><p><strong>e.无限等待状态(Waiting)</strong></p><blockquote><p><strong>1.线程如何进入Waiting(无线等待状态)</strong><br>a.当前线程必须先持有锁对象。<br>b.调用锁对象的<strong>wait</strong>()方法。<br>c.当前线程进入无限等待之前,会<strong>自动释放锁</strong>对象。<br><strong>2.其他线程如何唤醒Waiting状态的线程</strong><br>a.其他线程必须持有锁对象(必须是无限等待线程释放的那个锁对象)。<br>b.调用锁对象的<strong>notify</strong>()方法。<br>c.无限等待线程醒来后,并不能立刻进入可运行状态,先进入锁阻塞状态，直到再<strong>次持有锁</strong>对象,才能进入可运行状态。</p></blockquote><p><strong>f.消亡状态(Terminated)</strong></p><blockquote><p>当线程的任务执行完毕之后,处于这种状态的线程不能调用start方法起死回生。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-9351a21894a947c6edc0f0902f64ed0e_b.jpg" alt="img"></p><h2 id="四、线程调度"><a href="#四、线程调度" class="headerlink" title="四、线程调度"></a><strong>四、线程调度</strong></h2><p><strong>线程调度：</strong>是指JVM会按特定的机制给每个线程分配CPU的使用。</p><p>线程调度分为2种模型：</p><blockquote><p>1.分时调度模型 ：线程轮流获取CPU的使用，平均分配每个线程占用的CPU时间片。<br>2.抢占调度模型：使线程处于就绪状态去争抢CPU的使用，优先级高则对CPU使用概率大。</p></blockquote><p>JVM就是默认抢占式调度模型</p><p><strong>4.1.线程优先级</strong></p><blockquote><p>线程优先级用1~10来表示，数字越大优先级越高。<br>Thread类还提供了三个静态常量来表示线程优先级。</p></blockquote><table><thead><tr><th>静态变量</th><th>描述</th></tr></thead><tbody><tr><td>static int MAX_PRIORITY</td><td>最高优先级，10</td></tr><tr><td>static int MIN_PRIORITY</td><td>最低优先级，1</td></tr><tr><td>static int NORM_PRIORITY</td><td>普通优先级，5</td></tr></tbody></table><p>可通过Thread类的setPriority(int newPriority)方法进行设置</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> @Test<br>public void test01<span class="hljs-literal">()</span>&#123;<br>    <span class="hljs-comment">//创建2个Thread线程</span><br>    Thread thread01 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;优先级高：&quot;</span> + i);<br>        &#125;<br>    &#125;);<br><br><br>    Thread thread02 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;优先级低：&quot;</span> + j);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">//设置线程优先级</span><br>    thread01.set<span class="hljs-constructor">Priority(10)</span>; <span class="hljs-comment">//最高</span><br>    thread02.set<span class="hljs-constructor">Priority(Thread.MIN_PRIORITY)</span>; <span class="hljs-comment">//最低</span><br><br>    <span class="hljs-comment">//启动线程</span><br>    thread01.start<span class="hljs-literal">()</span>;<br>    thread02.start<span class="hljs-literal"><code class="language-hljs reasonml"> @Test<br>public void test01<span class="hljs-literal">()</span>&#123;<br>    <span class="hljs-comment">//创建2个Thread线程</span><br>    Thread thread01 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;优先级高：&quot;</span> + i);<br>        &#125;<br>    &#125;);<br><br><br>    Thread thread02 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;优先级低：&quot;</span> + j);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">//设置线程优先级</span><br>    thread01.set<span class="hljs-constructor">Priority(10)</span>; <span class="hljs-comment">//最高</span><br>    thread02.set<span class="hljs-constructor">Priority(Thread.MIN_PRIORITY)</span>; <span class="hljs-comment">//最低</span><br><br>    <span class="hljs-comment">//启动线程</span><br>    thread01.start<span class="hljs-literal">()</span>;<br>    thread02.start<span class="hljs-literal">()</span>;<brbr></code></pre></td></tr></table></figure><blockquote><p>结果：全部先执行优先级高，再执行优先级低的线程。</p></blockquote><p><strong>4.2.线程休眠（sleep（long millis））</strong></p><blockquote><p>该方法让当前正在执行的线程暂停，进入休眠状态，让其他线程获取的执行机会。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">     <span class="hljs-comment">//创建2个Thread线程</span><br>    Thread thread01 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;：&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;休眠&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br><br><br>    Thread thread02 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;：&quot;</span> + j);<br>        &#125;<br>    &#125;);<br>    <br>    <span class="hljs-comment">//启动线程</span><br>    thread01.start<span class="hljs-literal">()</span>;<br>    thread02.start<span class="hljs-literal"><code class="language-hljs reasonml">     <span class="hljs-comment">//创建2个Thread线程</span><br>    Thread thread01 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;：&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;休眠&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br><br><br>    Thread thread02 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;：&quot;</span> + j);<br>        &#125;<br>    &#125;);<br>    <br>    <span class="hljs-comment">//启动线程</span><br>    thread01.start<span class="hljs-literal">()</span>;<br>    thread02.start<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>结果：先从1执行马上就进入休眠状态，后续都是线程2在执行。当休眠时间到，线程1就可以再度抢占了。</p></blockquote><p><strong>4.3.线程让步（yield（））</strong></p><blockquote><p>该方法类似让当前线程暂停，区别是该方法不会阻塞线程，将线程状态换为就绪。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YieldThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>       <span class="hljs-comment">//构造器</span><br>       public <span class="hljs-type">YieldThread</span> (<span class="hljs-type">String</span> name)&#123;<br>           <span class="hljs-keyword">super</span>(name);<br>       &#125;<br><br><br>       public void run() &#123;<br>           <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>               <span class="hljs-type">System</span>.out.println(<span class="hljs-type">Thread</span>.currentThread().getName()+<span class="hljs-string">&quot;=====&quot;</span>+i);<br>               <span class="hljs-keyword">if</span> (i==<span class="hljs-number">2</span>)&#123;<br>                   <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;线程让步&quot;</span>);<br>                   <span class="hljs-type">Thread</span>.<span class="hljs-keyword">yield</span>();<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 4.3.线程让步（yield（））</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   public void test03()&#123;<br><br>       <span class="hljs-type">YieldThread</span> thread01 = <span class="hljs-keyword">new</span> <span class="hljs-type">YieldThread</span>(<span class="hljs-string">&quot;线程1&quot;</span>);<br>       <span class="hljs-type">YieldThread</span> thread02 = <span class="hljs-keyword">new</span> <span class="hljs-type">YieldThread</span>(<span class="hljs-string"><code class="language-hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YieldThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>       <span class="hljs-comment">//构造器</span><br>       public <span class="hljs-type">YieldThread</span> (<span class="hljs-type">String</span> name)&#123;<br>           <span class="hljs-keyword">super</span>(name);<br>       &#125;<br><br><br>       public void run() &#123;<br>           <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>               <span class="hljs-type">System</span>.out.println(<span class="hljs-type">Thread</span>.currentThread().getName()+<span class="hljs-string">&quot;=====&quot;</span>+i);<br>               <span class="hljs-keyword">if</span> (i==<span class="hljs-number">2</span>)&#123;<br>                   <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;线程让步&quot;</span>);<br>                   <span class="hljs-type">Thread</span>.<span class="hljs-keyword">yield</span>();<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 4.3.线程让步（yield（））</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   public void test03()&#123;<br><br>       <span class="hljs-type">YieldThread</span> thread01 = <span class="hljs-keyword">new</span> <span class="hljs-type">YieldThread</span>(<span class="hljs-string">&quot;线程1&quot;</span>);<br>       <span class="hljs-type">YieldThread</span> thread02 = <span class="hljs-keyword">new</span> <span class="hljs-type">YieldThread</span>(<span class="hljs-string">"线程2"</span>);<br>       thread01.start();<br>       thread02.start();<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>4.4.线程插队（join）</strong></p><blockquote><p>join合并线程，强制先执行，再执行其他线程（其他线程阻塞（等待））</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;有join的VIP线程！&quot;</span>+i);<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-comment">//测试方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">//启动NewThread线程</span><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> NewThread());<br>        thread.start();<br><br>       <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">350</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">150</span>)&#123;<br>                <span class="hljs-comment">//让NewThreadJoin线程插队主线程</span><br>                thread.join();<br>            &#125;<br>            System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;有join的VIP线程！&quot;</span>+i);<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-comment">//测试方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">//启动NewThread线程</span><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> NewThread());<br>        thread.start();<br><br>       <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">350</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">150</span>)&#123;<br>                <span class="hljs-comment">//让NewThreadJoin线程插队主线程</span><br>                thread.join();<br>            &#125;<br>            System.out.println(<span class="hljs-string">"主线程run！"</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-ee3b143a27555505817ffc695ceeb883_b.gif" alt="img"></p><h2 id="五、多线程同步"><a href="#五、多线程同步" class="headerlink" title="五、多线程同步"></a><strong>五、多线程同步</strong></h2><p>多线程并发可以提高效率，但是多个线程去访问一个资源时，会出现安全问题。如果你的代码所在的进程有多个线程同时运行，而线程可能出现同时运行代码。如果每次运行结果和单线程运行的结果一致，而其他变量的值和预期也一致，这样的线程才是安全的。</p><p><strong>5.1.线程安全</strong></p><blockquote><p>每个进程的内存空间中都会有一块特殊的公共区域，通常称为堆（内存）。进程内的所有线程都可以访问到该区域。<strong>线程安全</strong>指的是，在堆内存中的数据由于可以被任何线程访问到，在没有限制的情况下存在被意外修改的风险。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyTask <span class="hljs-keyword">implements</span> Runnable &#123;<br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">100</span>;<br>        @Override<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run() &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">count</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.<span class="hljs-keyword">println</span>(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + <span class="hljs-keyword">count</span> + <span class="hljs-string">&quot;张票..&quot;</span>);<br>                    <span class="hljs-keyword">count</span>--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TicketDemo &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>            <span class="hljs-comment">//3.创建任务对象</span><br>            MyTask mt = <span class="hljs-keyword">new</span> MyTask();<br>            <span class="hljs-comment">//4.创建线程对象</span><br>            Thread t1 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;jack&quot;</span>);<br>            Thread t2 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;tom&quot;</span>);<br>            Thread t3 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;rose&quot;</span>);<br>            <span class="hljs-comment">//5.开启线程</span><br>            t1.start();<br>            t2.start();<br>            t3.start();<br>            <span class="hljs-comment">//出现安全问题:</span><br>            <span class="hljs-comment">//a.出现重复数据</span><br>            <span class="hljs-comment"><code class="language-hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyTask <span class="hljs-keyword">implements</span> Runnable &#123;<br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">100</span>;<br>        @Override<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run() &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">count</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.<span class="hljs-keyword">println</span>(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + <span class="hljs-keyword">count</span> + <span class="hljs-string">&quot;张票..&quot;</span>);<br>                    <span class="hljs-keyword">count</span>--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TicketDemo &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>            <span class="hljs-comment">//3.创建任务对象</span><br>            MyTask mt = <span class="hljs-keyword">new</span> MyTask();<br>            <span class="hljs-comment">//4.创建线程对象</span><br>            Thread t1 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;jack&quot;</span>);<br>            Thread t2 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;tom&quot;</span>);<br>            Thread t3 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;rose&quot;</span>);<br>            <span class="hljs-comment">//5.开启线程</span><br>            t1.start();<br>            t2.start();<br>            t3.start();<br>            <span class="hljs-comment">//出现安全问题:</span><br>            <span class="hljs-comment">//a.出现重复数据</span><br>            <span class="hljs-comment">//b.出现0,-1这种非法数据</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>结果会出现0和负数，这就出现线程不安全的问题。当线程卖票完了,没来得及减1,失去了CPU的执行权。当票剩下最后一张,多个线程都通过了判断,卖票时就会出现非法数据</p><p><strong>5.2.同步代码块(synchronized关键字)</strong></p><p>要解决线程安全问题，就必须保证处理共享<strong>资源</strong>的代码在任意时刻只能要<strong>一个线程去访问</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs javascript">      <span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">lock</span>)</span>&#123;<br>需要同步的代码<br>   &#125;<br><span class="hljs-comment"><code class="language-hljs javascript">      <span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">lock</span>)</span>&#123;<br>需要同步的代码<br>   &#125;<br><span class="hljs-comment">//注意:锁对象可以是任意对象,但是必须是同一个对象</span><br></code></pre></td></tr></table></figure><blockquote><p>lock是一个锁对象，在线程执行同步代码块时，会先检查锁对象的位置，默认为1。执行代码代码块，锁位置变成0。 0就表示对象被使用，1就表示对象被用完。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs gradle"><span class="hljs-comment">//同步代码块</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyTask <span class="hljs-keyword">implements</span> Runnable &#123;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//让锁可以为任意类型</span><br>    Object obj = <span class="hljs-keyword">new</span> Object();<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run() &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (obj)&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">count</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.<span class="hljs-keyword">println</span>(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + <span class="hljs-keyword">count</span> + <span class="hljs-string">&quot;张票..&quot;</span>);<br>                  <span class="hljs-keyword">count</span>--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TicketDemo &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//3.创建任务对象</span><br>        MyTask mt = <span class="hljs-keyword">new</span> MyTask();<br>        <span class="hljs-comment">//4.创建线程对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;jack&quot;</span>);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;tom&quot;</span>);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;rose&quot;</span>);<br>        <span class="hljs-comment"><code class="language-hljs gradle"><span class="hljs-comment">//同步代码块</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyTask <span class="hljs-keyword">implements</span> Runnable &#123;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//让锁可以为任意类型</span><br>    Object obj = <span class="hljs-keyword">new</span> Object();<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run() &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (obj)&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">count</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.<span class="hljs-keyword">println</span>(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + <span class="hljs-keyword">count</span> + <span class="hljs-string">&quot;张票..&quot;</span>);<br>                  <span class="hljs-keyword">count</span>--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TicketDemo &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//3.创建任务对象</span><br>        MyTask mt = <span class="hljs-keyword">new</span> MyTask();<br>        <span class="hljs-comment">//4.创建线程对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;jack&quot;</span>);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;tom&quot;</span>);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;rose&quot;</span>);<br>        <span class="hljs-comment">//5.开启线程</span><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>5.3.同步方法</strong></p><blockquote><p>被synchronized修饰的方法，同步方法不需要我们提供锁对象,默认使用this， 同步方式是可以为静态的,默认使用当前类的class文件。</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> 方法名()&#123;<br><span class="hljs-comment"><code class="language-hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> 方法名()&#123;<br><span class="hljs-comment">//需要同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs typescript"><span class="hljs-comment">//同步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    int count = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">Object</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    <span class="hljs-comment">//重写线程run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>         <span class="hljs-comment">//持续执行卖票方法</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            sellTicket();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> synchronized <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sellTicket</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + count + <span class="hljs-string">&quot;张票..&quot;</span>);<br>            count--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketDemo</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-comment">//3.创建任务对象</span><br>        MyTask mt = <span class="hljs-keyword">new</span> MyTask();<br>        <span class="hljs-comment">//4.创建线程对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;jack&quot;</span>);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;tom&quot;</span>);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;rose&quot;</span>);<br>        <span class="hljs-comment"><code class="language-hljs typescript"><span class="hljs-comment">//同步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    int count = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">Object</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    <span class="hljs-comment">//重写线程run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>         <span class="hljs-comment">//持续执行卖票方法</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            sellTicket();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> synchronized <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sellTicket</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + count + <span class="hljs-string">&quot;张票..&quot;</span>);<br>            count--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketDemo</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-comment">//3.创建任务对象</span><br>        MyTask mt = <span class="hljs-keyword">new</span> MyTask();<br>        <span class="hljs-comment">//4.创建线程对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;jack&quot;</span>);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;tom&quot;</span>);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(mt,<span class="hljs-string">&quot;rose&quot;</span>);<br>        <span class="hljs-comment">//5.开启线程</span><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.4.Lock锁</strong></p><blockquote><p>JDK实际上建议使用Lock锁方式,因为Lock方式更加符合面向对象思想。而其优势在于Lock锁可以让某个线程在持续获取同步锁失败后返回，不用等待。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs csharp">     Lock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();<br><span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>(); <span class="hljs-comment">//加锁,获取锁</span><br><span class="hljs-comment">//需要同步的代码</span><br><span class="hljs-keyword">lock</span>.unlock();<span class="hljs-comment"><code class="language-hljs csharp">     Lock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();<br><span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>(); <span class="hljs-comment">//加锁,获取锁</span><br><span class="hljs-comment">//需要同步的代码</span><br><span class="hljs-keyword">lock</span>.unlock();<span class="hljs-comment">//解锁,释放锁</span><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs csharp"><span class="hljs-comment">//Lock锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> &#123;<br>    <span class="hljs-built_in">int</span> count = <span class="hljs-number">100</span>;<br>     <span class="hljs-comment">//创建锁</span><br>    Lock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//加锁</span><br>            <span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>();<br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + count + <span class="hljs-string">&quot;张票..&quot;</span>);<br>                count--;<br>            &#125;<br>            <span class="hljs-comment">//解锁</span><br>            <span class="hljs-keyword">lock</span>.unlock();<br>             <span class="hljs-comment">//让该线程变成就绪状态</span><br>            Thread.<span class="hljs-keyword"><code class="language-hljs csharp"><span class="hljs-comment">//Lock锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> &#123;<br>    <span class="hljs-built_in">int</span> count = <span class="hljs-number">100</span>;<br>     <span class="hljs-comment">//创建锁</span><br>    Lock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//加锁</span><br>            <span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>();<br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出第&quot;</span> + count + <span class="hljs-string">&quot;张票..&quot;</span>);<br>                count--;<br>            &#125;<br>            <span class="hljs-comment">//解锁</span><br>            <span class="hljs-keyword">lock</span>.unlock();<br>             <span class="hljs-comment">//让该线程变成就绪状态</span><br>            Thread.<span class="hljs-keyword">yield</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.4.死锁</strong></p><blockquote><p>多个线程存在多个锁，而锁之间有交叉需要锁，造成死循环。比如：两个线程在运行时在等待对方的锁，造成程序停滞，这种便是死锁。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lockTest</span></span>&#123;<br>   <span class="hljs-comment">//创建任意类型对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> o1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> o2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-comment">//创建线程1</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>                synchronized (o1) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程1锁o1&quot;</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>             <span class="hljs-comment">//让当前线程睡眠，保证让o1线程得到o2.</span><br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                        synchronized (o2) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;线程1锁o2&quot;</span>);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                  <br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>       <br>   <span class="hljs-comment">//线程2</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>                synchronized (o2) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程2锁o2&quot;</span>);<br>                    synchronized (o1) &#123;<br>                        System.out.println(<span class="hljs-string"><code class="language-hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lockTest</span></span>&#123;<br>   <span class="hljs-comment">//创建任意类型对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> o1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> o2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-comment">//创建线程1</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>                synchronized (o1) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程1锁o1&quot;</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>             <span class="hljs-comment">//让当前线程睡眠，保证让o1线程得到o2.</span><br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                        synchronized (o2) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;线程1锁o2&quot;</span>);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                  <br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>       <br>   <span class="hljs-comment">//线程2</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>                synchronized (o2) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程2锁o2&quot;</span>);<br>                    synchronized (o1) &#123;<br>                        System.out.println(<span class="hljs-string">"线程2锁o1"</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>死锁产生条件：</strong></p><ul><li><strong>互斥条件 (Mutual exclusive)</strong></li></ul><blockquote><p>资源不能被共享, 只能由一个进程使用。</p></blockquote><ul><li><strong>请求与保持条件 (Hold and Wait)</strong></li></ul><blockquote><p>已经得到资源的进程可以再次申请新的资源。</p></blockquote><ul><li><strong>非剥夺条件 (No pre-emption)</strong></li></ul><blockquote><p>已经分配的资源不能从相应的进程强制地剥夺。</p></blockquote><ul><li><strong>循环等待条件 (Circular wait)</strong></li></ul><blockquote><p>系统中若干进程组成环路, 该环路中每个进程都在等待相邻进程整占用的资源。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-959a20c3b4c73c11353e7df1a17fe6f4_b.gif" alt="img"></p><h2 id="六、线程池"><a href="#六、线程池" class="headerlink" title="六、线程池"></a><strong>六、线程池</strong></h2><p>线程池，从字面含义来看，是指管理一组同构工作线程的资源池。线程池是与工作队列密切相关的，其中在工作队列中保存了所有等待执行的任务。工作者线程的任务很简单：从工作队列中获取一个任务，执行任务，然后返回线程池并等待下一个任务。</p><p>“在线程池中执行任务“”比“为每个线程分配一个任务”优势更多。通过重用现有的线程而不是创建线程，可以在处理多个请求时分摊在线程创建和销毁过程中产生的巨大开销。另一个额外的好处是，当请求到达时，工作线程通常已经存在，因此不会由于等待创建线程而延迟任务的执行，从而提高了响应性。通过适当的调整线程池的大小，可以创建足够的线程以便使处理器保持忙碌状态，同时还可以防止过多线程相互竞争资源而使应用程序耗尽内存或失败。</p><p><strong>6.1.线程池流程：</strong></p><ul><li>\1. 默认情况下，创建完线程池后并不会立即创建线程, 而是等到有任务提交时才会创建线程来进行处理。（除非调用prestartCoreThread或prestartAllCoreThreads方法）。</li><li>\2. 当线程数小于核心线程数时，每提交一个任务就创建一个线程来执行，即使当前有线程处于空闲状态，直到当前线程数达到核心线程数。</li><li>\3. 当前线程数达到核心线程数时，如果这个时候还提交任务，这些任务会被放到队列里，等到线程处理完了手头的任务后，会来队列中取任务处理。</li><li>\4. 当前线程数达到核心线程数并且队列也满了，如果这个时候还提交任务，则会继续创建线程来处理，直到线程数达到最大线程数。</li><li>\5. 当前线程数达到最大线程数并且队列也满了，如果这个时候还提交任务，则会触发饱和策略。</li><li>\6. 如果某个线程的控线时间超过了keepAliveTime，那么将被标记为可回收的，并且当前线程池的当前大小超过了核心线程数时，这个线程将被终止。</li></ul><p><strong>6.2.Executor接口实现线程池管理</strong></p><p><strong>步骤：</strong></p><blockquote><p>创建一个实现Runnable接口或Callable接口的实现类对象，重写方法。<br>创建Runnable接口或者Callable接口的实现类。<br>使用Executors线程执行器类来创建线程池。<br>使用ExecutorService执行器服务类的submit方法将Runnable接口或Callable接口的实现类对象提交到线程池进行管理。<br>线程池任务执行完，使用shutdown方法关闭线程池。</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class=" language-hljs processing"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author 买盐</span><br><span class="hljs-comment"> * 线程池： 使用实现Executor接口</span><br><span class="hljs-comment"> *         1.创建一个实现Runnable接口或Callable接口的实现类对象，重写方法。</span><br><span class="hljs-comment"> *         2.创建Runnable接口或者Callable接口的实现类。</span><br><span class="hljs-comment"> *         3.使用Executors线程执行器类来创建线程池。</span><br><span class="hljs-comment"> *         4.使用ExecutorService执行器服务类的submit方法将Runnable接口或Callable接口的实现类对象提交到线程池进行管理。</span><br><span class="hljs-comment"> *         5.线程池任务执行完，使用shutdown方法关闭线程池。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class threadPool implements Callable&lt;<span class="hljs-keyword">Object</span>&gt; &#123;<br>    <span class="hljs-comment">//重写实现类方法</span><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> call() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i++&lt;<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-comment">//获取线程名</span><br>            System.out.<span class="hljs-built_in">println</span>(Thread.currentThread().getName()+<span class="hljs-string">&quot;在运行Call方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> class poolTest &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//创建Callable接口实现类</span><br>        threadPool threadPool = <span class="hljs-keyword">new</span> threadPool();<br>        <span class="hljs-comment">//使用Executors线程执行器类来创建线程池。</span><br>        ExecutorService executor = Executors.newCachedThreadPool();<br>        <span class="hljs-comment">//使用executor将对象提交到线程池</span><br>        Future&lt;<span class="hljs-keyword">Object</span>&gt; submit01= executor.submit(threadPool);<br>        Future&lt;<span class="hljs-keyword">Object</span>&gt; submit02= executor.submit(threadPool);<br>        <span class="hljs-comment">//关闭线程池</span><br>        executor.shutdown();<br>        <span class="hljs-comment">//获取线程池的结果</span><br>        System.out.<span class="hljs-built_in">println</span>(submit01.<span class="hljs-built_in">get</span>());<br>        System.out.<span class="hljs-built_in">println</span>(submit02.<span class="hljs-built_in"><code class="language-hljs processing"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author 买盐</span><br><span class="hljs-comment"> * 线程池： 使用实现Executor接口</span><br><span class="hljs-comment"> *         1.创建一个实现Runnable接口或Callable接口的实现类对象，重写方法。</span><br><span class="hljs-comment"> *         2.创建Runnable接口或者Callable接口的实现类。</span><br><span class="hljs-comment"> *         3.使用Executors线程执行器类来创建线程池。</span><br><span class="hljs-comment"> *         4.使用ExecutorService执行器服务类的submit方法将Runnable接口或Callable接口的实现类对象提交到线程池进行管理。</span><br><span class="hljs-comment"> *         5.线程池任务执行完，使用shutdown方法关闭线程池。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class threadPool implements Callable&lt;<span class="hljs-keyword">Object</span>&gt; &#123;<br>    <span class="hljs-comment">//重写实现类方法</span><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> call() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i++&lt;<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-comment">//获取线程名</span><br>            System.out.<span class="hljs-built_in">println</span>(Thread.currentThread().getName()+<span class="hljs-string">&quot;在运行Call方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> class poolTest &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//创建Callable接口实现类</span><br>        threadPool threadPool = <span class="hljs-keyword">new</span> threadPool();<br>        <span class="hljs-comment">//使用Executors线程执行器类来创建线程池。</span><br>        ExecutorService executor = Executors.newCachedThreadPool();<br>        <span class="hljs-comment">//使用executor将对象提交到线程池</span><br>        Future&lt;<span class="hljs-keyword">Object</span>&gt; submit01= executor.submit(threadPool);<br>        Future&lt;<span class="hljs-keyword">Object</span>&gt; submit02= executor.submit(threadPool);<br>        <span class="hljs-comment">//关闭线程池</span><br>        executor.shutdown();<br>        <span class="hljs-comment">//获取线程池的结果</span><br>        System.out.<span class="hljs-built_in">println</span>(submit01.<span class="hljs-built_in">get</span>());<br>        System.out.<span class="hljs-built_in">println</span>(submit02.<span class="hljs-built_in">get</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>newCachedThreadPool()</td><td>创建一个可扩展的执行器，用于启动短期的线程</td></tr><tr><td>newFixedThreadPool(int Threads)</td><td>创建一个固定线程数的执行器</td></tr><tr><td>newSingleThreadExecutor()</td><td>创建一个单个线程的执行器</td></tr><tr><td>newScheduledThreadPool(int corePoolSize)</td><td>创建一个定长度的执行器，支持定时任务执行</td></tr></tbody></table><p><strong>6.3.CompletableFuture类实现线程池管理</strong></p><p>该类是为辅助FutureTask类（获取结果会通过阻塞、轮询方式，造成对线程浪费资源）对线程执行结果进行管理和获取的增强。使用该类通常使用4个静态方法来在异步执行中创建该类对象。</p><p>CompletableFuture类的4个静态方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>runAsync(Runnable r)</td><td>以Runnable接口为参数，并使用ForkJoinPool.commonPool作为线程池异步代码获取CompletableFuture结果为空的对象</td></tr><tr><td>runAsync(Runnable r, Executor e)</td><td>以Runnable接口为参数，并使用指定线程池执行器来获取CompletableFuture结果为空的对象</td></tr><tr><td><U>supplyAsync(Supplier<U> s)</td><td>以Supplier接口为参数，并使用ForkJoinPool.commonPool作为线程池异步代码获取CompletableFuture结果为空的对象</td></tr><tr><td><U>supplyAsync(Supplier <U>s,Executor e)</td><td>以Supplier接口为参数，并使用指定线程池执行器来获取CompletableFuture结果为空的对象</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第七章、JDBC</title>
    <link href="/post/000c0e30-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000c0e30-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、JDBC"><a href="#一、JDBC" class="headerlink" title="一、JDBC"></a><strong>一、JDBC</strong></h2><p>JDBC(java数据库连接)是一套用于执行SQL语句的javaAPI。通过API来<strong>连接关系型数据库</strong>，并使用SQL语句来完成对数据库数据的查询、新增、删除和更新等操作。</p><blockquote><p>JDBC是介于应用程序和数据库之间的连接，应用程序通过JDBC去找对应的数据库驱动，再通过驱动与相应的数据库进行连接。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-34e7941093c9bd12a45fc391c76716a4_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-fc970ceeada6c49596dbcf649bf3f970_b.jpg" alt="img"></p><h2 id="二、JDBC常用API"><a href="#二、JDBC常用API" class="headerlink" title="二、JDBC常用API"></a><strong>二、JDBC常用API</strong></h2><p><strong>2.1.Driver接口</strong></p><blockquote><p>该接口是所有JDBC程序<strong>必须要实现</strong>的接口，该接口是专门提供给数据库厂商使用的。</p></blockquote><p><strong>2.2.DriverManager类</strong></p><blockquote><p>用于加载JDBC驱动并创建与数据库的连接。</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>registerDriver（Driver d）</td><td>向DriverManager注册指定的JBDC驱动d</td></tr><tr><td>getConnerection(String url ,String user, String pwd )</td><td>用于建立和数据库连接，并返回连接对象</td></tr></tbody></table><p><strong>2.3.Connection接口</strong></p><blockquote><p>该接口为数据库<strong>连接对象</strong>，只有获取连接对象才能访问数据库。</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>createStatement()</td><td>创建一个向数据库发送语句的Statement对象</td></tr><tr><td>prepareStatement(String sql)</td><td>返回一个向数据库发送带参数的SQL语句prepareStatement对象</td></tr><tr><td>prepareCall(String sql)</td><td>返回一个能调用数据库存储过程的CallableStatement对象</td></tr></tbody></table><p><strong>2.4.Statement接口</strong></p><blockquote><p>该接口用来<strong>执行静态SQL语句</strong>，并返回一个结果对象。</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>execute(String sql)</td><td>用于执行任何sql语句，通过Statement的getResultSet()获取查询结果</td></tr><tr><td>executeUpdate(String sql)</td><td>用于执行添加、更新、删除的SQL语句，返回执行的语句数量</td></tr><tr><td>executeQuery(String sql)</td><td>用于执行查询SQL语句，返回查询的ResultSet对象</td></tr></tbody></table><p><strong>2.5.PreparedStatement接口</strong></p><blockquote><p>PreparedStatement是Statement的子接口，用于<strong>执行预编译</strong>的SQL语句。该接口可以带参数SQL语句的执行操作，使用占位符？来代替参数，通过set()方法对SQL语句参数赋值。</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>executeUpdate()</td><td>执行SQL语句（结构化查询语句）</td></tr><tr><td>executeQuery()</td><td>执行SQL查询，返回ResultSet对象</td></tr><tr><td>setInt(int index, int x)</td><td>给指定参数index设置x值</td></tr><tr><td>setFloat(int index,float x)</td><td>给指定参数index设置x值</td></tr><tr><td>setString(int index ,String x)</td><td>给指定参数index设置x值</td></tr><tr><td>setDate(int index , Date x)</td><td>给指定参数index设置x值</td></tr><tr><td>addBatch()</td><td>添加一组参数到PreparedStatement对象</td></tr><tr><td>setCharacterStream(int index ,Reader r , int length)</td><td>将指定输入流数据写到数据库字段中</td></tr><tr><td>setBinaryStream(int index,InputStream x ,int length)</td><td>将二进制的输入流数据写到二进制字段中</td></tr></tbody></table><p><strong>2.6.ResultSet接口</strong></p><p><img src="https://pic4.zhimg.com/v2-3ce991e361cf6c62d045b19fdcd6014f_b.jpg" alt="img"></p><blockquote><p>该接口用于保存JDBC执行查询时<strong>返回的结果集</strong>，该结果集封装在一个逻辑表格中。<br>ResultSet内部有指向表格数据行的<strong>游标</strong>，初始化时，游标在表格第一行以前，调用next方法将游标移动下一行。没有数据则返回false。</p></blockquote><h2 id="三、JDBC步骤"><a href="#三、JDBC步骤" class="headerlink" title="三、JDBC步骤"></a><strong>三、JDBC步骤</strong></h2><p><strong>3.1.JDBC步骤</strong></p><p><strong>1..加载(注册)数据库驱动</strong></p><blockquote><p><strong>方式一：</strong>通常采用Class类的静态方法 forName()来实现。<br><strong>方式二：</strong>registerDriver(Driver driver) <strong>不推荐</strong>。理由一：编译器依赖具体的数据库驱动；理由二：导致数据库驱动被注册多次。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">//方式一：</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DriverManager</span>.</span></span>register<span class="hljs-constructor">Driver(<span class="hljs-params">new</span> <span class="hljs-params">com</span>.<span class="hljs-params">mysql</span>.<span class="hljs-params">jdbc</span>.Driver()</span>)<br><br><span class="hljs-comment">//方式二：&quot; &quot;所对应数据库驱动  </span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string"><code class="language-hljs reasonml"><span class="hljs-comment">//方式一：</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DriverManager</span>.</span></span>register<span class="hljs-constructor">Driver(<span class="hljs-params">new</span> <span class="hljs-params">com</span>.<span class="hljs-params">mysql</span>.<span class="hljs-params">jdbc</span>.Driver()</span>)<br><br><span class="hljs-comment">//方式二：&quot; &quot;所对应数据库驱动  </span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">"com.mysql.jdbc.Driver"</span>)</span> ;<br></code></pre></td></tr></table></figure><p><strong>2.获取数据库连接</strong></p><blockquote><p><strong>方式一：</strong>通过DriverManager中的getConnection()方法获取连接。**推荐 **getConnection(String url,String user,String password)<br>**url **:JDBC和数据库厂商指定的协议<br><strong>user</strong>：连接数据库的用户名<br><strong>password</strong>：连接数据库的密码<br><strong>方式二：</strong>getConnection(String url,Properties info) ，info是我们自己封装的文件。<br><strong>方式三：</strong>getConnection(String url) 数据库用？进行隔开，用户和密码使用&amp;进行连接。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-0910326c13318337e52f02f95b1c9980_b.png" alt="img"></p><p><strong>3.通过连接对象获取执行SQL语句的对象（</strong>Statement<strong>）</strong></p><blockquote><p><strong>方式一：</strong>createStatement()<br><strong>方式二：</strong>prepareStatement(String sql)<br><strong>方式三：</strong>prepareCall(String sql)</p></blockquote><p><img src="https://pic4.zhimg.com/v2-e4dc484166206ff8a7d0eb7b5130e66b_b.png" alt="img"></p><p><strong>4.使用Statement去执行SQ语句</strong></p><blockquote><p><strong>方式一：</strong>execute(String sql)<br><strong>方式二：</strong>executeUpdate(String sql)<br><strong>方式三：</strong>executeQuery(String sql)</p></blockquote><p><img src="https://pic1.zhimg.com/v2-9b280e18f92ae8fdab283d1ede06b8f4_b.png" alt="img"></p><p><strong>5.操作ResultSet结果集</strong></p><blockquote><p>就是SQL语句查询到的内容。返回一个ResultSet对象，该对象保存查询结果。<br>实际开发：<strong>把结果集封装到POJO对象中</strong>（映射结果集）。<br>所谓映射结果集，就是把数据库表中的数据和POJO实体类中的属性进行一一对应。</p></blockquote><p><strong>6.关闭执行SQL语句连接、关闭数据库连接。</strong></p><p><img src="https://pic3.zhimg.com/v2-994e15859f56aee1d2042d46d8a2e4a2_b.jpg" alt="img"></p><blockquote><p><strong>注意：</strong>关闭的顺序。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-db025dccc6b740aa9fad0c3610ccf6ba_b.gif" alt="img"></p><h2 id="三、实现第一个JDBC"><a href="#三、实现第一个JDBC" class="headerlink" title="三、实现第一个JDBC"></a><strong>三、实现第一个JDBC</strong></h2><p><strong>需求：向数据库中插入一条记录</strong></p><p><strong>step1、</strong>准备一张表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> sqltest; USE sqlTest; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user( uid <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> auto_increment, <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>), address <span class="hljs-type">varchar</span>(<span class="hljs-number"><code class="language-hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> sqltest; USE sqlTest; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user( uid <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> auto_increment, <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>), address <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) );<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-84b68dfbc6fe342ab3b6d426d385106e_b.jpg" alt="img"></p><p><strong>step2、</strong>导入数据库驱动</p><p>1）建立一个lib的目录</p><p>2）拷贝jar包到lib目录中</p><p>3）右键，add as libary，将jar包加入到classpath中</p><p><img src="https://pic1.zhimg.com/v2-f95994194352a80a3c4cd86986be2310_b.jpg" alt="img"></p><blockquote><p><strong>驱动包自己取：</strong><br>链接：<a href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1s5u026OQoYg6Ip2AwK9jCw">https://pan.baidu.com/s/1s5u026OQoYg6Ip2AwK9jCw</a> 提取码：k282</p></blockquote><p><strong>step3、</strong>编写一个类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"> @Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test01() throws <span class="hljs-keyword">Exception</span> &#123;<br>    //<span class="hljs-number">1.</span>注册驱动<br>    <span class="hljs-keyword">Class</span>.forName(&quot;com.mysql.jdbc.Driver&quot;);<br>    //<span class="hljs-number">2.</span>建立与数据库的连接<br>    <span class="hljs-keyword">Connection</span> conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3307/sqltest&quot;,<br>            &quot;root&quot;,<br>            &quot;root&quot;);<br>    //<span class="hljs-number">3.</span>准备<span class="hljs-keyword">sql</span>语句<br>    <span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = conn.createStatement();<br>    //<span class="hljs-number">4.</span>执行<span class="hljs-keyword">sql</span>语句<br>    <span class="hljs-type">int</span> i = <span class="hljs-keyword">statement</span>.executeUpdate(&quot;INSERT into t_user VALUES (null,&#x27;admin&#x27;,&#x27;beijing&#x27;)&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;影响行数：&quot; + i);<br>    //<span class="hljs-number">5.</span>释放资源<br>    <span class="hljs-keyword">statement</span>.<span class="hljs-keyword">close</span>();<br>    conn.<span class="hljs-keyword"><code class="language-hljs pgsql"> @Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test01() throws <span class="hljs-keyword">Exception</span> &#123;<br>    //<span class="hljs-number">1.</span>注册驱动<br>    <span class="hljs-keyword">Class</span>.forName(&quot;com.mysql.jdbc.Driver&quot;);<br>    //<span class="hljs-number">2.</span>建立与数据库的连接<br>    <span class="hljs-keyword">Connection</span> conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3307/sqltest&quot;,<br>            &quot;root&quot;,<br>            &quot;root&quot;);<br>    //<span class="hljs-number">3.</span>准备<span class="hljs-keyword">sql</span>语句<br>    <span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = conn.createStatement();<br>    //<span class="hljs-number">4.</span>执行<span class="hljs-keyword">sql</span>语句<br>    <span class="hljs-type">int</span> i = <span class="hljs-keyword">statement</span>.executeUpdate(&quot;INSERT into t_user VALUES (null,&#x27;admin&#x27;,&#x27;beijing&#x27;)&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;影响行数：&quot; + i);<br>    //<span class="hljs-number">5.</span>释放资源<br>    <span class="hljs-keyword">statement</span>.<span class="hljs-keyword">close</span>();<br>    conn.<span class="hljs-keyword">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-1b7e5b0d547c11963bc19c877f16e5ff_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-6492f44d6521cda46ad1bbd883d66d90_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-f34874bee716badc0a77737f1f5466e8_b.gif" alt="img"></p><h2 id="四、-JDBC获取连接与关闭连接工具类实现"><a href="#四、-JDBC获取连接与关闭连接工具类实现" class="headerlink" title="四、 JDBC获取连接与关闭连接工具类实现"></a><strong>四、 JDBC获取连接与关闭连接工具类实现</strong></h2><p><strong>4.1编写JDBC工具类步骤</strong></p><ol><li>将固定字符串定义为常量 。</li><li>在静态代码块中注册驱动(只注册一次) 。</li><li>提供一个获取连接的方法 static Connection getConneciton()。</li><li>定义关闭资源的方法 close(Connection conn, Statement stmt, ResultSet rs) 。</li><li>重载关闭方法 close(Connection conn, Statement stmt) 。</li></ol><p><strong>工具类：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre class=" language-hljs typescript"><span class="hljs-comment">//编写工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> url;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> username;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> password;<br>    <span class="hljs-comment">//1.注册驱动 一次就可以了</span><br>    <span class="hljs-keyword">static</span> &#123;   <span class="hljs-comment">//使用静态方法</span><br>        <span class="hljs-keyword">try</span> &#123;   <span class="hljs-comment">//有异常</span><br>            InputStream IN = JdbcUtil.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;Jdbc.properties&quot;</span>);<span class="hljs-comment">//来使用这个有关数据库文件</span><br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(IN);<span class="hljs-comment">//读取文件内容到properties对象中</span><br>            url= properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username= properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password= properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            Class.forName(<span class="hljs-string">&quot;DriverClassName&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//2.获取数据库的连接：每次都要做</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-function"><span class="hljs-title">getConnection</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//使用静态方法可以每次有新的连接</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///sqltest&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;获取数据库连接失败&quot;</span>,e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//3.释放资源:每次使用都要做 使用静态方法可以每次连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">release</span>(<span class="hljs-params">ResultSet resultSet, Statement statement,Connection connection</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (resultSet!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;   <span class="hljs-comment">//关闭会出现异常</span><br>                resultSet.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (statement!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                statement.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (connection!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword"><code class="language-hljs typescript"><span class="hljs-comment">//编写工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> url;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> username;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> password;<br>    <span class="hljs-comment">//1.注册驱动 一次就可以了</span><br>    <span class="hljs-keyword">static</span> &#123;   <span class="hljs-comment">//使用静态方法</span><br>        <span class="hljs-keyword">try</span> &#123;   <span class="hljs-comment">//有异常</span><br>            InputStream IN = JdbcUtil.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;Jdbc.properties&quot;</span>);<span class="hljs-comment">//来使用这个有关数据库文件</span><br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(IN);<span class="hljs-comment">//读取文件内容到properties对象中</span><br>            url= properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username= properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password= properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            Class.forName(<span class="hljs-string">&quot;DriverClassName&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//2.获取数据库的连接：每次都要做</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-function"><span class="hljs-title">getConnection</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//使用静态方法可以每次有新的连接</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///sqltest&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;获取数据库连接失败&quot;</span>,e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//3.释放资源:每次使用都要做 使用静态方法可以每次连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">release</span>(<span class="hljs-params">ResultSet resultSet, Statement statement,Connection connection</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (resultSet!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;   <span class="hljs-comment">//关闭会出现异常</span><br>                resultSet.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (statement!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                statement.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (connection!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs ini"><span class="hljs-attr">DriverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql:///sqltest<br><span class="hljs-attr">username</span>=root<br><span class="hljs-attr"><code class="language-hljs ini"><span class="hljs-attr">DriverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql:///sqltest<br><span class="hljs-attr">username</span>=root<br><span class="hljs-attr">password</span>=root<br><br></code></pre></td></tr></table></figure><p><strong>使用工具类</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = <span class="hljs-keyword">null</span>;//默认与数据库连接初始值为<span class="hljs-keyword">null</span><br><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">null</span>;//默认准备<span class="hljs-keyword">sql</span>语句初始值为<span class="hljs-keyword">null</span><br>ResultSet resultSet = <span class="hljs-keyword">null</span>;//默认查询结果集初始值为<span class="hljs-keyword">null</span><br>try &#123;<br>    <span class="hljs-keyword">connection</span> = JdbcUtil.getConnection();//使用工具类老与数据库连接<br>    <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();//连接后准备<span class="hljs-keyword">sql</span>语句<br>    resultSet = <span class="hljs-keyword">statement</span>.executeQuery(&quot;&#x27;select * from t_user where name=&#x27;&quot;+<span class="hljs-keyword">user</span>.getName()+&quot;&#x27;and password=&#x27;&quot;+<span class="hljs-keyword">user</span>.getPassword());//执行<span class="hljs-keyword">sql</span>语句<br>  &#125; catch (SQLException e) &#123;<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;finally &#123;<br>    JdbcUtil.<span class="hljs-keyword">release</span>(resultSet,<span class="hljs-keyword">statement</span>,<span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = <span class="hljs-keyword">null</span>;//默认与数据库连接初始值为<span class="hljs-keyword">null</span><br><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">null</span>;//默认准备<span class="hljs-keyword">sql</span>语句初始值为<span class="hljs-keyword">null</span><br>ResultSet resultSet = <span class="hljs-keyword">null</span>;//默认查询结果集初始值为<span class="hljs-keyword">null</span><br>try &#123;<br>    <span class="hljs-keyword">connection</span> = JdbcUtil.getConnection();//使用工具类老与数据库连接<br>    <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();//连接后准备<span class="hljs-keyword">sql</span>语句<br>    resultSet = <span class="hljs-keyword">statement</span>.executeQuery(&quot;&#x27;select * from t_user where name=&#x27;&quot;+<span class="hljs-keyword">user</span>.getName()+&quot;&#x27;and password=&#x27;&quot;+<span class="hljs-keyword">user</span>.getPassword());//执行<span class="hljs-keyword">sql</span>语句<br>  &#125; catch (SQLException e) &#123;<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;finally &#123;<br>    JdbcUtil.<span class="hljs-keyword">release</span>(resultSet,<span class="hljs-keyword">statement</span>,<span class="hljs-keyword">connection</span>);//使用工具来释放资源<br>&#125;<br> <br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-20deceaa1582b9d5ddec75ead3731645_b.gif" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六章、I/O流</title>
    <link href="/post/000c0e34-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000c0e34-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、I-O流概述"><a href="#一、I-O流概述" class="headerlink" title="一、I/O流概述"></a><strong>一、I/O流概述</strong></h2><p>我们平时用键盘打字、显示器显示音频等等是如何实现的呢？这是要实现程序与设备之间的数据传输，而程序是通过<strong>流</strong>的方式与设备进行数据传输。流又是什么？可以将流想象成一个“水流管道”，水流就在这管道中将数据于设备之间进行交互。</p><p><strong>1.1.流的分类</strong></p><p>流具有方向性，至于是输入流还是输出流则是一个相对的概念，一般以程序为参考，如果数据的流向是程序至设备，我们成为输出流，反之我们称为输入流。</p><p>I/O流，即是输入输出流。流大致分三种：</p><ul><li><strong>字节流和字符流</strong></li></ul><blockquote><p>按照操作流的<strong>数据单位不同</strong>，分为字节流和字符流。字节流按一个字节或多个字节数据进行读写；字符流按一个字符或多个字符进行读写。</p></blockquote><ul><li><strong>输入流和输出流</strong></li></ul><blockquote><p>按照流<strong>传输方向不同</strong>，分为输入流和输出流。<strong>输入</strong>流从流中<strong>读</strong>数据，<strong>输出</strong>流往流中<strong>写</strong>数据。</p></blockquote><ul><li><strong>节点流和处理流</strong></li></ul><blockquote><p>按流的<strong>功能不同</strong>，分为节点流和处理流。<strong>节点流又称低级流</strong>，指只能<strong>直接连接数据源</strong>进行读写操作。<strong>处理流又称高级流</strong>，指对已存在的节点流连接、封装，通过封装后的流进行读写操作。处理流<strong>不会直接连接数据源</strong>。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-b63f1cf4524763cd59a01b23ffc7d060_b.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-945055e8a7499f6bf20b28df1d8988b9_b.gif" alt="img"></p><h2 id="二、字节流"><a href="#二、字节流" class="headerlink" title="二、字节流"></a><strong>二、字节流</strong></h2><p><strong>2.1.字节流</strong></p><p>I/O流中针对字节的输入和输出提供了字节流。字节流按传输方向分为字节输入流和字节输出流。字节流的顶级父类：<strong>InputStream(输入-读)和OutputStream(输出-写)<strong>。这两个类都是抽象类，</strong>无法实例化</strong>。</p><p><strong>InputStream常用方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>read（）</td><td>从输入流读取一个8位的字节，把它转换为0～255之间的整数，并返回这一整数。当没有可用字节时，将返回一1。</td></tr><tr><td>read（byte[ ] b）</td><td>从输人流读取若干字节，把它们保存到参数b指定的字节数组中，返回的整数表示读取字节的数目。</td></tr><tr><td>read(byte [ ] b, int off ,int len )</td><td>读字节， off表示:起始下标 len： 字节数目。</td></tr><tr><td>close()</td><td>关闭流，释放资源。</td></tr></tbody></table><blockquote><p><strong>注意：</strong>I/O流会占用内存，所有得关闭流。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-282b0fa81e95d0c524f3cc2cc5d1fe84_b.jpg" alt="img"></p><p><strong>OutputStream常用方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>write()</td><td>向输出流写一个字节。</td></tr><tr><td>write(byte[ ] b)</td><td>将字节数组b写到输出流中。</td></tr><tr><td>write(byte[ ] b,int off, int len )</td><td>将字节数组b从off索引坐标位置长度为len写到输出流中。</td></tr><tr><td>flush()</td><td>刷新，并强制写到输入流中。</td></tr><tr><td>close()</td><td>关闭流，释放资源。</td></tr></tbody></table><p><img src="https://pic2.zhimg.com/v2-f9d8f0fa44b1978f5083b6fcd6862751_b.jpg" alt="img"></p><p><strong>2.2.字节流读写文件</strong></p><p>文件的读写：就是从一个文件中读取数据并将数据写到另一个文件中。</p><p><strong>FileInputSream</strong>为InputSream的子类，用于<strong>读取数据</strong>。因为读取数据是一个重复过程，要通过循环语句来实现数据的<strong>持续</strong>读取。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs swift"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  从该目录中读取数据</span><br><span class="hljs-comment"> * @throws Exception</span><br><span class="hljs-comment"> */</span><br>     <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> void <span class="hljs-type">Test01</span>() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>    <span class="hljs-type">FileInputStream</span> fileInputStream <span class="hljs-operator">=</span> new <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>workSpace<span class="hljs-subst">\\</span>mine-study<span class="hljs-subst">\\</span>JavaEE<span class="hljs-subst">\\</span>01-javaHello<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>main<span class="hljs-subst">\\</span>resources<span class="hljs-subst">\\</span>test.txt&quot;</span>);<br>    <span class="hljs-comment">//定义一个变量</span><br>    int b <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//通过循环语句达到持续读取</span><br>    <span class="hljs-keyword">while</span> ((b<span class="hljs-operator">=</span>fileInputStream.read())<span class="hljs-operator">!=-</span><span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type"><code class="language-hljs swift"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  从该目录中读取数据</span><br><span class="hljs-comment"> * @throws Exception</span><br><span class="hljs-comment"> */</span><br>     <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> void <span class="hljs-type">Test01</span>() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>    <span class="hljs-type">FileInputStream</span> fileInputStream <span class="hljs-operator">=</span> new <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>workSpace<span class="hljs-subst">\\</span>mine-study<span class="hljs-subst">\\</span>JavaEE<span class="hljs-subst">\\</span>01-javaHello<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>main<span class="hljs-subst">\\</span>resources<span class="hljs-subst">\\</span>test.txt&quot;</span>);<br>    <span class="hljs-comment">//定义一个变量</span><br>    int b <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//通过循环语句达到持续读取</span><br>    <span class="hljs-keyword">while</span> ((b<span class="hljs-operator">=</span>fileInputStream.read())<span class="hljs-operator">!=-</span><span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">System</span>.out.println(b);<br>    &#125;<br>    fileInputStream.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>我们得到结果是一些数字，那是因为读取时是以字节形式存在的，而这些<strong>数字对应了字节的ASCII码值</strong>。还需要注意在读取数据时的目录要是存在并可读的。<strong>返回-1</strong>是对的，read字节数组的时候，读到最后一个没有的时候就数组越界异常，-<strong>1就是不在数组的索引值范围内</strong>，所以开发人员就将它作为read完成后的返回值。</p></blockquote><p><strong>FileOutputSream</strong>为OutputStream的子类，用于<strong>写数据</strong>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从目录写数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> void <span class="hljs-type">Test02</span>() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>    <span class="hljs-comment">//创建文件输出流，并指定要写入的文件名</span><br>    <span class="hljs-type">FileOutputStream</span> fileOutputStream <span class="hljs-operator">=</span> new <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>workSpace<span class="hljs-subst">\\</span>mine-study<span class="hljs-subst">\\</span>JavaEE<span class="hljs-subst">\\</span>01-javaHello<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>main<span class="hljs-subst">\\</span>resources<span class="hljs-subst">\\</span>test.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//定义一个字符串</span><br>    <span class="hljs-type">String</span> s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-comment">//将字符串转化为字节数组进行写入操作</span><br>    fileOutputStream.write(s.getBytes());<br>    <span class="hljs-comment"><code class="language-hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从目录写数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> void <span class="hljs-type">Test02</span>() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>    <span class="hljs-comment">//创建文件输出流，并指定要写入的文件名</span><br>    <span class="hljs-type">FileOutputStream</span> fileOutputStream <span class="hljs-operator">=</span> new <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>workSpace<span class="hljs-subst">\\</span>mine-study<span class="hljs-subst">\\</span>JavaEE<span class="hljs-subst">\\</span>01-javaHello<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>main<span class="hljs-subst">\\</span>resources<span class="hljs-subst">\\</span>test.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//定义一个字符串</span><br>    <span class="hljs-type">String</span> s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-comment">//将字符串转化为字节数组进行写入操作</span><br>    fileOutputStream.write(s.getBytes());<br>    <span class="hljs-comment">//关闭流</span><br>    fileOutputStream.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>没有指定目录，就会自动创建一个该文件。而已存在的话，会<strong>先清空该文件内容，再将要写的数据写入</strong>。想要不被清除之前的数据，就在<strong>参数中写true</strong>即可。<br>如果出现io异常，是会影响关闭io流关闭，这样就会占用内存。通过使用<strong>finally将io流关闭</strong>。以保证无法关闭流。</p></blockquote><p><strong>2.3.文件的复制</strong></p><p>那文件的拷贝就是同时使用了两种流，一边读数据，一边写数据。就形成文件拷贝了。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现文件的复制</span><br><span class="hljs-comment"> */</span><br><br>@<span class="hljs-function">Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test03</span><span class="hljs-params">()</span> throws Exception </span>&#123;<br>    <span class="hljs-comment">//先读取文件</span><br>    FileInputStream fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;./TestFile01/01.gif&quot;</span>);<br>    <span class="hljs-comment">//写文件</span><br>    FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;./TestFile01/TestFile02&quot;</span>);<br>    <span class="hljs-comment">//定义一个变量</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> beforeTime = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>    <span class="hljs-comment">//通过循环持续读取</span><br>    <span class="hljs-keyword">while</span> ((len=fileInputStream.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br>        fileOutputStream.<span class="hljs-built_in">write</span>(len);<br>    &#125;<br>    <span class="hljs-keyword">long</span> afterTime = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>    <span class="hljs-keyword">long</span> l = afterTime - beforeTime;<br>    System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;花费时间：&quot;</span>+l);<br><br>    <span class="hljs-comment">//关闭流</span><br>    fileInputStream.<span class="hljs-built_in">close</span>();<br>    fileOutputStream.<span class="hljs-built_in"><code class="language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现文件的复制</span><br><span class="hljs-comment"> */</span><br><br>@<span class="hljs-function">Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test03</span><span class="hljs-params">()</span> throws Exception </span>&#123;<br>    <span class="hljs-comment">//先读取文件</span><br>    FileInputStream fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;./TestFile01/01.gif&quot;</span>);<br>    <span class="hljs-comment">//写文件</span><br>    FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;./TestFile01/TestFile02&quot;</span>);<br>    <span class="hljs-comment">//定义一个变量</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> beforeTime = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>    <span class="hljs-comment">//通过循环持续读取</span><br>    <span class="hljs-keyword">while</span> ((len=fileInputStream.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br>        fileOutputStream.<span class="hljs-built_in">write</span>(len);<br>    &#125;<br>    <span class="hljs-keyword">long</span> afterTime = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>    <span class="hljs-keyword">long</span> l = afterTime - beforeTime;<br>    System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;花费时间：&quot;</span>+l);<br><br>    <span class="hljs-comment">//关闭流</span><br>    fileInputStream.<span class="hljs-built_in">close</span>();<br>    fileOutputStream.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.4.字节流缓冲区</strong></p><p>如果一个字节一个字节进行读取、写入，效率低。为了提高效率，采用定义一个<strong>字节数组作为缓冲区</strong>。这样就可以一次性读取多个字节的数据。将数据先保存到字节数组，将一整个字节数组一次性写到要放入的位置。缓冲区主要还是暂存数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 使用缓冲区高效读写</span><br><span class="hljs-comment">  */</span><br> @Test<br> public void  <span class="hljs-constructor">Test04()</span> throws Exception &#123;<br>     <span class="hljs-comment">//先读取文件</span><br>     FileInputStream fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;./TestFile01/01.gif&quot;</span>)</span>;<br>     <span class="hljs-comment">//写文件</span><br>     FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;./TestFile01/TestFile02&quot;</span>)</span>;<br>     <span class="hljs-comment">//定义一个变量</span><br>     <span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">//定义一个长度为1024的字节数组作为缓冲区</span><br>     byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>     long beforeTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>     <span class="hljs-comment">//通过循环持续读取</span><br>     <span class="hljs-keyword">while</span> ((len=fileInputStream.read(<span class="hljs-built_in">bytes</span>))!=-<span class="hljs-number">1</span>)&#123;<br>         fileOutputStream.write(<span class="hljs-built_in">bytes</span>,<span class="hljs-number">0</span>,len);<br>     &#125;<br>     long afterTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>     long l = afterTime - beforeTime;<br>     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;花费时间：&quot;</span>+l);<br><br>     <span class="hljs-comment">//关闭流</span><br>     fileInputStream.close<span class="hljs-literal">()</span>;<br>     fileOutputStream.close<span class="hljs-literal"><code class="language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 使用缓冲区高效读写</span><br><span class="hljs-comment">  */</span><br> @Test<br> public void  <span class="hljs-constructor">Test04()</span> throws Exception &#123;<br>     <span class="hljs-comment">//先读取文件</span><br>     FileInputStream fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;./TestFile01/01.gif&quot;</span>)</span>;<br>     <span class="hljs-comment">//写文件</span><br>     FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;./TestFile01/TestFile02&quot;</span>)</span>;<br>     <span class="hljs-comment">//定义一个变量</span><br>     <span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">//定义一个长度为1024的字节数组作为缓冲区</span><br>     byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>     long beforeTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>     <span class="hljs-comment">//通过循环持续读取</span><br>     <span class="hljs-keyword">while</span> ((len=fileInputStream.read(<span class="hljs-built_in">bytes</span>))!=-<span class="hljs-number">1</span>)&#123;<br>         fileOutputStream.write(<span class="hljs-built_in">bytes</span>,<span class="hljs-number">0</span>,len);<br>     &#125;<br>     long afterTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>     long l = afterTime - beforeTime;<br>     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;花费时间：&quot;</span>+l);<br><br>     <span class="hljs-comment">//关闭流</span><br>     fileInputStream.close<span class="hljs-literal">()</span>;<br>     fileOutputStream.close<span class="hljs-literal">()</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>2.5.字节缓冲流</strong></p><p>字节缓冲流分为输入和输出：BufferedInputStream和BufferedOutputStream。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字节缓冲流</span><br><span class="hljs-comment"> */</span><br>@Test<br>public void <span class="hljs-constructor">Test05()</span> throws Exception&#123;<br>    <span class="hljs-comment">//创建用于输入（读）和输出（写）的字节缓冲流对象</span><br>    BufferedInputStream buffInS = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedInputStream(<span class="hljs-params">new</span> FileInputStream(<span class="hljs-string">&quot;./TestFile01/01.gif&quot;</span>)</span>);<br>    BufferedOutputStream buffOutS= <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedOutputStream(<span class="hljs-params">new</span> FileOutputStream(<span class="hljs-string">&quot;./TestFile01/TestFile02&quot;</span>)</span>);<br>    <span class="hljs-comment">//定义一个变量len</span><br>    <span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//获取系统时间</span><br>    long beforeTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-comment">// 通过循环持续读取和写</span><br>    <span class="hljs-keyword">while</span> ((buffInS.read<span class="hljs-literal">()</span>)!=-<span class="hljs-number">1</span>)&#123;<br>        buffOutS.write(len);<br>    &#125;<br>    long afterTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;所用时间：&quot;</span>+(afterTime - beforeTime));<br>    <span class="hljs-comment">//关闭流</span><br>    buffInS.close<span class="hljs-literal">()</span>;<br>    buffOutS.close<span class="hljs-literal"><code class="language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字节缓冲流</span><br><span class="hljs-comment"> */</span><br>@Test<br>public void <span class="hljs-constructor">Test05()</span> throws Exception&#123;<br>    <span class="hljs-comment">//创建用于输入（读）和输出（写）的字节缓冲流对象</span><br>    BufferedInputStream buffInS = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedInputStream(<span class="hljs-params">new</span> FileInputStream(<span class="hljs-string">&quot;./TestFile01/01.gif&quot;</span>)</span>);<br>    BufferedOutputStream buffOutS= <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedOutputStream(<span class="hljs-params">new</span> FileOutputStream(<span class="hljs-string">&quot;./TestFile01/TestFile02&quot;</span>)</span>);<br>    <span class="hljs-comment">//定义一个变量len</span><br>    <span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//获取系统时间</span><br>    long beforeTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-comment">// 通过循环持续读取和写</span><br>    <span class="hljs-keyword">while</span> ((buffInS.read<span class="hljs-literal">()</span>)!=-<span class="hljs-number">1</span>)&#123;<br>        buffOutS.write(len);<br>    &#125;<br>    long afterTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;所用时间：&quot;</span>+(afterTime - beforeTime));<br>    <span class="hljs-comment">//关闭流</span><br>    buffInS.close<span class="hljs-literal">()</span>;<br>    buffOutS.close<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>这两个缓冲流会在内部定义一个大小为<strong>8192</strong>的字节数组，通过读写将数据存到定义好的字节数组中。有效提高效率。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-8bf9d539b533c04508b272fe4e0d23a3_b.gif" alt="img"></p><h2 id="三、字符流"><a href="#三、字符流" class="headerlink" title="三、字符流"></a><strong>三、字符流</strong></h2><p><strong>3.1.字符流</strong></p><p>字符流拥有两个顶级的父类，<strong>Reader</strong>（字符输入流）和<strong>Writer</strong>（字符输出流）。</p><p><img src="https://pic4.zhimg.com/v2-3f7fb43f905b8637148864e39ea9af97_b.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/v2-3cf15e39b54bbdb6cc21f2b16de983e2_b.jpg" alt="img"></p><p><strong>3.2.字符流操作文件</strong></p><p>从文件中读取数据使用<strong>FileReader</strong>，注意要将int类型的len变量转换为char类型。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 字符流操作文件</span><br><span class="hljs-comment">  */</span><br><br> @<span class="hljs-function">Test</span><br><span class="hljs-function"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test06</span><span class="hljs-params">()</span> throws Exception </span>&#123;<br>    <span class="hljs-comment">//创建FileReader对象，并指定要读取的文件</span><br>     FileReader reader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileReader</span>(<span class="hljs-string">&quot;reader.txt&quot;</span>);<br>     <span class="hljs-comment">//定义一个变量</span><br>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">//通过循环区判断是否读取到文件末尾</span><br>     <span class="hljs-keyword">while</span> ((len= reader.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br>         System.out.<span class="hljs-built_in">println</span>((<span class="hljs-keyword">char</span>)len);<br>     &#125;<br>     reader.<span class="hljs-built_in"><code class="language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 字符流操作文件</span><br><span class="hljs-comment">  */</span><br><br> @<span class="hljs-function">Test</span><br><span class="hljs-function"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test06</span><span class="hljs-params">()</span> throws Exception </span>&#123;<br>    <span class="hljs-comment">//创建FileReader对象，并指定要读取的文件</span><br>     FileReader reader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileReader</span>(<span class="hljs-string">&quot;reader.txt&quot;</span>);<br>     <span class="hljs-comment">//定义一个变量</span><br>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">//通过循环区判断是否读取到文件末尾</span><br>     <span class="hljs-keyword">while</span> ((len= reader.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br>         System.out.<span class="hljs-built_in">println</span>((<span class="hljs-keyword">char</span>)len);<br>     &#125;<br>     reader.<span class="hljs-built_in">close</span>();<br> &#125;<br></code></pre></td></tr></table></figure><p>往文件中写数据使用<strong>FileWriter</strong>,注意文件不存在就会创建并写入数据，<strong>存在</strong>就<strong>清空当前文件内再直接写入数据</strong>。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 字符流写数据操作</span><br><span class="hljs-comment">  */</span><br> @<span class="hljs-function">Test</span><br><span class="hljs-function"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test07</span><span class="hljs-params">()</span> throws Exception </span>&#123;<br>     <span class="hljs-comment">//创建字符输出流FileWriter，向指定文件写数据</span><br>     FileWriter writer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileWriter</span>(<span class="hljs-string">&quot;reader.txt&quot;</span>);<br>     <span class="hljs-comment">//对象调用写方法</span><br>     writer.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;我的小雪最可爱&quot;</span>);<br>     <span class="hljs-comment">//关闭流</span><br>     writer.<span class="hljs-built_in"><code class="language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 字符流写数据操作</span><br><span class="hljs-comment">  */</span><br> @<span class="hljs-function">Test</span><br><span class="hljs-function"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test07</span><span class="hljs-params">()</span> throws Exception </span>&#123;<br>     <span class="hljs-comment">//创建字符输出流FileWriter，向指定文件写数据</span><br>     FileWriter writer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileWriter</span>(<span class="hljs-string">&quot;reader.txt&quot;</span>);<br>     <span class="hljs-comment">//对象调用写方法</span><br>     writer.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;我的小雪最可爱&quot;</span>);<br>     <span class="hljs-comment">//关闭流</span><br>     writer.<span class="hljs-built_in">close</span>();<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>3.3.转换流</strong></p><p>也就是字节流和字符流之间的转换，InputStreamReader(读-<strong>字节变成字符</strong>)、OutputStreamWriter(写-<strong>字节边字符</strong>)。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 转换流：字节变字符</span><br><span class="hljs-comment">  */</span><br> @Test<br> public void <span class="hljs-constructor">Test08()</span> throws Exception &#123;<br>     <span class="hljs-comment">//创建字节输入流对象，获取数据</span><br>     FileInputStream inputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;reader.txt&quot;</span>)</span>;<br>     <span class="hljs-comment">//将字节流转换字符流</span><br>     InputStreamReader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InputStreamReader(<span class="hljs-params">inputStream</span>)</span>;<br>     <span class="hljs-comment">//再变成缓冲流</span><br>     BufferedReader bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedReader(<span class="hljs-params">reader</span>)</span>;<br><br>     <span class="hljs-comment">//创建字节输入流</span><br>     FileOutputStream outputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;W.txt&quot;</span>,<span class="hljs-params">true</span>)</span>;<br>     <span class="hljs-comment">//将字节流转换字符流</span><br>     OutputStreamWriter writer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">OutputStreamWriter(<span class="hljs-params">outputStream</span>)</span>;<br>     <span class="hljs-comment">//再变成输入缓冲流</span><br>     BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedWriter(<span class="hljs-params">writer</span>)</span>;<br><br>     <span class="hljs-comment">//定义一个长度变量</span><br>     String len = null;<br>     <span class="hljs-comment">//通过持续读</span><br>     <span class="hljs-keyword">while</span> ((len=bufferedReader.read<span class="hljs-constructor">Line()</span>)!=null)&#123;<br>         <span class="hljs-comment">//写数据</span><br>         bufferedWriter.write(len);<br>         bufferedWriter.<span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>;<br>     &#125;<br>     <span class="hljs-comment">//关闭流</span><br>     bufferedReader.close<span class="hljs-literal">()</span>;<br>     bufferedWriter.close<span class="hljs-literal"><code class="language-hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 转换流：字节变字符</span><br><span class="hljs-comment">  */</span><br> @Test<br> public void <span class="hljs-constructor">Test08()</span> throws Exception &#123;<br>     <span class="hljs-comment">//创建字节输入流对象，获取数据</span><br>     FileInputStream inputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;reader.txt&quot;</span>)</span>;<br>     <span class="hljs-comment">//将字节流转换字符流</span><br>     InputStreamReader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InputStreamReader(<span class="hljs-params">inputStream</span>)</span>;<br>     <span class="hljs-comment">//再变成缓冲流</span><br>     BufferedReader bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedReader(<span class="hljs-params">reader</span>)</span>;<br><br>     <span class="hljs-comment">//创建字节输入流</span><br>     FileOutputStream outputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;W.txt&quot;</span>,<span class="hljs-params">true</span>)</span>;<br>     <span class="hljs-comment">//将字节流转换字符流</span><br>     OutputStreamWriter writer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">OutputStreamWriter(<span class="hljs-params">outputStream</span>)</span>;<br>     <span class="hljs-comment">//再变成输入缓冲流</span><br>     BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedWriter(<span class="hljs-params">writer</span>)</span>;<br><br>     <span class="hljs-comment">//定义一个长度变量</span><br>     String len = null;<br>     <span class="hljs-comment">//通过持续读</span><br>     <span class="hljs-keyword">while</span> ((len=bufferedReader.read<span class="hljs-constructor">Line()</span>)!=null)&#123;<br>         <span class="hljs-comment">//写数据</span><br>         bufferedWriter.write(len);<br>         bufferedWriter.<span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>;<br>     &#125;<br>     <span class="hljs-comment">//关闭流</span><br>     bufferedReader.close<span class="hljs-literal">()</span>;<br>     bufferedWriter.close<span class="hljs-literal">()</span>;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>使用转换流，只能针对操作文件的字节流进行转换。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-3ae4e06fe57f30d5aa0b1cc6aef03cc3_b.gif" alt="img"></p><h2 id="四、File类"><a href="#四、File类" class="headerlink" title="四、File类"></a><strong>四、File类</strong></h2><p>现在我们能操作文件中的数据，但是无法操作文件本身。于是提供了<strong>File类来操作文件</strong>。</p><p><strong>4.1.File类常用方法</strong></p><p><img src="https://pic1.zhimg.com/v2-36e4fa7c32f9e93731fde1d624969844_b.jpg" alt="img"></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs sas">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * File类的常用方法</span><br><span class="hljs-comment">     */</span><br>    @Test<br>    public void Test09() throws Exception &#123;<br>        //创建<span class="hljs-meta">File</span>文件、对象<br>        <span class="hljs-meta">File</span> <span class="hljs-meta">file</span> = new <span class="hljs-meta">File</span>(<span class="hljs-string">&quot;R.txt&quot;</span>);<br><br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件名：&quot;</span>+<span class="hljs-meta">file</span>.getName());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件绝对路径：&quot;</span>+<span class="hljs-meta">file</span>.getAbsoluteFile());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件相对路径：&quot;</span>+<span class="hljs-meta">file</span>.getPath());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件的父路径：&quot;</span>+<span class="hljs-meta">file</span>.getParent());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否可读：&quot;</span>+<span class="hljs-meta">file</span>.canRead());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否可写：&quot;</span>+<span class="hljs-meta">file</span>.canWrite());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否是文件：&quot;</span>+<span class="hljs-meta">file</span>.isFile());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否是是绝对路径：&quot;</span>+<span class="hljs-meta">file</span>.isAbsolute());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否是是一个目录：&quot;</span>+<span class="hljs-meta">file</span>.isDirectory());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件最后修改时间：&quot;</span>+<span class="hljs-meta">file</span>.lastModified());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件大小：&quot;</span>+<span class="hljs-meta">file</span><span class="hljs-meta">.length(</span>)+<span class="hljs-string">&quot;个字节&quot;</span>);<br>//      System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否删除成功：&quot;</span>+<span class="hljs-meta">file</span>.<span class="hljs-meta">delete</span>());<br><br>        Date date = new<span class="hljs-meta"> Date(</span><span class="hljs-meta">file</span>.lastModified());<br>        SimpleDateFormat sdf=new SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span>sdf.<span class="hljs-meta"><code class="language-hljs sas">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * File类的常用方法</span><br><span class="hljs-comment">     */</span><br>    @Test<br>    public void Test09() throws Exception &#123;<br>        //创建<span class="hljs-meta">File</span>文件、对象<br>        <span class="hljs-meta">File</span> <span class="hljs-meta">file</span> = new <span class="hljs-meta">File</span>(<span class="hljs-string">&quot;R.txt&quot;</span>);<br><br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件名：&quot;</span>+<span class="hljs-meta">file</span>.getName());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件绝对路径：&quot;</span>+<span class="hljs-meta">file</span>.getAbsoluteFile());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件相对路径：&quot;</span>+<span class="hljs-meta">file</span>.getPath());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;获取文件的父路径：&quot;</span>+<span class="hljs-meta">file</span>.getParent());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否可读：&quot;</span>+<span class="hljs-meta">file</span>.canRead());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否可写：&quot;</span>+<span class="hljs-meta">file</span>.canWrite());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否是文件：&quot;</span>+<span class="hljs-meta">file</span>.isFile());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否是是绝对路径：&quot;</span>+<span class="hljs-meta">file</span>.isAbsolute());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否是是一个目录：&quot;</span>+<span class="hljs-meta">file</span>.isDirectory());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件最后修改时间：&quot;</span>+<span class="hljs-meta">file</span>.lastModified());<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件大小：&quot;</span>+<span class="hljs-meta">file</span><span class="hljs-meta">.length(</span>)+<span class="hljs-string">&quot;个字节&quot;</span>);<br>//      System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;文件是否删除成功：&quot;</span>+<span class="hljs-meta">file</span>.<span class="hljs-meta">delete</span>());<br><br>        Date date = new<span class="hljs-meta"> Date(</span><span class="hljs-meta">file</span>.lastModified());<br>        SimpleDateFormat sdf=new SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span>sdf.<span class="hljs-meta">format</span>(date));<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>4.2.遍历目录下的文件</strong></p><p>File类中有一个<strong>list()<strong>方法用于遍历指定目录</strong>下</strong>的所有文件名称</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 遍历该目录下的文件名称</span><br><span class="hljs-comment">  */</span><br> @<span class="hljs-function">Test</span><br><span class="hljs-function"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test10</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-comment">//创建File对象，并指定文件名</span><br>     <span class="hljs-built_in">File</span> file = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello\\src\\main\\java\\com&quot;</span>);<br>     <span class="hljs-comment">//判断是否目录</span><br>     <span class="hljs-keyword">if</span> (file.<span class="hljs-built_in">isDirectory</span>())&#123;<br>         <span class="hljs-comment">//获取目录中所有的文件名称</span><br>         <span class="hljs-keyword">String</span>[] list = file.<span class="hljs-built_in">list</span>();<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> s : list) &#123;<br>             System.out.<span class="hljs-built_in"><code class="language-hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 遍历该目录下的文件名称</span><br><span class="hljs-comment">  */</span><br> @<span class="hljs-function">Test</span><br><span class="hljs-function"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test10</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-comment">//创建File对象，并指定文件名</span><br>     <span class="hljs-built_in">File</span> file = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello\\src\\main\\java\\com&quot;</span>);<br>     <span class="hljs-comment">//判断是否目录</span><br>     <span class="hljs-keyword">if</span> (file.<span class="hljs-built_in">isDirectory</span>())&#123;<br>         <span class="hljs-comment">//获取目录中所有的文件名称</span><br>         <span class="hljs-keyword">String</span>[] list = file.<span class="hljs-built_in">list</span>();<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> s : list) &#123;<br>             System.out.<span class="hljs-built_in">println</span>(s);<br>         &#125;<br>     &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure><p><strong>4.3.删除文件、目录</strong></p><p>操作文件时会经常删除某个文件或整个文件，使用**delete()**方法来实现。</p><p><img src="https://pic1.zhimg.com/v2-360a8ac131b2c3e7e71e63de0311fd68_b.gif" alt="img"></p><p><strong>五、RandomAccessFile</strong></p><p>**5.1.**RandomAccessFile可以将文件指定的操作权限的方式打开。</p><blockquote><p>可以随机从文件的任何位置开始执行读写数据的操作。RandomAccessFile不属于流。<br>之前的IO流都有一个共同的特点：都是按照数据的先后顺序向目标设备写入数据的。</p></blockquote><p>RandomAccessFile<strong>构造方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>RandomAccessFile(File file , String mode)</td><td>file是指定被访问的文件，mode是要指定访问模式</td></tr><tr><td>RandomAccessFile（String name，String mode）</td><td>name是被访问的文件路径，mode是要指定访问模式</td></tr></tbody></table><blockquote><p><strong>mode：</strong>1. r：表示只读模式打开文件 2. rw：读写模式打开文件<br>\3. rws：读写模式打开文件，相比要同步文件到底层存储设备中<br>\4. rwd：读写模式打开文件 ，相比每一个都要更新要到底层存储设备中</p></blockquote><p>RandomAccessFile内部采用<strong>记录指针</strong>来标识当前读写位置。</p><p><img src="https://pic1.zhimg.com/v2-02eb27eb834595be470c88ae458c82d0_b.gif" alt="img"></p><h2 id="六、对象序列化（Serializeable）"><a href="#六、对象序列化（Serializeable）" class="headerlink" title="六、对象序列化（Serializeable）"></a><strong>六、对象序列化（Serializeable）</strong></h2><p><strong>对象序列化能干什么？</strong></p><blockquote><p>将一些数据永远的保存到磁盘中，但是java中都用对象来保存数据。对象序列化则可以将对象中的数据保存到磁盘中。</p></blockquote><p><strong>对象的序列化：</strong>是指将java对象转换成I/O流中字节序列的过程。<strong>通过实现接口</strong></p><blockquote><p><strong>原理：</strong>对象序列化机制使Java对象转换成与平台无关的<strong>二进制流</strong>，将二进制流保存到磁盘，还可以通过网络将二进制流传输到另一个网络节点，也可以恢复原来的Java对象。也称为饭序列化。</p></blockquote><table><thead><tr><th>实现Serializable接口</th><th>实现Externalizable接口</th></tr></thead><tbody><tr><td>系统自动存储必要信息</td><td>自定义存储必要信息</td></tr><tr><td>性能差</td><td>性能好</td></tr></tbody></table><p><img src="https://pic4.zhimg.com/v2-ee3b143a27555505817ffc695ceeb883_b.gif" alt="img"></p><h2 id="七、NIO"><a href="#七、NIO" class="headerlink" title="七、NIO"></a><strong>七、NIO</strong></h2><p><strong>7.1.NIO是什么？</strong></p><p>NIO相比IO提供了不同工作方式，NIO采用<strong>内存映射文件</strong>的方式来处理输入输出，将文件或文件的一段区域映射到内存中，就可以访问内存一样访问文件。</p><blockquote><p>标准的I/O流中使用的是字节流和字符流，<strong>NIO中使用通道、缓冲器、选择器</strong>。<br>数据总会从通道读入缓冲区，再从缓冲区写到通道。</p></blockquote><p><strong>NIO的三大核心部分：</strong></p><ul><li><strong>Buffer（</strong>缓冲器<strong>）：</strong>就相当于一个暂时的容器，本质为数组缓冲区。一开始数据会先放缓冲区暂存，然后再放到通道里。</li><li><strong>Channel(<strong>通道</strong>)：</strong>跟之前的标准I/O一样，所有数据以通过通道流的形式进行传输。</li><li><strong>Selector(<strong>选择器</strong>)：</strong>用于监听多个通道中的事件(打开通道、数据到达、等)，主要作用多线程的处理。</li></ul><p><img src="https://pic3.zhimg.com/v2-20492f674a9f28d62331c63c4aca31f6_b.jpg" alt="img"></p><p><strong>7.2.Buffer(缓冲器)</strong></p><p>缓冲器会和通道进行交互，Buffer类似数组，将数据暂时存放。那么对于缓冲器就要三个概念</p><ol><li>**capacity(容量): **就是缓冲器能存放多少数据量，容量不能为0。</li><li><strong>limit(界限)：</strong>（索引0~limit）是可以进行读取操作，limit值不为负值。</li><li><strong>position(位置)：</strong>就是要进行读写操作的索引下标位置。默认为0，读写就移动位置。</li></ol><p><strong>7.3.Buffer常用方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>capacity()</td><td>获取缓冲区的大小</td></tr><tr><td>clear()</td><td>清除缓冲区，将位置设置为0，界限为容量</td></tr><tr><td>flip()</td><td>反转缓冲区，将界限设置为当前位置，再将位置设置为0</td></tr><tr><td>hasRemaining()</td><td>判断当前位置和界限是否有元素</td></tr><tr><td>limit</td><td>获取缓冲器的limit位置</td></tr><tr><td>limit(int newLimit)</td><td>设置limit值，返回新的缓冲区对象</td></tr><tr><td>mark()</td><td>设置标记</td></tr><tr><td>position()</td><td>获取position值</td></tr><tr><td>position(int newPosition)</td><td>设置position值，并返回被修改的对象</td></tr><tr><td>remaining()</td><td>获取当前位置和界限之间的元素个数</td></tr><tr><td>reset()</td><td>将缓冲区位置重置到标记处</td></tr><tr><td>rewind()</td><td>反缓冲区，将position设置为0，并取消标记</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test01()&#123;<br>    //创建CharBuffer对象，并指定缓冲区容量大小为<span class="hljs-number">6</span><br>    CharBuffer charBuffer = CharBuffer.allocate(<span class="hljs-number">6</span>);<br>    //展示容量、界限、位置<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;容量大小：&quot;+charBuffer.capacity());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;界限大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;位置大小：&quot;+charBuffer.position());<br><br>    //向缓冲区对象放入<span class="hljs-number">3</span>个元素<br>    charBuffer.put(<span class="hljs-string">&#x27;A&#x27;</span>);<br>    charBuffer.put(<span class="hljs-string">&#x27;C&#x27;</span>);<br>    charBuffer.put(<span class="hljs-string">&#x27;B&#x27;</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;放入元素后容量大小：&quot;+charBuffer.capacity());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;放入元素后界限大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;放入元素后位置大小：&quot;+charBuffer.position());<br><br>    //执行flip()方法<br>    charBuffer.flip();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反转缓冲区后容量大小：&quot;+charBuffer.capacity());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反转缓冲区界限大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反转缓冲区后位置大小：&quot;+charBuffer.position());<br><br>    //操作缓冲区<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;获取缓冲区第一个元素：&quot;+charBuffer.<span class="hljs-keyword">get</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;取出元素后索引大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;取出元素后位置大小：&quot;+charBuffer.position());<br><br>    //清除<br>    charBuffer.clear();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;取出元素后索引大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword"><code class="language-hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test01()&#123;<br>    //创建CharBuffer对象，并指定缓冲区容量大小为<span class="hljs-number">6</span><br>    CharBuffer charBuffer = CharBuffer.allocate(<span class="hljs-number">6</span>);<br>    //展示容量、界限、位置<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;容量大小：&quot;+charBuffer.capacity());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;界限大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;位置大小：&quot;+charBuffer.position());<br><br>    //向缓冲区对象放入<span class="hljs-number">3</span>个元素<br>    charBuffer.put(<span class="hljs-string">&#x27;A&#x27;</span>);<br>    charBuffer.put(<span class="hljs-string">&#x27;C&#x27;</span>);<br>    charBuffer.put(<span class="hljs-string">&#x27;B&#x27;</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;放入元素后容量大小：&quot;+charBuffer.capacity());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;放入元素后界限大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;放入元素后位置大小：&quot;+charBuffer.position());<br><br>    //执行flip()方法<br>    charBuffer.flip();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反转缓冲区后容量大小：&quot;+charBuffer.capacity());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反转缓冲区界限大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反转缓冲区后位置大小：&quot;+charBuffer.position());<br><br>    //操作缓冲区<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;获取缓冲区第一个元素：&quot;+charBuffer.<span class="hljs-keyword">get</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;取出元素后索引大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;取出元素后位置大小：&quot;+charBuffer.position());<br><br>    //清除<br>    charBuffer.clear();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;取出元素后索引大小：&quot;+charBuffer.<span class="hljs-keyword">limit</span>());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("取出元素后位置大小："+charBuffer.position());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>7.4.Channel(通道)</strong></p><p>通道是一个<strong>接口对象</strong>，通道可以<strong>异步</strong>执行IO读写、通道读写是<strong>双向</strong>的，io流通常为单向、通道可以直接将指定文件的部分或者全部直接<strong>映射为buffer</strong>、通道<strong>只能与buffer交互</strong>。</p><p>通过io中的<strong>getChannel()方法获取通道对象</strong></p><p>7.5.File工具类</p><p><strong>该接口用于文件系统中定位文件对象，通常表示一个依赖通过文件路径。</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>endsWith(String s)</td><td>判断当前这个路径是否以s字符串结尾</td></tr><tr><td>getName(int index)</td><td>通过index获取元素作为路径对象</td></tr><tr><td>getNameCount()</td><td>返回路径中元素的数量</td></tr><tr><td>getParent()</td><td>获取父路径，没有返回null</td></tr><tr><td>getRoot()</td><td>获取根路径作为路径对象</td></tr><tr><td>toAbsolutePath()</td><td>获取绝对路径作为路径对象</td></tr><tr><td>toUri()</td><td>获取路径的URI地址</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"> @Test<br><span class="hljs-built_in">public</span>  <span class="hljs-type">void</span> test02()&#123;<br>    //使用paths的<span class="hljs-keyword">get</span>（）方法创建<span class="hljs-type">path</span>对象<br>    <span class="hljs-keyword">Path</span> <span class="hljs-keyword">path</span> = Paths.<span class="hljs-keyword">get</span>(&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello\\R.txt&quot;);<br>    //输出<span class="hljs-type">path</span>对象信息<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;根路径：&quot;+<span class="hljs-type">path</span>.getRoot());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;父路径：&quot;+<span class="hljs-type">path</span>.getParent());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;路径名称数：&quot;+<span class="hljs-type">path</span>.getNameCount());<br>    //遍历出每一个路径名称<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-type">path</span>.getNameCount() ; i++) &#123;<br>        <span class="hljs-type">Path</span> <span class="hljs-type">name</span> = <span class="hljs-type">path</span>.getName(i);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;索引为：&quot;+i+&quot;的路径名称&quot;+<span class="hljs-type">name</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;URI路径：&quot;+<span class="hljs-type">path</span>.toUri());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;绝对路径：&quot;+<span class="hljs-type"><code class="language-hljs pgsql"> @Test<br><span class="hljs-built_in">public</span>  <span class="hljs-type">void</span> test02()&#123;<br>    //使用paths的<span class="hljs-keyword">get</span>（）方法创建<span class="hljs-type">path</span>对象<br>    <span class="hljs-keyword">Path</span> <span class="hljs-keyword">path</span> = Paths.<span class="hljs-keyword">get</span>(&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello\\R.txt&quot;);<br>    //输出<span class="hljs-type">path</span>对象信息<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;根路径：&quot;+<span class="hljs-type">path</span>.getRoot());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;父路径：&quot;+<span class="hljs-type">path</span>.getParent());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;路径名称数：&quot;+<span class="hljs-type">path</span>.getNameCount());<br>    //遍历出每一个路径名称<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-type">path</span>.getNameCount() ; i++) &#123;<br>        <span class="hljs-type">Path</span> <span class="hljs-type">name</span> = <span class="hljs-type">path</span>.getName(i);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;索引为：&quot;+i+&quot;的路径名称&quot;+<span class="hljs-type">name</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;URI路径：&quot;+<span class="hljs-type">path</span>.toUri());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;绝对路径：&quot;+<span class="hljs-type">path</span>.toAbsolutePath());<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>7.5.File工具类</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>createDirectories(path dir,FileAttribute&lt;?&gt; atts)</td><td>创建多级文件目录</td></tr><tr><td>createDirectories(path p,FileAttribute atts)</td><td>创建一个新的空文件p p存在则创建失败，atts为复制参数</td></tr><tr><td>copy(path s,path t ,CopyOtion c)</td><td>将一个文件s复制c到目标文件t</td></tr><tr><td>List<String> readAllLines(path p)</td><td>从文件p读取所有行</td></tr><tr><td>long size(Path p)</td><td>获取文件大小</td></tr><tr><td>Stream<Path> list(Path dir)</td><td>将指定路径转换为Stream流</td></tr><tr><td>path write(Path p,Iterable&lt;?extends CharSequence&gt; lines, OpenOtion o)</td><td>将文本行写入文件，并传入指定写入模式</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> @Test<br>public void <span class="hljs-constructor">Test03()</span> throws Exception &#123;<br>    <span class="hljs-comment">//定义一个目录路径的path对象</span><br>    Path dir = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Paths</span>.</span></span>get(<span class="hljs-string">&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello&quot;</span>);<br>    <span class="hljs-comment">//创建多级目录</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>create<span class="hljs-constructor">Directories(<span class="hljs-params">dir</span>)</span>;<br>    <span class="hljs-comment">//使用paths的get（）方法创建path对象</span><br>    Path path = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Paths</span>.</span></span>get(<span class="hljs-string">&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello\\t.txt&quot;</span>);<br>    <span class="hljs-comment">//创建一个文件</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>create<span class="hljs-constructor">File(<span class="hljs-params">path</span>)</span>);<br>    <span class="hljs-comment">//创建一个集合</span><br>    ArrayList&lt;String&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;测试文件&quot;</span>);<br><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>write(path,<span class="hljs-built_in">list</span>, StandardOpenOption.APPEND);<br><br>    List&lt;String&gt; lines = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllLines(<span class="hljs-params">path</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;文件大小：&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>size(path));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string"><code class="language-hljs reasonml"> @Test<br>public void <span class="hljs-constructor">Test03()</span> throws Exception &#123;<br>    <span class="hljs-comment">//定义一个目录路径的path对象</span><br>    Path dir = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Paths</span>.</span></span>get(<span class="hljs-string">&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello&quot;</span>);<br>    <span class="hljs-comment">//创建多级目录</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>create<span class="hljs-constructor">Directories(<span class="hljs-params">dir</span>)</span>;<br>    <span class="hljs-comment">//使用paths的get（）方法创建path对象</span><br>    Path path = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Paths</span>.</span></span>get(<span class="hljs-string">&quot;E:\\workSpace\\mine-study\\JavaEE\\01-javaHello\\t.txt&quot;</span>);<br>    <span class="hljs-comment">//创建一个文件</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>create<span class="hljs-constructor">File(<span class="hljs-params">path</span>)</span>);<br>    <span class="hljs-comment">//创建一个集合</span><br>    ArrayList&lt;String&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;测试文件&quot;</span>);<br><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>write(path,<span class="hljs-built_in">list</span>, StandardOpenOption.APPEND);<br><br>    List&lt;String&gt; lines = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllLines(<span class="hljs-params">path</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;文件大小：&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>size(path));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"文件内容："</span>+lines);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-ac88922f58c1c5a86c93cdd19b2bc476_b.gif" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五章、集合容器</title>
    <link href="/post/000c3540-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000c3540-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、集合容器的概述"><a href="#一、集合容器的概述" class="headerlink" title="一、集合容器的概述"></a>一、集合容器的概述</h2><p>1.1集合概述</p><p>​      集合就是一个类似容器，用来存储java对象（本质是对象的引用），这些对象可以是任意数据类型，并且长度可变。</p><p>​    集合按存储结构分为两大类：单例集合（Collection）和双列集合(Map)。</p><blockquote><p>Collection：是单列集合的根接口，最重要有两个子接口List和Set。List集合的特点：元素有序、元素可重复。List接口主要实现类有：ArrayList、LinkedList。 Set集合的特点：元素无须、元素不可重复。Set接口的主要实现类有：HashSet、TreeSet。Map：是双列集合的根接口，是以键值对（K-V）的形式映射元素。 一个元素就是一个键值对，并且K是唯一的，通过K找对应的V。 Map接口主要的实现类：HashMap、TreeMap。</p></blockquote><p><a href="https://baike.baidu.com/item/%E6%B3%9B%E5%9E%8B/4475207?fr=aladdin">泛型</a>：用于约束集合中储存元素的数据类型。</p><blockquote><p>ArrayList<E>中的E称为类型参数变量。ArrayList<Integer>中的Integer称为实际类型参数。整个称为ArrayList<E>泛型类型。整个ArrayList<Integer>称为参数化的类型ParameterizedType。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-479be8d601e112af9d74a7fc32fd2edd_b.png" alt="img"></p><p>集合框架</p><p><img src="https://pic3.zhimg.com/v2-51b4ed3904880d617d0e032796e43122_b.png" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-ad6e13f47c6007db12ec84a0c5fb217c_b.gif" alt="img"></p><h2 id="二、Collection接口"><a href="#二、Collection接口" class="headerlink" title="二、Collection接口"></a>二、Collection接口</h2><p>2.1.Collection接口中的方法</p><p><img src="https://pic4.zhimg.com/v2-f567c1d2ca0dc3fc1431feb57a21550f_b.png" alt="img"></p><blockquote><p>注意：stream()方法是JDK8新增加的，用于对集合元素进行聚合操作。聚合操作：是Java8的新特性，配合Lambda表达式和方法引用，支持以函数式风格操作集合对象或者并行运算。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-e238547888e8599ae26438e2241ef94f_b.gif" alt="img"></p><p>三、List接口</p><p>3.1.List接口的解释</p><p> List接口的对象称为List集合，元素允许重复，有序（存入和取出顺序一致）。</p><p>以下是List集合常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add（int index，Object o）</td><td>将元素o放入List集合的指定索引位置</td></tr><tr><td>addAll（int index，Collection c）</td><td>将c包含的所有元素放入List集合的指定索引位置</td></tr><tr><td>get（int index）</td><td>获取List集合中指定索引位置的元素</td></tr><tr><td>remove（int index）</td><td>删除List集合中指定索引位置的元素</td></tr><tr><td>set（int index，Object o）</td><td>将List集合中的指定索引位置的元素替换为o</td></tr><tr><td>indexOf（Object o）</td><td>返回o第一次出现在List集合中的的索引位置</td></tr><tr><td>lastIndexOf（Object o）</td><td>返回o最后出现在List集合中的的索引位置</td></tr><tr><td>subList(int fromIndex,int toIndex)</td><td>将fromIndex到toIndex的所以位置的元素变成一个List集合</td></tr><tr><td>toArray（）</td><td>将集合转换为数组</td></tr><tr><td>sort(Comparator&lt;? super E&gt; c)</td><td>将指定比较器对集合进行排序</td></tr></tbody></table><blockquote><p>注意：sort(Comparator&lt;? super E&gt; c)也是JDK8新增的。</p></blockquote><p>3.2.ArrayList集合</p><p> ArrayList是List接口的一个实现类，ArrayList内部封装长度可变数组对象，当元素个数超过数组长度，则内部分配一个更大的数组来存储。 ArrayList内部以数组的存储结构，在增加或删除元素会增加新数组，导致效率相对低。但是对于查询和遍历却快，可以通过索引快速定位。而ArrayList集合继承了List和Collection的方法。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql">ArraryList集合格式：<br> <br>   创建·集合：   ArraryList&lt;string&gt;   集合名  =  <span class="hljs-built_in">new</span>  ArraryList&lt;string&gt;  ( )；<br><br>   集合方法：        <span class="hljs-number">1.</span>集合名.  remove   （删除指定元素、返回类型是否成功）<br>                     <span class="hljs-number">2.</span>集合名.remove（索引位置）  （删除指定索引的元素、返回被删除的元素）<br>                     <span class="hljs-number">3.</span>集合名.<span class="hljs-keyword">set</span>（索引位置，修改内容）  （修改指定索引的元素、返回被修改的元素）<br>                     <span class="hljs-number">4.</span>集合名.<span class="hljs-keyword">get</span> （索引位置）   （获取索引的元素）<br>                     <span class="hljs-number">5.</span>集合名.size（ ）    （获取集合元素个度）<br>                     <span class="hljs-number">6.</span>集合名.<span class="hljs-keyword">add</span>（ ）     （添加元素到末尾）<br>                     <span class="hljs-number">7.</span>集合名.<span class="hljs-keyword">add</span>（索引位置，内容）   （指定插入索引位置）<br><br>      ex：    ArrayList&lt;String&gt; <span class="hljs-keyword">array</span> = <span class="hljs-built_in">new</span> ArrayList&lt;String&gt;();<br>                            <span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(&quot;hello&quot;);<br>                            <span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(&quot;world&quot;);<br>                            <span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(&quot;java&quot;);<br>              <span class="hljs-number">1.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.remove(&quot;world&quot;));<br>              <span class="hljs-number">2.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.remove(<span class="hljs-number">1</span>));<br>              <span class="hljs-number">3.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.<span class="hljs-keyword">set</span>(<span class="hljs-number">1</span>,&quot;javaee&quot;));<br>              <span class="hljs-number">4.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>));<br>              <span class="hljs-number">5.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.size());<br>              <span class="hljs-number">7.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(<span class="hljs-number"><code class="language-hljs pgsql">ArraryList集合格式：<br> <br>   创建·集合：   ArraryList&lt;string&gt;   集合名  =  <span class="hljs-built_in">new</span>  ArraryList&lt;string&gt;  ( )；<br><br>   集合方法：        <span class="hljs-number">1.</span>集合名.  remove   （删除指定元素、返回类型是否成功）<br>                     <span class="hljs-number">2.</span>集合名.remove（索引位置）  （删除指定索引的元素、返回被删除的元素）<br>                     <span class="hljs-number">3.</span>集合名.<span class="hljs-keyword">set</span>（索引位置，修改内容）  （修改指定索引的元素、返回被修改的元素）<br>                     <span class="hljs-number">4.</span>集合名.<span class="hljs-keyword">get</span> （索引位置）   （获取索引的元素）<br>                     <span class="hljs-number">5.</span>集合名.size（ ）    （获取集合元素个度）<br>                     <span class="hljs-number">6.</span>集合名.<span class="hljs-keyword">add</span>（ ）     （添加元素到末尾）<br>                     <span class="hljs-number">7.</span>集合名.<span class="hljs-keyword">add</span>（索引位置，内容）   （指定插入索引位置）<br><br>      ex：    ArrayList&lt;String&gt; <span class="hljs-keyword">array</span> = <span class="hljs-built_in">new</span> ArrayList&lt;String&gt;();<br>                            <span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(&quot;hello&quot;);<br>                            <span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(&quot;world&quot;);<br>                            <span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(&quot;java&quot;);<br>              <span class="hljs-number">1.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.remove(&quot;world&quot;));<br>              <span class="hljs-number">2.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.remove(<span class="hljs-number">1</span>));<br>              <span class="hljs-number">3.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.<span class="hljs-keyword">set</span>(<span class="hljs-number">1</span>,&quot;javaee&quot;));<br>              <span class="hljs-number">4.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>));<br>              <span class="hljs-number">5.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.size());<br>              <span class="hljs-number">7.</span>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">array</span>.<span class="hljs-keyword">add</span>(<span class="hljs-number">0</span>，"world"););<br></code></pre></td></tr></table></figure><p>3.3.LinkedList集合</p><p>​       ArrayList集合查询快，但是增加删除就慢。那么解决这个问题便可以使用LinkedList实现类。该集合内部包含2个Node类型节点：first和last属性去为维护一个双向循环链表，元素只要记住它自己前面和后面是谁就可以将所有元素连接起来。在放入新元素时，就改变了谁连我了的状态。所以LinkedList对于元素的增删操作效率高。</p><p>​       以下是LinkedList集合方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add（int index, E e）</td><td>将e元素放入指定索引位置</td></tr><tr><td>addFirst(Object o)</td><td>将o元素放入集合第一位</td></tr><tr><td>addLast(Object o)</td><td>将o元素放入集合最后一位</td></tr><tr><td>getFirst()</td><td>获取集合第一位元素</td></tr><tr><td>getLast()</td><td>获取集合最后一位元素</td></tr><tr><td>removeFirst()</td><td>删除并返回集合第一位元素</td></tr><tr><td>removeLast()</td><td>删除并返回集合最后一位元素</td></tr><tr><td>offer(Object o)</td><td>添加o元素到集合结尾</td></tr><tr><td>offerFirst(Objcet o)</td><td>添加o元素到集合开头</td></tr><tr><td>offerLast(Object o)</td><td>添加o元素到集合结尾</td></tr><tr><td>peek()</td><td>获取集合第一位元素</td></tr><tr><td>peekFirst()</td><td>获取集合第一位元素</td></tr><tr><td>peekLast()</td><td>获取集合最后一位元素</td></tr><tr><td>poll()</td><td>删除并返回集合第一位元素</td></tr><tr><td>pollFirst()</td><td>删除并返回集合第一位元素</td></tr><tr><td>pollLast()</td><td>删除并返回集合最后一位元素</td></tr><tr><td>push(Object o)</td><td>添加o元素到集合开头</td></tr><tr><td>pop()</td><td>删除并返回集合第一位元素</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">       <span class="hljs-comment">//1.创建一个LinkedList对象</span><br>        LinkedList&lt;String&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">//2.添加首尾</span><br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;柳岩&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;马蓉&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;王宝强&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;宋吉吉&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;李小璐&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;贾乃亮&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;PGOne&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;岳云鹏&quot;</span>)</span>;<br>        <span class="hljs-comment">//3.打印</span><br>        <span class="hljs-comment">//&quot;岳云鹏&quot; &quot;贾乃亮&quot; &quot;宋吉吉&quot; &quot;马蓉&quot; &quot;柳岩&quot; &quot;王宝强&quot; &quot;李小璐&quot; &quot;PGOne&quot;</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        <span class="hljs-comment">//4.获取首尾</span><br>        String first = <span class="hljs-built_in">list</span>.get<span class="hljs-constructor">First()</span>;<br>        String last = <span class="hljs-built_in">list</span>.get<span class="hljs-constructor">Last()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(first);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(last);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        <span class="hljs-comment">//5.删除首尾</span><br>        String removeFirst = <span class="hljs-built_in">list</span>.remove<span class="hljs-constructor">First()</span>;<br>        String removeLast = <span class="hljs-built_in">list</span>.remove<span class="hljs-constructor">Last()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(removeFirst);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(removeLast);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        <span class="hljs-comment">//[贾乃亮, 宋吉吉, 马蓉, 柳岩, 王宝强, 李小璐]</span><br>        <span class="hljs-comment">//6.push和pop</span><br>        <span class="hljs-built_in">list</span>.push(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        String pop = <span class="hljs-built_in">list</span>.pop<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(pop);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>    &#125;<br><span class="hljs-comment"><code class="language-hljs reasonml">       <span class="hljs-comment">//1.创建一个LinkedList对象</span><br>        LinkedList&lt;String&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">//2.添加首尾</span><br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;柳岩&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;马蓉&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;王宝强&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;宋吉吉&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;李小璐&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;贾乃亮&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">Last(<span class="hljs-string">&quot;PGOne&quot;</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add<span class="hljs-constructor">First(<span class="hljs-string">&quot;岳云鹏&quot;</span>)</span>;<br>        <span class="hljs-comment">//3.打印</span><br>        <span class="hljs-comment">//&quot;岳云鹏&quot; &quot;贾乃亮&quot; &quot;宋吉吉&quot; &quot;马蓉&quot; &quot;柳岩&quot; &quot;王宝强&quot; &quot;李小璐&quot; &quot;PGOne&quot;</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        <span class="hljs-comment">//4.获取首尾</span><br>        String first = <span class="hljs-built_in">list</span>.get<span class="hljs-constructor">First()</span>;<br>        String last = <span class="hljs-built_in">list</span>.get<span class="hljs-constructor">Last()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(first);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(last);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        <span class="hljs-comment">//5.删除首尾</span><br>        String removeFirst = <span class="hljs-built_in">list</span>.remove<span class="hljs-constructor">First()</span>;<br>        String removeLast = <span class="hljs-built_in">list</span>.remove<span class="hljs-constructor">Last()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(removeFirst);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(removeLast);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        <span class="hljs-comment">//[贾乃亮, 宋吉吉, 马蓉, 柳岩, 王宝强, 李小璐]</span><br>        <span class="hljs-comment">//6.push和pop</span><br>        <span class="hljs-built_in">list</span>.push(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>        String pop = <span class="hljs-built_in">list</span>.pop<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(pop);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>    &#125;<br><span class="hljs-comment">//姓名仅使用，无任何意思</span><br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-cb763da25cebab72649dd994015e5935_b.gif" alt="img"></p><h2 id="四、Collection集合遍历"><a href="#四、Collection集合遍历" class="headerlink" title="四、Collection集合遍历"></a>四、Collection集合遍历</h2><p>4.1.Iterator遍历集合</p><p>Iterator接口主要用于迭代访问（遍历）Collection元素，也称Iterator对象为迭代器。</p><p>原理：迭代器在遍历集合时，内部采用指针方式来跟踪集合中的元素，在调用next（）方法之前，迭代器的索引在第一个元素之前（一开始就没有指向元素），当调用next（）方法迭代器的索引就往后移动一位，直到最后hasNext()返回flase，没有元素结束。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs processing">   <span class="hljs-comment">//1.创建一个集合</span><br>    Collection&lt;<span class="hljs-keyword">String</span>&gt; cc = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>    <span class="hljs-comment">//2.增删  改查</span><br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;marry&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jerry&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br>    <span class="hljs-comment">//3.使用迭代器遍历集合</span><br>    <span class="hljs-comment">//a.获取集合的迭代器</span><br>    Iterator&lt;<span class="hljs-keyword">String</span>&gt; it = cc.iterator();<br>    <span class="hljs-comment">//b.使用循环,先问后取</span><br>    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>        <span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = it.next();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in"><code class="language-hljs processing">   <span class="hljs-comment">//1.创建一个集合</span><br>    Collection&lt;<span class="hljs-keyword">String</span>&gt; cc = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>    <span class="hljs-comment">//2.增删  改查</span><br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;marry&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jerry&quot;</span>);<br>    cc.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br>    <span class="hljs-comment">//3.使用迭代器遍历集合</span><br>    <span class="hljs-comment">//a.获取集合的迭代器</span><br>    Iterator&lt;<span class="hljs-keyword">String</span>&gt; it = cc.iterator();<br>    <span class="hljs-comment">//b.使用循环,先问后取</span><br>    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>        <span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = it.next();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   迭代器的注意事项(2个异常):</p><blockquote><p>a.NoSuchElementException  没有此元素异常 。原因:当迭代器的hasNext方法返回false后,依然调用next方法。b.ConcurrentModificationException 并发修改异常。原因:在迭代器的遍历过程中,对象集合中元素进行增删操作。</p></blockquote><p>   总结:迭代器的作用就是单纯的遍历</p><p>4.2.foreach遍历集合</p><p>forearch循环是一种更加简洁的for循环，又称增强for循环。用于遍历数组或集合中的元素。</p><p>原理：所有工作都将交给JVM执行，循环次数是由容器中的元素的个数决定的，每次循环foreach都通过变量将当前循环的元素记住，再遍历出来。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs processing"> 语法格式： <br>            <span class="hljs-keyword">for</span>（元素数据类型 , 新变量名：容器变量名）&#123;<br>                    <span class="hljs-comment">//执行语句</span><br>          &#125;<br><br>-----------------------------------------------------------------------------------------<br><br>        <span class="hljs-comment">//1.使用增强for循环,集合</span><br>        ArrayList&lt;<span class="hljs-keyword">String</span>&gt; arr = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack1&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack2&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack3&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack4&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack5&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> : arr) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.使用增强for循环,数组</span><br>        <span class="hljs-built_in">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> num : nums) &#123;<br>            sum += num;<br>        &#125;<br>        System.out.<span class="hljs-built_in"><code class="language-hljs processing"> 语法格式： <br>            <span class="hljs-keyword">for</span>（元素数据类型 , 新变量名：容器变量名）&#123;<br>                    <span class="hljs-comment">//执行语句</span><br>          &#125;<br><br>-----------------------------------------------------------------------------------------<br><br>        <span class="hljs-comment">//1.使用增强for循环,集合</span><br>        ArrayList&lt;<span class="hljs-keyword">String</span>&gt; arr = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack1&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack2&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack3&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack4&quot;</span>);<br>        arr.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack5&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> : arr) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.使用增强for循环,数组</span><br>        <span class="hljs-built_in">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> num : nums) &#123;<br>            sum += num;<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(sum);<br>    &#125;<br></code></pre></td></tr></table></figure><p>4.3.JKD8的forEach遍历</p><p>根据Lambada表达式特性还增加forEach遍历集合，该方法需要一个参数是一个函数式接口。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> <span class="hljs-comment">//创建一个ArrayList集合</span><br>ArrayList <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ArrayList()</span>;<br> <span class="hljs-comment">//添加元素</span><br> <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;1&quot;</span>);<br> <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;2&quot;</span>);<br> <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;3&quot;</span>);<br><br> <span class="hljs-comment">//使用JDK8增加的forEach</span><br> <span class="hljs-built_in">list</span>.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">obj</span>-&gt;System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-string"><code class="language-hljs reasonml"> <span class="hljs-comment">//创建一个ArrayList集合</span><br>ArrayList <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ArrayList()</span>;<br> <span class="hljs-comment">//添加元素</span><br> <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;1&quot;</span>);<br> <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;2&quot;</span>);<br> <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;3&quot;</span>);<br><br> <span class="hljs-comment">//使用JDK8增加的forEach</span><br> <span class="hljs-built_in">list</span>.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">obj</span>-&gt;System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-string">"遍历结果："</span>)</span>+obj);<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-360a8ac131b2c3e7e71e63de0311fd68_b.gif" alt="img"></p><h2 id="五、Set接口"><a href="#五、Set接口" class="headerlink" title="五、Set接口"></a>五、Set接口</h2><p>5.1.Set接口介绍</p><p>Set接口是继承Collection接口的，其特点元素无序、元素不重复。Set主要有2个实现类：HashSet和TreeSet。 HashSet通过对象的哈希值来获取元素在集合中的位置，所有存储和查询效率高。 TreeSet通过二叉树来存储元素，实现元素排序。</p><p>5.2.HashSet集合</p><p>特点：元素不可重复，元素无序，无索引。</p><p>原理：向HashSet添加元素数据时，会调用该元素的hashCode方法来确定元素的位置，再调用元素的equals方法来保证该位置没有重复的元素。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs processing"><span class="hljs-comment">//1.创建HashSet对象</span><br>HashSet&lt;<span class="hljs-keyword">String</span>&gt; <span class="hljs-built_in">set</span> = <span class="hljs-keyword">new</span> HashSet&lt;<span class="hljs-keyword">String</span>&gt;();<br><span class="hljs-comment">//2.添加</span><br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;marry&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;marry&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br><span class="hljs-comment">//3.打印</span><br><span class="hljs-comment">//[tom, james, marry, rose, jack]</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in"><code class="language-hljs processing"><span class="hljs-comment">//1.创建HashSet对象</span><br>HashSet&lt;<span class="hljs-keyword">String</span>&gt; <span class="hljs-built_in">set</span> = <span class="hljs-keyword">new</span> HashSet&lt;<span class="hljs-keyword">String</span>&gt;();<br><span class="hljs-comment">//2.添加</span><br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;marry&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;marry&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;james&quot;</span>);<br><span class="hljs-comment">//3.打印</span><br><span class="hljs-comment">//[tom, james, marry, rose, jack]</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">set</span>);<br></code></pre></td></tr></table></figure><p>注意：哈希表结构如何保证元素的唯一性?</p><blockquote><p>哈希表底层先比较两个元素的哈希值,再调用equals方法, 只有哈希值相同,并且equals结果是true,才判断重复,不添加。</p></blockquote><p> 5.3.TreeSet集合</p><p>内部采用平衡二叉树来存储元素，能保证TreeSet集合中没有重复的元素，并可对元素进行排序。 二叉树就是每个节点最多只有2个子节点的有序树。</p><p>以下是TreeSet特有的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>first()</td><td>返回集合第一个元素</td></tr><tr><td>last()</td><td>返回集合最后一个元素</td></tr><tr><td>lower(Object o)</td><td>返回集合中小于o的最大值，无就返回null</td></tr><tr><td>floor(Object o)</td><td>返回集合中小于或等于o的最大值，无就返回null</td></tr><tr><td>higher(Object o)</td><td>返回集合中大于o的最大值，无就返回null</td></tr><tr><td>ceiling(Object o)</td><td>返回集合中大于或等于o的最大值，无就返回null</td></tr><tr><td>pollFirst()</td><td>删除集合第一个元素</td></tr><tr><td>pollLast()</td><td>删除集合最后一个元素</td></tr></tbody></table><p>原理：TreeSet集合添加元素时，不论添加顺序，元素还是按一定顺序排列。这是因为添加元素时会将该元素于其他元素比较，再将该元素放入有序对象序列中。比较时会调用compareTo()方法，而该方法由接口Comparable定义。</p><p>TreeSet有2种排序规则来解决：无法存储自定义的数据类型的数据。</p><p>1.自然排序：（默认采用）</p><p>自然排序所要存储的类必须实现Comparable接口，重写compareTo()方法，使用compareTo()方法进行比较，默认为升序排序。</p><p>2.定制排序</p><p>对于没有实现Comparable接口，重写compareTo()方法。而是希望集合中的字符串按照长度来进行排序那怎么办？那就定制自己的比较器，自定义的比较器先实现Comparator接口，重写compare方法。</p><p>扩展:Comparator<T>比较器排序接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs csharp"><span class="hljs-comment">//1.Collections的sort方法进行升排序</span><br>    ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>    <span class="hljs-comment">//2.添加</span><br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">4</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">7</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">6</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">10</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">3</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">8</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">9</span>);<br>    <span class="hljs-comment">//3.打印</span><br>    System.<span class="hljs-keyword">out</span>.println(arr);<br>    <span class="hljs-comment">//4.使用sort的重载方法(带有Comparator的那个方法)</span><br>    Collections.sort(arr, <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>        <span class="hljs-comment">//此方式就是比较两个元素的方法</span><br>        <span class="hljs-comment">//该方法的返回值有三种可能</span><br>        <span class="hljs-comment">//a.正数 代表 o1 &gt; o2</span><br>        <span class="hljs-comment">//b.0  代表 o1 = o2</span><br>        <span class="hljs-comment">//c.负数 代表 o1 &lt; o2</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">compare</span>(<span class="hljs-params">Integer o1, Integer o2</span>)</span> &#123;<br>            <span class="hljs-comment">//口诀: 升序 前-后</span><br>            <span class="hljs-keyword">return</span> o2-o1;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//5.打印</span><br>    System.<span class="hljs-keyword"><code class="language-hljs csharp"><span class="hljs-comment">//1.Collections的sort方法进行升排序</span><br>    ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>    <span class="hljs-comment">//2.添加</span><br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">4</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">7</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">6</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">10</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">3</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">8</span>);<br>    arr.<span class="hljs-keyword">add</span>(<span class="hljs-number">9</span>);<br>    <span class="hljs-comment">//3.打印</span><br>    System.<span class="hljs-keyword">out</span>.println(arr);<br>    <span class="hljs-comment">//4.使用sort的重载方法(带有Comparator的那个方法)</span><br>    Collections.sort(arr, <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>        <span class="hljs-comment">//此方式就是比较两个元素的方法</span><br>        <span class="hljs-comment">//该方法的返回值有三种可能</span><br>        <span class="hljs-comment">//a.正数 代表 o1 &gt; o2</span><br>        <span class="hljs-comment">//b.0  代表 o1 = o2</span><br>        <span class="hljs-comment">//c.负数 代表 o1 &lt; o2</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">compare</span>(<span class="hljs-params">Integer o1, Integer o2</span>)</span> &#123;<br>            <span class="hljs-comment">//口诀: 升序 前-后</span><br>            <span class="hljs-keyword">return</span> o2-o1;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//5.打印</span><br>    System.<span class="hljs-keyword">out</span>.println(arr);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-945055e8a7499f6bf20b28df1d8988b9_b.gif" alt="img"></p><h2 id="六、Map接口"><a href="#六、Map接口" class="headerlink" title="六、Map接口"></a>六、Map接口</h2><p>Map双列集合：它的每一个元素都是键值对（K-V）,一个key对应一个value。key唯一，可以是任意数据类型。通过key就能获取value。</p><p>以下是Map的常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>put(Object k,Object v)</td><td>向集合添加键值对元素（k-v）</td></tr><tr><td>size（）</td><td>返回键值对个数</td></tr><tr><td>get（Object k）</td><td>返回k所对应的v值，没有就给返回null</td></tr><tr><td>containsKey（Object k）</td><td>是否包含k</td></tr><tr><td>containsValue（Object v）</td><td>是否包含v</td></tr><tr><td>remove（Object k）</td><td>删除k对应的v值</td></tr><tr><td>clear（）</td><td>清空集合元素</td></tr><tr><td>KeySet（）</td><td>返回所有的Key</td></tr><tr><td>values（）</td><td>获取所有的value</td></tr><tr><td>&lt;Map.Entry&lt;Key,Value&gt;&gt; entrySet()</td><td>将Map集合转换为存储类型元素</td></tr><tr><td>getOrDefault（Object k，Object v）</td><td>返回Map集合指定k所对应的v，无就返回null</td></tr><tr><td>forEach（BiConsumer b）</td><td>对Map集合遍历，b为函数式接口</td></tr><tr><td>putIfAbsent(Object k, object v)</td><td>添加指定的键值对</td></tr><tr><td>remove（Object k，Object v）</td><td>删除指定键值对</td></tr><tr><td>replace（Object k， Object v）</td><td>修改指定k对应的v</td></tr></tbody></table><p>Map的两种遍历方式：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class=" language-hljs lasso"><span class="hljs-built_in">Map</span>的遍历方式一:以键找值方式<br><br>       <span class="hljs-comment">//1.创建一个Map</span><br>        HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;();<br><br>        <span class="hljs-comment">//2.添加 put</span><br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">1888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">6888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;爱疯&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;三星&quot;</span>, <span class="hljs-number">888</span>);<br>        <span class="hljs-comment">//3.使用以键找值方式遍历</span><br>        <span class="hljs-comment">//a.获取所有的键的集合</span><br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; keys = <span class="hljs-built_in">map</span>.keySet();<br>        <span class="hljs-comment">//b.遍历keys,迭代器,foreach</span><br>        for (<span class="hljs-built_in">String</span> key : keys) &#123;<br>            <span class="hljs-comment">//c.以键找值</span><br>            <span class="hljs-built_in">Integer</span> value = <span class="hljs-built_in">map</span>.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-built_in">Map</span>的遍历方式二:键值对方式<br><br>       <span class="hljs-comment">//1.创建一个Map</span><br>        HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;();<br>        <span class="hljs-comment">//2.添加 put</span><br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">1888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">6888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;爱疯&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;三星&quot;</span>, <span class="hljs-number">888</span>);<br>        <span class="hljs-comment">//3.使用键值对方式遍历集合</span><br>        <span class="hljs-comment">//a.获取所有键值对的集合</span><br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;&gt; entries = <span class="hljs-built_in">map</span>.entrySet();<br>        <span class="hljs-comment">//b.遍历entries集合,迭代器,foreach</span><br>        for (<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; entry : entries) &#123;<br>            <span class="hljs-comment">//c.获取entry中键和值</span><br>            <span class="hljs-built_in">String</span> key = entry.getKey();<br>            <span class="hljs-built_in">Integer</span> value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string"><code class="language-hljs lasso"><span class="hljs-built_in">Map</span>的遍历方式一:以键找值方式<br><br>       <span class="hljs-comment">//1.创建一个Map</span><br>        HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;();<br><br>        <span class="hljs-comment">//2.添加 put</span><br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">1888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">6888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;爱疯&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;三星&quot;</span>, <span class="hljs-number">888</span>);<br>        <span class="hljs-comment">//3.使用以键找值方式遍历</span><br>        <span class="hljs-comment">//a.获取所有的键的集合</span><br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; keys = <span class="hljs-built_in">map</span>.keySet();<br>        <span class="hljs-comment">//b.遍历keys,迭代器,foreach</span><br>        for (<span class="hljs-built_in">String</span> key : keys) &#123;<br>            <span class="hljs-comment">//c.以键找值</span><br>            <span class="hljs-built_in">Integer</span> value = <span class="hljs-built_in">map</span>.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-built_in">Map</span>的遍历方式二:键值对方式<br><br>       <span class="hljs-comment">//1.创建一个Map</span><br>        HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;();<br>        <span class="hljs-comment">//2.添加 put</span><br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">1888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">6888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;爱疯&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;三星&quot;</span>, <span class="hljs-number">888</span>);<br>        <span class="hljs-comment">//3.使用键值对方式遍历集合</span><br>        <span class="hljs-comment">//a.获取所有键值对的集合</span><br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;&gt; entries = <span class="hljs-built_in">map</span>.entrySet();<br>        <span class="hljs-comment">//b.遍历entries集合,迭代器,foreach</span><br>        for (<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; entry : entries) &#123;<br>            <span class="hljs-comment">//c.获取entry中键和值</span><br>            <span class="hljs-built_in">String</span> key = entry.getKey();<br>            <span class="hljs-built_in">Integer</span> value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">"="</span> + value);<br>        &#125;<br></code></pre></td></tr></table></figure><p>6.2.HashMap集合</p><p>HashMap是Map的一个是实现类，该集合的键可以为空、值不可重复、元素是无序的。HashMap的底层是由哈希表结构（数组+链表），数组为主体结构，链表是为了解决哈希值冲突而存在的分支结构。</p><p><img src="https://pic2.zhimg.com/v2-f1e0457bf2033bb89dcadf59e56a8861_b.png" alt="img"></p><p>HashMap内部结构</p><p>存储原理：</p><blockquote><p>向HashMap集合添加元素，会先调用对象键K的hash(k)方法，看元素要存储的位置。定位到K的哈希值所对应的桶位置，判断桶的位置是否为空，空就放入元素对象。不为空就通过K的equals（）方法看K是否一致。一致就替换V并返回之前的V，不一致就在桶的链表结构增加新的节点放元素对象。</p></blockquote><p>扩充：</p><blockquote><p>哈希表数组的默认长度 16  、哈希表数组的最大长度为2的30次方。加载因子指的是 hashmap 中数据个数超过数组长度*当前加载因子的时候会触发扩容，扩容因子为：0.75。haspmap 触发扩容的条件有两个,一个是当存放的数据超过临界值的时候会触发扩容(包括首次创建),另外一个是当需要转成红黑树的时候,如果当前总数组的长度大于 64，会触发扩容。当单个位置的数据链表长度超过 8 的时候会将该链表转换为红黑树。当前位置的红黑树内容长度小于 6 的时候会重新变回链表。</p></blockquote><p>6.3.LinkedHashMap集合</p><p>​      由于HashMap无法保证元素存入和取出的顺序（就是无序）。LinkedHashMap则解决这个问题，它也是HashMap的子类，通过双向链表来维护元素关系，使得顺序保持一致。</p><p>6.4.TreeMap集合</p><p>​      TreeMap不允许有重复的K，内部通过二叉树来保证键的唯一性。和TreeSet存储一致，TreeMap的键也是按照一定的排序。</p><p>6.5.Hashtable集合</p><p>Hashtable叫做哈希表，又称为散列。Hashtable的底层，是以数组+链表的形式来存储，在存储的时候通过key的值的哈希码进行二次计算存储到相应的位置，会产生哈希冲突可能性。</p><p>解决哈希冲突的方式:开放地址式、拉链式。Hashtable采用拉链式。</p><blockquote><p>开放地址式:发生冲突，选择数组的下一个位置进行判断，直到找到没有冲突的位置。拉链式: 发生冲突，则直接塞入到该数组下标位置的链表中。</p></blockquote><p>它具有以下特性:</p><blockquote><p>初始容量为 11。默认加载因子是 0.75f。所有的读写操作都加了synchronized关键字，所以同步式线程安全，但是影响了效率。不允许key和value为null。实现了Serializable接口支持序列化。实现了Cloneable接口，可以被克隆。</p></blockquote><p>6.6.Properties集合</p><p>Properties集合是Hashtable的子类，主要存储字符串类型的键值对。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">//1.创建Properties对象</span><br>Properties ps = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ps);<br><span class="hljs-comment">//2.添加属性</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;iphoneX&quot;</span>, <span class="hljs-string">&quot;12888.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;xiaomi9&quot;</span>, <span class="hljs-string">&quot;3888.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;Mate20&quot;</span>, <span class="hljs-string">&quot;8888.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;SamSungBoom7&quot;</span>, <span class="hljs-string">&quot;9999.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br><span class="hljs-comment">//3.获取</span><br>String propertyValue1 = ps.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;iphoneX&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(propertyValue1);<br><span class="hljs-comment">//4.遍历(keySet,entrySet)</span><br>Set&lt;String&gt; propertyNames = ps.<span class="hljs-built_in">string</span><span class="hljs-constructor">PropertyNames()</span>;<span class="hljs-comment">//相当于setKey</span><br><span class="hljs-keyword">for</span> (String propertyName : propertyNames) &#123;<br>    String propertyValue = ps.get<span class="hljs-constructor">Property(<span class="hljs-params">propertyName</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(propertyName+<span class="hljs-string"><code class="language-hljs reasonml"><span class="hljs-comment">//1.创建Properties对象</span><br>Properties ps = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ps);<br><span class="hljs-comment">//2.添加属性</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;iphoneX&quot;</span>, <span class="hljs-string">&quot;12888.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;xiaomi9&quot;</span>, <span class="hljs-string">&quot;3888.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;Mate20&quot;</span>, <span class="hljs-string">&quot;8888.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br>ps.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;SamSungBoom7&quot;</span>, <span class="hljs-string">&quot;9999.88&quot;</span>)</span>;<span class="hljs-comment">//相当于Map的put</span><br><span class="hljs-comment">//3.获取</span><br>String propertyValue1 = ps.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;iphoneX&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(propertyValue1);<br><span class="hljs-comment">//4.遍历(keySet,entrySet)</span><br>Set&lt;String&gt; propertyNames = ps.<span class="hljs-built_in">string</span><span class="hljs-constructor">PropertyNames()</span>;<span class="hljs-comment">//相当于setKey</span><br><span class="hljs-keyword">for</span> (String propertyName : propertyNames) &#123;<br>    String propertyValue = ps.get<span class="hljs-constructor">Property(<span class="hljs-params">propertyName</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(propertyName+<span class="hljs-string">"="</span>+propertyValue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-8d2d980333ecee4b6297e2bb15d85945_b.gif" alt="img"></p><h2 id="七、常用工具类"><a href="#七、常用工具类" class="headerlink" title="七、常用工具类"></a>七、常用工具类</h2><p>7.1.Collections工具类</p><p>Collections类中提供了大量静态方法用于对集合中的元素进行排序、查找、修改等操作。</p><p>以下是添加、排序操作：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>addAll&lt;Collection&lt;?super T&gt; c , T…e &gt;</td><td>添加e元素到指定集合c中</td></tr><tr><td>reverse(List l )</td><td>颠倒 l集合中元素的位置</td></tr><tr><td>shuffle(List l )</td><td>对 l 集合中的元素进行随机排序</td></tr><tr><td>sort(List l )</td><td>对 l 集合中的元素进行自然排序</td></tr><tr><td>swap(List l , int i , int t )</td><td>将l 集合中i索引的元素位置和t索引的元素位置进行交换</td></tr></tbody></table><p>以下是查找、替换操作：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>binarySearch(List l , Object k )</td><td>使用二分法搜索 l 集合中k元素的索引</td></tr><tr><td>max(Collection c)</td><td>按自然排序找c集合的最大元素</td></tr><tr><td>min(Collection c )</td><td>按自然排序找c集合的最小元素</td></tr><tr><td>replaceAll(List l , Object old ,Object new )</td><td>用new值去替换l 集合所有的old值</td></tr></tbody></table><p>7.2.Arrays工具类</p><p>Arrays类是对数组提供的工具类。</p><p>1.使用sort()方法排序 ：对数组的元素进行排序。</p><ul><li> 如果是数值类型的数组,按照大小升序。</li><li> 如果是字符类型的数组,按照ASCII码值升序。</li><li> 如果是字符串类型的数组,按照首字母,次字母,…的ASCII升序。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">//1.创建一个数组</span><br><span class="hljs-keyword">Integer</span>[] arr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//2.使用Arrays带有比较器的sort方法</span><br>Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator&lt;<span class="hljs-keyword">Integer</span>&gt;() &#123;<br>    <span class="hljs-comment">//就可以自定义排序</span><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> compare(<span class="hljs-keyword">Integer</span> o1, <span class="hljs-keyword">Integer</span> o2) &#123;<br>        <span class="hljs-comment">//降序</span><br>        <span class="hljs-keyword"><code class="language-hljs php"><span class="hljs-comment">//1.创建一个数组</span><br><span class="hljs-keyword">Integer</span>[] arr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//2.使用Arrays带有比较器的sort方法</span><br>Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator&lt;<span class="hljs-keyword">Integer</span>&gt;() &#123;<br>    <span class="hljs-comment">//就可以自定义排序</span><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> compare(<span class="hljs-keyword">Integer</span> o1, <span class="hljs-keyword">Integer</span> o2) &#123;<br>        <span class="hljs-comment">//降序</span><br>        <span class="hljs-keyword">return</span> o2 - o1;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>2.使用binarySearch(object[ ] , Object k )方法查找元素</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> <span class="hljs-comment">//创建数组</span><br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr =&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br> <span class="hljs-comment">//进行排序</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>sort(arr);<br> <span class="hljs-comment">//使用方法获取元素索引</span><br><span class="hljs-built_in">int</span> index = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>binary<span class="hljs-constructor">Search(<span class="hljs-params">arr</span>,4)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string"><code class="language-hljs reasonml"> <span class="hljs-comment">//创建数组</span><br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr =&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br> <span class="hljs-comment">//进行排序</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>sort(arr);<br> <span class="hljs-comment">//使用方法获取元素索引</span><br><span class="hljs-built_in">int</span> index = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>binary<span class="hljs-constructor">Search(<span class="hljs-params">arr</span>,4)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"元素4的索引位置："</span>+ index);<br></code></pre></td></tr></table></figure><p>3.使用copyOfRange(int [ ] o, int from, int to ) 方法进行复制</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">   <span class="hljs-comment">//创建数组</span><br> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr =&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">//复制一个指定范围数组: 将复制arr数组中从 索引2开始到索引3这个范围</span><br> <span class="hljs-built_in">int</span> <span class="hljs-literal">[]</span> copied = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">OfRange(<span class="hljs-params">arr</span> , 2 ,4 )</span>;<br>   <span class="hljs-comment">// 新数组：[4,8]</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string"><code class="language-hljs reasonml">   <span class="hljs-comment">//创建数组</span><br> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr =&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">//复制一个指定范围数组: 将复制arr数组中从 索引2开始到索引3这个范围</span><br> <span class="hljs-built_in">int</span> <span class="hljs-literal">[]</span> copied = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">OfRange(<span class="hljs-params">arr</span> , 2 ,4 )</span>;<br>   <span class="hljs-comment">// 新数组：[4,8]</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"新复制的数组："</span>+ copied);<br></code></pre></td></tr></table></figure><p>4.使用fill(Object [ ] o,Object v )方法替换元素</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">  <span class="hljs-comment">//创建数组</span><br>  <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr =&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br> <span class="hljs-comment">//用8替换arr数组的每个元素</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>fill(arr,<span class="hljs-number">8</span>);<br> <span class="hljs-comment">//arr数组：[8,8,8,8,8]</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string"><code class="language-hljs reasonml">  <span class="hljs-comment">//创建数组</span><br>  <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr =&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br> <span class="hljs-comment">//用8替换arr数组的每个元素</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>fill(arr,<span class="hljs-number">8</span>);<br> <span class="hljs-comment">//arr数组：[8,8,8,8,8]</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"新数组："</span>+ arr);<br></code></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-9637432a3ea565bb69d72c575f35a26b_b.gif" alt="img"></p><h2 id="八、聚合操作"><a href="#八、聚合操作" class="headerlink" title="八、聚合操作"></a>八、聚合操作</h2><p>8.1.聚合操作简述</p><p>聚合操作就是在JDK8新增Stream接口（将集合、数组中的元素转换为Stream流的形式）上，并结合Lambda表达式来简化查找、过滤、转换等操作。</p><p>主要步骤：</p><ol><li>先将原始的集合、数组转换为Stream流对象。</li><li>对Stream流对象进行查找、过滤、转换的操作，会返回一个流对象。</li><li>最后对返回的流对象进行遍历、统计、等最终操作获得结果。</li></ol><p>8.2.创建Stream流对象</p><p>创建Stream流对象是为了将集合、数组等通过一些返方法转换Stream对象。集合类提供静态方法创建Stream流对象，而数组没有对应的数组类。</p><p>创建Stream流对象的方式：</p><blockquote><p>Collections集合： 使用sream()静态方法获取流对象。Stream接口的of（）静态方法可获取基本类型包装类数组、引用类型数组、单个元素Stream流对象。Arrays数组工具类的stream（）静态方法也可以获取Stream流对象。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> <span class="hljs-comment">//创建一个数组</span><br> Integer<span class="hljs-literal">[]</span> arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//将数组转换为List集合</span><br> List&lt;Integer&gt; <span class="hljs-built_in">list</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arr</span>)</span>;<br> <span class="hljs-comment">//使用集合对象的stream（）静态方法创建Stream流对象</span><br> Stream&lt;Integer&gt; stream1 = <span class="hljs-built_in">list</span>.stream<span class="hljs-literal">()</span>;<br> stream1.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Stream接口的of方法创建流对象</span><br> Stream&lt;Integer&gt; stream2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(arr);<br> stream2.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Arrays的stream方法</span><br> Stream&lt;Integer&gt; stream3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>stream(arr);<br> stream3.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string"><code class="language-hljs reasonml"> <span class="hljs-comment">//创建一个数组</span><br> Integer<span class="hljs-literal">[]</span> arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//将数组转换为List集合</span><br> List&lt;Integer&gt; <span class="hljs-built_in">list</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arr</span>)</span>;<br> <span class="hljs-comment">//使用集合对象的stream（）静态方法创建Stream流对象</span><br> Stream&lt;Integer&gt; stream1 = <span class="hljs-built_in">list</span>.stream<span class="hljs-literal">()</span>;<br> stream1.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Stream接口的of方法创建流对象</span><br> Stream&lt;Integer&gt; stream2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(arr);<br> stream2.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Arrays的stream方法</span><br> Stream&lt;Integer&gt; stream3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>stream(arr);<br> stream3.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">" "</span>)</span>);<br>      <br><br><br></code></pre></td></tr></table></figure><p>注意：</p><blockquote><p> 对于Map集合没有直接的获取Srteam流对象，要先获取Map集合转换为Set集合，再用单列集合Collections中的stream（）方法获取流对象</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-comment">//把Map集合转换为Stream流</span><br>Map&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>Set&lt;<span class="hljs-keyword">String</span>&gt; keySet = map.<span class="hljs-built_in">keySet</span>();<br><span class="hljs-built_in">Stream</span>&lt;<span class="hljs-keyword">String</span>&gt; stream3 = keySet.<span class="hljs-built_in">stream</span>();<br>Collection&lt;<span class="hljs-keyword">String</span>&gt; values = map.<span class="hljs-built_in">values</span>();<br><span class="hljs-built_in">Stream</span>&lt;<span class="hljs-keyword">String</span>&gt; stream4 = values.<span class="hljs-built_in"><code class="language-hljs arduino"><span class="hljs-comment">//把Map集合转换为Stream流</span><br>Map&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>Set&lt;<span class="hljs-keyword">String</span>&gt; keySet = map.<span class="hljs-built_in">keySet</span>();<br><span class="hljs-built_in">Stream</span>&lt;<span class="hljs-keyword">String</span>&gt; stream3 = keySet.<span class="hljs-built_in">stream</span>();<br>Collection&lt;<span class="hljs-keyword">String</span>&gt; values = map.<span class="hljs-built_in">values</span>();<br><span class="hljs-built_in">Stream</span>&lt;<span class="hljs-keyword">String</span>&gt; stream4 = values.<span class="hljs-built_in">stream</span>();<br><br><br></code></pre></td></tr></table></figure><p>8.3.Stream流常用方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter( Predicate&lt;?super T&gt; p )</td><td>将指定流对象的元素进行过滤，并返回一个流对象</td></tr><tr><td>map( Function&lt;? super T ,? extends R &gt; f )</td><td>将流中元素按规则放到另一个f 流中</td></tr><tr><td>distinct()</td><td>删除流中重复的元素</td></tr><tr><td>sorted()</td><td>对流中的元素进行自然排序</td></tr><tr><td>limit(long maxSize)</td><td>截取流的长度</td></tr><tr><td>skip(long n)</td><td>丢弃流中前n个元素</td></tr><tr><td>concat(Stream&lt;? extends T&gt;a ,Stream&lt;? extends T&gt; b )</td><td>将两个a、b流合并为一个流</td></tr><tr><td>count()</td><td>统计流中的个数</td></tr><tr><td>collect(Collector&lt;? super T ，A，R&gt;)</td><td>将流收集到一个容器（集合）中</td></tr><tr><td>toArray()</td><td>将流收集到一个数组中</td></tr><tr><td>forEach(Cousumer&lt;? super T&gt; a)</td><td>将流中的元素进行遍历</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> <span class="hljs-comment">//创建一个数组</span><br> Integer<span class="hljs-literal">[]</span> arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//将数组转换为List集合</span><br> List&lt;Integer&gt; <span class="hljs-built_in">list</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arr</span>)</span>;<br> <span class="hljs-comment">//使用集合对象的stream（）静态方法创建Stream流对象</span><br> Stream&lt;Integer&gt; stream1 = <span class="hljs-built_in">list</span>.stream<span class="hljs-literal">()</span>;<br> stream1.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Stream接口的of方法创建流对象</span><br> Stream&lt;Integer&gt; stream2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(arr);<br> stream2.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Arrays的stream方法</span><br> Stream&lt;Integer&gt; stream3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>stream(arr);<br> stream3.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br><br> <span class="hljs-comment">//----------------------------------------------------------</span><br><br> <span class="hljs-comment">//1.遍历：该方法接收一个Consumer函数式接口作为参数</span><br> <span class="hljs-comment">//通过字符串源数据创建Stream流对象</span><br> Stream&lt;String&gt; stream = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;小雪&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;小玲&quot;</span>, <span class="hljs-string">&quot;小磊&quot;</span>);<br> <span class="hljs-comment">//通过遍历</span><br> stream.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>)</span>);<br><br><br> <span class="hljs-comment">//2.过滤：该方法接收一个Predicate函数式接口作为参数</span><br> Stream&lt;String&gt; stream01= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;小雪&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;小玲&quot;</span>, <span class="hljs-string">&quot;小磊&quot;</span>);<br> <span class="hljs-comment">//对流进行过滤以s开头</span><br> stream01.filter(i-&gt;i.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;s&quot;</span>)</span>)<br>         <span class="hljs-comment">//过滤长度大于2的</span><br>         .filter(i-&gt;i.length<span class="hljs-literal">()</span>&gt;<span class="hljs-number">2</span>)<br>         <span class="hljs-comment">//遍历</span><br>         .<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(System.<span class="hljs-params">out</span>::<span class="hljs-params">println</span>)</span>;<br><br><br> <span class="hljs-comment">//3.映射：使用map（）方法 ，该方法接收一个参数Function函数式接口</span><br> Stream&lt;String&gt; stream02= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;A1&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;C1&quot;</span>);<br>  <span class="hljs-comment">//对流过滤C开头</span><br> stream02.filter(s-&gt;s.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;C&quot;</span>)</span>)<br>         <span class="hljs-comment">//将String类型的进行小写</span><br>         .map(String::toLowerCase)<br>         <span class="hljs-comment">//进行排序</span><br>         .sorted<span class="hljs-literal">()</span><br>         <span class="hljs-comment">//遍历</span><br>         .<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(System.<span class="hljs-params">out</span>::<span class="hljs-params">println</span>)</span>;<br><br><br> <span class="hljs-comment">//4.截取：</span><br> Stream&lt;String&gt; stream03= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;A1&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;C1&quot;</span>);<br> <span class="hljs-comment">//跳过前一个元素</span><br> stream03.skip(<span class="hljs-number">1</span>)<br>         <span class="hljs-comment">//截取前2个元素</span><br>         .limit(<span class="hljs-number">2</span>)<br>         <span class="hljs-comment">//遍历</span><br>         .<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(System.<span class="hljs-params">out</span>::<span class="hljs-params">println</span>)</span>;<br><br><br> <span class="hljs-comment">//5.收集：属于最终操作，collect（）方法参数有4种：初始构造器、累加器、组合器、终结器</span><br> Stream&lt;String&gt; stream04= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;C1&quot;</span>);<br>                             <span class="hljs-comment">//先过滤以s开头</span><br> List&lt;String&gt; s = stream04.filter(i -&gt; i.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;s&quot;</span>)</span>)<br>                              <span class="hljs-comment">//最后将流元素放到一个List集合种</span><br>                          .collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier"><code class="language-hljs reasonml"> <span class="hljs-comment">//创建一个数组</span><br> Integer<span class="hljs-literal">[]</span> arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//将数组转换为List集合</span><br> List&lt;Integer&gt; <span class="hljs-built_in">list</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arr</span>)</span>;<br> <span class="hljs-comment">//使用集合对象的stream（）静态方法创建Stream流对象</span><br> Stream&lt;Integer&gt; stream1 = <span class="hljs-built_in">list</span>.stream<span class="hljs-literal">()</span>;<br> stream1.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Stream接口的of方法创建流对象</span><br> Stream&lt;Integer&gt; stream2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(arr);<br> stream2.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><br> <span class="hljs-comment">//使用Arrays的stream方法</span><br> Stream&lt;Integer&gt; stream3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>stream(arr);<br> stream3.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>+<span class="hljs-string">&quot; &quot;</span>)</span>);<br><br> <span class="hljs-comment">//----------------------------------------------------------</span><br><br> <span class="hljs-comment">//1.遍历：该方法接收一个Consumer函数式接口作为参数</span><br> <span class="hljs-comment">//通过字符串源数据创建Stream流对象</span><br> Stream&lt;String&gt; stream = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;小雪&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;小玲&quot;</span>, <span class="hljs-string">&quot;小磊&quot;</span>);<br> <span class="hljs-comment">//通过遍历</span><br> stream.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">i</span>-&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">i</span>)</span>);<br><br><br> <span class="hljs-comment">//2.过滤：该方法接收一个Predicate函数式接口作为参数</span><br> Stream&lt;String&gt; stream01= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;小雪&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;小玲&quot;</span>, <span class="hljs-string">&quot;小磊&quot;</span>);<br> <span class="hljs-comment">//对流进行过滤以s开头</span><br> stream01.filter(i-&gt;i.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;s&quot;</span>)</span>)<br>         <span class="hljs-comment">//过滤长度大于2的</span><br>         .filter(i-&gt;i.length<span class="hljs-literal">()</span>&gt;<span class="hljs-number">2</span>)<br>         <span class="hljs-comment">//遍历</span><br>         .<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(System.<span class="hljs-params">out</span>::<span class="hljs-params">println</span>)</span>;<br><br><br> <span class="hljs-comment">//3.映射：使用map（）方法 ，该方法接收一个参数Function函数式接口</span><br> Stream&lt;String&gt; stream02= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;A1&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;C1&quot;</span>);<br>  <span class="hljs-comment">//对流过滤C开头</span><br> stream02.filter(s-&gt;s.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;C&quot;</span>)</span>)<br>         <span class="hljs-comment">//将String类型的进行小写</span><br>         .map(String::toLowerCase)<br>         <span class="hljs-comment">//进行排序</span><br>         .sorted<span class="hljs-literal">()</span><br>         <span class="hljs-comment">//遍历</span><br>         .<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(System.<span class="hljs-params">out</span>::<span class="hljs-params">println</span>)</span>;<br><br><br> <span class="hljs-comment">//4.截取：</span><br> Stream&lt;String&gt; stream03= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;A1&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;C1&quot;</span>);<br> <span class="hljs-comment">//跳过前一个元素</span><br> stream03.skip(<span class="hljs-number">1</span>)<br>         <span class="hljs-comment">//截取前2个元素</span><br>         .limit(<span class="hljs-number">2</span>)<br>         <span class="hljs-comment">//遍历</span><br>         .<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(System.<span class="hljs-params">out</span>::<span class="hljs-params">println</span>)</span>;<br><br><br> <span class="hljs-comment">//5.收集：属于最终操作，collect（）方法参数有4种：初始构造器、累加器、组合器、终结器</span><br> Stream&lt;String&gt; stream04= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;salt&quot;</span>, <span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;C1&quot;</span>);<br>                             <span class="hljs-comment">//先过滤以s开头</span><br> List&lt;String&gt; s = stream04.filter(i -&gt; i.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;s&quot;</span>)</span>)<br>                              <span class="hljs-comment">//最后将流元素放到一个List集合种</span><br>                          .collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(s);<br><br><br><br></code></pre></td></tr></table></figure><p>8.4.Parallel Stream （并行流）</p><blockquote><p>以上创建Stream流对象属于串行流：就是将原来得数据转换为一个流对象，然后在一个单线程下执行聚合操作得流（单一通道）。并行流：就是将原来的数据分为多个子流对象在多个线程下进行聚合操作，然后返回一个流对象。这是依据了JDK7新增的fork、jion框架。使用前提：原来的数据在并行下不会被修改。</p></blockquote><p>并行流创建方式：</p><ol><li>通过Collection集合接口的parallelStream()方法将集合类型数据变成并行流。</li><li>通过BaseStream接口的parallel()方法将串行流变成并行流。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> <span class="hljs-comment">//创建一个List集合</span><br>List&lt;String&gt; l = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-string">&quot;三儿&quot;</span>, <span class="hljs-string">&quot;四二&quot;</span>, <span class="hljs-string">&quot;五二&quot;</span>, <span class="hljs-string">&quot;六儿&quot;</span>, <span class="hljs-string">&quot;七二&quot;</span>)</span>;<br><span class="hljs-comment">//1.直接使用方式一：使用parallelStream()转化</span><br>Stream&lt;String&gt; parallelStream = l.parallel<span class="hljs-constructor">Stream()</span>;<br><span class="hljs-comment">//通过isParallel()判断是否为并行流</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(parallelStream.is<span class="hljs-constructor">Parallel()</span>);<br><br>List&lt;String&gt; l1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-string">&quot;三儿&quot;</span>, <span class="hljs-string">&quot;六儿&quot;</span>, <span class="hljs-string">&quot;七二&quot;</span>)</span>;<br><span class="hljs-comment">//2.方式2：先变串行流，再变并行流</span><br><span class="hljs-comment">//变串行流</span><br>Stream&lt;List&lt;String&gt;&gt; l11 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(l1);<br><span class="hljs-comment">//变并行流</span><br>Stream&lt;List&lt;String&gt;&gt; parallel = l11.parallel<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier"><code class="language-hljs reasonml"> <span class="hljs-comment">//创建一个List集合</span><br>List&lt;String&gt; l = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-string">&quot;三儿&quot;</span>, <span class="hljs-string">&quot;四二&quot;</span>, <span class="hljs-string">&quot;五二&quot;</span>, <span class="hljs-string">&quot;六儿&quot;</span>, <span class="hljs-string">&quot;七二&quot;</span>)</span>;<br><span class="hljs-comment">//1.直接使用方式一：使用parallelStream()转化</span><br>Stream&lt;String&gt; parallelStream = l.parallel<span class="hljs-constructor">Stream()</span>;<br><span class="hljs-comment">//通过isParallel()判断是否为并行流</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(parallelStream.is<span class="hljs-constructor">Parallel()</span>);<br><br>List&lt;String&gt; l1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-string">&quot;三儿&quot;</span>, <span class="hljs-string">&quot;六儿&quot;</span>, <span class="hljs-string">&quot;七二&quot;</span>)</span>;<br><span class="hljs-comment">//2.方式2：先变串行流，再变并行流</span><br><span class="hljs-comment">//变串行流</span><br>Stream&lt;List&lt;String&gt;&gt; l11 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(l1);<br><span class="hljs-comment">//变并行流</span><br>Stream&lt;List&lt;String&gt;&gt; parallel = l11.parallel<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(parallel);<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-92c6e2500331765a48b1441ac23c1eb0_b.jpeg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章、Java中常用类</title>
    <link href="/post/000c0e32-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000c0e32-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、String类和StringBuffer类"><a href="#一、String类和StringBuffer类" class="headerlink" title="一、String类和StringBuffer类"></a><strong>一、String类和StringBuffer类</strong></h2><p><strong>1.1.String类的初始化</strong></p><p>在操作String类要对其进行初始化。有2种方式对String类进行初始化。<br><strong>String类是final类型的</strong>，之前我们了解过，被final修饰一旦被创建其内容和长度就无法改变。只能通过创建新的字符串。</p><p><strong>1.使用字符串常量直接初始化一个String对象</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs autoit">       <span class="hljs-built_in">String</span> 变量名 = 字符串<span class="hljs-comment">;</span><br> <br>ex:    <span class="hljs-built_in">String</span> str1 = <span class="hljs-literal">null</span><span class="hljs-comment">;</span><br>       <span class="hljs-built_in">String</span> str2 = <span class="hljs-string">&quot; &quot;</span><span class="hljs-comment">;</span><br>       <span class="hljs-built_in">String</span> str3 = <span class="hljs-string">&quot;String&quot;</span><span class="hljs-comment"><code class="language-hljs autoit">       <span class="hljs-built_in">String</span> 变量名 = 字符串<span class="hljs-comment">;</span><br> <br>ex:    <span class="hljs-built_in">String</span> str1 = <span class="hljs-literal">null</span><span class="hljs-comment">;</span><br>       <span class="hljs-built_in">String</span> str2 = <span class="hljs-string">&quot; &quot;</span><span class="hljs-comment">;</span><br>       <span class="hljs-built_in">String</span> str3 = <span class="hljs-string">&quot;String&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>2.使用String的构造方法初始化字符串对象</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs processing">       <span class="hljs-keyword">String</span>  变量名 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span> (字符串);<br><br>ex：   <span class="hljs-keyword">String</span>   <span class="hljs-built_in">str</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span> (<span class="hljs-string"><code class="language-hljs processing">       <span class="hljs-keyword">String</span>  变量名 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span> (字符串);<br><br>ex：   <span class="hljs-keyword">String</span>   <span class="hljs-built_in">str</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span> (<span class="hljs-string">"AAAA);</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法声明</th><th>方法解释</th></tr></thead><tbody><tr><td>String（）；</td><td>创建空的字符串</td></tr><tr><td>String（String value）；</td><td>创建指定内容字符串</td></tr><tr><td>String（char[ ] value）；</td><td>创建指定字符内容</td></tr></tbody></table><blockquote><p><strong>提示：</strong>可用“ + ” 进行连接字符串合成一个新的字符串</p></blockquote><p><strong>1.2.String类常规方法</strong></p><p><img src="https://pic4.zhimg.com/v2-e70286c3b123c4f3d1a66c202142ae6b_b.jpg" alt="img"></p><p><strong>1.3.StringBuffer类</strong></p><blockquote><p>为了方便对字符串进行修改，使用字符串缓冲区（<strong>StringBuffer</strong>）来操作字符串。StringBuffer类似一个字符<strong>容器</strong>，所有的操作都将在该容器中。因此不会产生新的对象。而它和String类的区别是它的内容和长度都可以改变。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-f63409da174ec098d94f7db1dc81e561_b.jpg" alt="img"></p><p><strong>1.4.StringBuffer和String的区别</strong></p><blockquote><p>1.String被final修饰，一旦创建内容和长度<strong>无法改变</strong>。StringBuffer作为字符容器，长度和内容可以<strong>随时改变</strong>。<br>2.String<strong>重写</strong>Object类的equals()方法，StringBuffer<strong>没重写</strong>Object类equals()方法。<br>3.String类之间可用 + 进行连接，而StringBuffer类不可以。<br>4.String类没StringBuffer性能高。<br>StringBuffer 字符串变量（<strong>线程安全</strong>）StringBuilder 字符串变量（<strong>非线程安全</strong>）</p></blockquote><p><img src="https://pic2.zhimg.com/v2-c4b2ec07c3c4ba757096a93127fe4c75_b.gif" alt="img"></p><p><strong>讲到equals方法肯定要讲讲 == 和它的区别</strong></p><p><strong>==判断变量或实例是不是指向同一个内存空间，equals判断变量或实例所指的内存空间中的值是否一致。</strong></p><p><strong>==一般比较的是值是否相等</strong></p><blockquote><p><strong>基本数据类型</strong>的变量，则直接比较“<strong>值</strong>”是否相等。<br><strong>引用类型</strong>的变量，则比较是对象的<strong>地址</strong>。</p></blockquote><p><strong>对于equals方法，一般为比较内容是否相同</strong></p><blockquote><p><strong>没有</strong>对equals方法进行<strong>重写</strong>，则比较的是<strong>引用类型</strong>的变量所指向的<strong>对象的地址</strong>。<br>对equals方法进行了<strong>重写</strong>的话，比较的是所指向的<strong>对象的内容</strong>。</p></blockquote><p><strong>1.5.StringBuilder</strong></p><blockquote><p>StringBuilder类也代表可变字符串对象。StringBuilder与StringBuffer类似，但是<strong>StringBuilder的线程不安全</strong>，相对性能也高点。<br>由于 StringBuilder 相较于 StringBuffer 有速度优势，<strong>所以多数情况下建议使用 StringBuilder 类</strong>。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-4c1a94e5e7a75d6080de656ab2cbf01f_b.gif" alt="img"></p><h2 id="二、System类和Runtime类"><a href="#二、System类和Runtime类" class="headerlink" title="二、System类和Runtime类"></a><strong>二、System类和Runtime类</strong></h2><p><strong>2.1 System类</strong></p><p>System类大家很熟悉，打印结果就是“System.out.println”语句就是使用了System类。System类提供类与系统相关的属性和方法，所提供的属性和方法都是静态的，所以直接调。</p><p><img src="https://pic2.zhimg.com/v2-5a85acf18f7f981f0637a62f39eb35d1_b.jpg" alt="img"></p><ul><li><strong>getProperties()方法</strong></li></ul><blockquote><p>获取当前的系统的全部属性，返回一个Properties对象，该对象封装了系统的全部属性，以】键值对形式存在。</p></blockquote><ul><li><strong>currentTimeMills()方法</strong></li></ul><blockquote><p>返回一个long类型的值，该值表示当前时间与1970-1-1：0：0：0 之间的时间差（<strong>时间戳</strong>）。</p></blockquote><ul><li>arraycopy()方法</li></ul><blockquote><p>该方法将一个数组的元素快速复制到另一个数组。参数如下：</p></blockquote><table><thead><tr><th>src</th><th>源数组</th></tr></thead><tbody><tr><td>dest</td><td>目标数组</td></tr><tr><td>srcPos</td><td>源数组要复制的起始位置</td></tr><tr><td>destPos</td><td>目标数组要复制的起始位置</td></tr><tr><td>length</td><td>复制元素长度</td></tr></tbody></table><p><strong>2.2.Runtime类</strong></p><blockquote><p>Runtime类表示java虚拟机运行时状态，封装了java虚拟机的进程。对应一个·Runtime实例，并且只有一个。</p></blockquote><ul><li><strong>getRuntime()方法</strong></li></ul><blockquote><p>获取Runtime对象。</p></blockquote><ul><li><strong>availableProcessors()方法</strong></li></ul><blockquote><p>获取当前虚拟机处理器个数。</p></blockquote><ul><li><strong>freeMemory()方法</strong></li></ul><blockquote><p>获取空闲内存数。</p></blockquote><ul><li><strong>maxMemory()方法</strong></li></ul><blockquote><p>获取可用最大内存数。</p></blockquote><ul><li><strong>exec()方法</strong></li></ul><blockquote><p>会执行DOS命令，从而实现在命令窗口中输入DOS命令一样的效果。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-55e914eb9382a2bb00719c705e10e1b3_b.gif" alt="img"></p><h2 id="三、Math类和Random类"><a href="#三、Math类和Random类" class="headerlink" title="三、Math类和Random类"></a><strong>三、Math类和Random类</strong></h2><p><strong>3.1.Math类</strong></p><p><strong>该类是一个工具类，用于复杂的数学运算。该类中的方法都是静态方法，可直接通过类名调用。注意：Math类中的PI (Π)、E（e）。</strong></p><table><thead><tr><th>public static int abs(int a)</th><th></th></tr></thead><tbody><tr><td>public static long abs(long a)</td><td></td></tr><tr><td>public static float abs(float a)</td><td></td></tr><tr><td>public static double abs(double a)</td><td>abs方法求绝对值</td></tr><tr><td>public static native double acos(double a)</td><td>acos求反余弦函数</td></tr><tr><td>public static native double asin(double a)</td><td>asin求反正切函数</td></tr><tr><td>public static native double atan(double a)</td><td>atan求反正切函数</td></tr><tr><td>public static native double ceil(double a)</td><td>ceil返回值最小的大于a的整数</td></tr><tr><td>public static native double cos(double a)</td><td>cos求余弦函数</td></tr><tr><td>public static native double exp(double a)</td><td>exp求e的a次幂</td></tr><tr><td>public static native double floor(double a)</td><td>floor返回最大的小于a的数</td></tr><tr><td>public static native double log(double a)</td><td>log返回lna</td></tr><tr><td>public static native double pow(double a，double b)</td><td>pow求a的b次幂</td></tr><tr><td>public static native double sin(double a)</td><td>sin求正弦函数</td></tr><tr><td>public static native double sin(double a)</td><td>sin求正弦函数</td></tr><tr><td>public static native double sqrt(double a)</td><td>sqrt求a的开平方</td></tr><tr><td>public static native double tan(double a)</td><td>tan求正切函数</td></tr><tr><td>public static synchronized double random()</td><td>返回0~1的随机数</td></tr></tbody></table><p><strong>3.2.Random类</strong></p><p><strong>该类可以在指定取值范围随机产生数字。</strong></p><table><thead><tr><th>public boolean nextBoolean()</th><th>该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率</th></tr></thead><tbody><tr><td>public double nextDouble()</td><td>该方法的作用是生成一个随机的double值，数值介于[0,1.0)之间。</td></tr><tr><td>public int nextInt()</td><td>该方法的作用是生成一个随机的int值，该值介于int的区间，也就是-231到231-1之间。</td></tr><tr><td>public int nextInt(int n)</td><td>该方法的作用是生成一个随机的int值，该值介于[0,n)的区间，也就是0到n之间的随机int值，包含0而不包含n</td></tr><tr><td>public void setSeed(long seed)</td><td>该方法的作用是重新设置Random对象中的种子数。设置完种子数以后的Random对象和相同种子数使用new关键字创建出的Random对象相同。</td></tr></tbody></table><p><img src="https://pic4.zhimg.com/v2-bbee48b541194814f4bc543642c5d6ab_b.gif" alt="img"></p><h2 id="四、包装类"><a href="#四、包装类" class="headerlink" title="四、包装类"></a><strong>四、包装类</strong></h2><p><strong>包装类：可以将基本数据类型的值包装为引用类型的对象</strong></p><p><img src="https://pic2.zhimg.com/v2-0261b11fc89a5a255cf5d5718d244fd1_b.jpg" alt="img"></p><ul><li>自动<strong>装箱</strong>：指将基本类型的变量赋值给包装类变量。</li><li>自动<strong>拆箱</strong>：指将包装类型的变量赋值给基本类型变量。</li></ul><p><img src="https://pic1.zhimg.com/v2-cf48bd8c81bd34d72907c677e117370c_b.gif" alt="img"></p><h2 id="五、日期和时间类"><a href="#五、日期和时间类" class="headerlink" title="五、日期和时间类"></a><strong>五、日期和时间类</strong></h2><p><strong>5.1.Date类</strong></p><p><strong>Date类用于表示日期和时间，JDK8有2中构造方法可以使用。</strong></p><blockquote><p>**Date(): **用来创建当前日期时间的Date对象。<br>**Date(long date): **用于创建指定时间的Date对象，date参数表示1970年1月1日0时0分以来的毫秒数，就是时间戳。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-f1c9bce0f35b28dcb65ea6c047591b1d_b.jpg" alt="img"></p><p><strong>5.2.Calendar类</strong></p><p><strong>Calendar类用于完成日期和时间字段的操作，通过特定方法设置和读取日期的特点部分。该类是一个抽象类，无法实例化，需调用静态方法getInstance()获得Calendar对象。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs awk"> <span class="hljs-regexp">//</span>调用静态方法getInstance()获得Calendar对象        <br> Calendar calendar = Calendar.getInstance();<br><span class="hljs-regexp">//</span>获取时间，默认是当前时间可以通过setTime()为其设置时间<br>Date time = calendar.getTime();<br><span class="hljs-regexp">//</span>获得年份<br>calendar.get(Calendar.YEAR);<br><span class="hljs-regexp">//</span>获得月份，月份是从<span class="hljs-number">0</span>开始的，即一月返回<span class="hljs-number">0</span><br>calendar.get(Calendar.MONTH);<br><span class="hljs-regexp">//</span>获取当前天数<br>calendar.get(Calendar.DAY_OF_MONTH);<br><span class="hljs-regexp">//</span>获取当前周几，返回值<span class="hljs-number">1</span>-<span class="hljs-number">7</span>,<span class="hljs-number">1</span>对应星期天，<span class="hljs-number">2</span>星期一<br>calendar.get(Calendar.DAY_OF_WEEK);<br><br><span class="hljs-regexp">//</span>设置时间,月份也是从<span class="hljs-number">0</span>开始的，<span class="hljs-number">2021</span>-<span class="hljs-number">5</span>-<span class="hljs-number">8</span> <span class="hljs-number">14</span>:<span class="hljs-number">05</span>:<span class="hljs-number">06</span><br>calendar.set(<span class="hljs-number">2021</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><span class="hljs-regexp">//</span>也可以根据具体的field设置指定的值<br>calendar.set(Calendar.YEAR,<span class="hljs-number">2021</span>);<br><br><span class="hljs-regexp">//</span>add方法可以增加时间，根据field值不同，amount值为具体的增加数目，当为复数则为减<br><span class="hljs-regexp">//</span>增加一年<br>calendar.add(Calendar.YEAR,<span class="hljs-number">1</span>);<br><span class="hljs-regexp">//</span>特别注意，当原时间当月的天数和下月的不同时，默认会返回下月的最后一天<br><span class="hljs-regexp">//</span>如<span class="hljs-number">10</span>月<span class="hljs-number">31</span>月份加一为<span class="hljs-number">11</span>月<span class="hljs-number">30</span><br>calendar.add(Calendar.MONTH,<span class="hljs-number"><code class="language-hljs awk"> <span class="hljs-regexp">//</span>调用静态方法getInstance()获得Calendar对象        <br> Calendar calendar = Calendar.getInstance();<br><span class="hljs-regexp">//</span>获取时间，默认是当前时间可以通过setTime()为其设置时间<br>Date time = calendar.getTime();<br><span class="hljs-regexp">//</span>获得年份<br>calendar.get(Calendar.YEAR);<br><span class="hljs-regexp">//</span>获得月份，月份是从<span class="hljs-number">0</span>开始的，即一月返回<span class="hljs-number">0</span><br>calendar.get(Calendar.MONTH);<br><span class="hljs-regexp">//</span>获取当前天数<br>calendar.get(Calendar.DAY_OF_MONTH);<br><span class="hljs-regexp">//</span>获取当前周几，返回值<span class="hljs-number">1</span>-<span class="hljs-number">7</span>,<span class="hljs-number">1</span>对应星期天，<span class="hljs-number">2</span>星期一<br>calendar.get(Calendar.DAY_OF_WEEK);<br><br><span class="hljs-regexp">//</span>设置时间,月份也是从<span class="hljs-number">0</span>开始的，<span class="hljs-number">2021</span>-<span class="hljs-number">5</span>-<span class="hljs-number">8</span> <span class="hljs-number">14</span>:<span class="hljs-number">05</span>:<span class="hljs-number">06</span><br>calendar.set(<span class="hljs-number">2021</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><span class="hljs-regexp">//</span>也可以根据具体的field设置指定的值<br>calendar.set(Calendar.YEAR,<span class="hljs-number">2021</span>);<br><br><span class="hljs-regexp">//</span>add方法可以增加时间，根据field值不同，amount值为具体的增加数目，当为复数则为减<br><span class="hljs-regexp">//</span>增加一年<br>calendar.add(Calendar.YEAR,<span class="hljs-number">1</span>);<br><span class="hljs-regexp">//</span>特别注意，当原时间当月的天数和下月的不同时，默认会返回下月的最后一天<br><span class="hljs-regexp">//</span>如<span class="hljs-number">10</span>月<span class="hljs-number">31</span>月份加一为<span class="hljs-number">11</span>月<span class="hljs-number">30</span><br>calendar.add(Calendar.MONTH,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>扩展： Calendar日历错容模式与非容错模式</strong></p><blockquote><p><strong>Calendar有两种解释日历字段的模式：lenient模式（容错模式）、non-lenient模式（非容错模式）。</strong><br>lenient模式时，他的字段可以接收超过允许范围的值，调用get(int field)方法获取某个字段的值，会重新计算所有的值，将其标准化。通俗讲：就是在容错模式下允许数值错误，比如：一般月份是要（1月-12月），我们取值则为（0-11），但我们还可以指定月份为13月。 而非容错模式下，超出字段范围的值，直接抛出异常。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">使用： Calendar对象.set<span class="hljs-constructor">Lenient(<span class="hljs-params">true</span>)</span>;  <span class="hljs-comment"><code class="language-hljs reasonml">使用： Calendar对象.set<span class="hljs-constructor">Lenient(<span class="hljs-params">true</span>)</span>;  <span class="hljs-comment">//反之flase就是非容错模式</span><br></code></pre></td></tr></table></figure><p><strong>5.3.JDK8的日期和时间类</strong></p><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>Clock</td><td>获取指时区的当前日期和时间。</td></tr><tr><td>DayOfWeek</td><td>枚举类、定义了一周的枚举值。</td></tr><tr><td>Duration</td><td>表示持续时间。 提供ofxxx()方法来获取指定时间的小时、分钟、秒等。</td></tr><tr><td>Instant</td><td>表示具体时间，精确到纳秒。 提供now()方法获取当前时刻。</td></tr><tr><td>LocalDate</td><td>不带时区的日期。 提供now()方法获取当前日期。</td></tr><tr><td>LocalTime</td><td>不带时区的时间。 提供now()方法获取当前时间。</td></tr><tr><td>LocalDateTime</td><td>不带时区的日期和时间。提供now()方法获取当前日期和时间。</td></tr><tr><td>Month</td><td>枚举类、定义月份的枚举类。</td></tr><tr><td>MonthDay</td><td>表示月和日。 提供now()方法获取当前月日。</td></tr><tr><td>Year</td><td>表示年。 提供now()方法获取当前年。</td></tr><tr><td>YearMonth</td><td>表示年和月。 提供now()方法获取当前年月。</td></tr><tr><td>ZoneId</td><td>表示时区。</td></tr><tr><td>ZonedDateTime</td><td>表示时区的日期和时间。</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">//1.clock的使用</span><br>Clock clock = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Clock</span>.</span></span>system<span class="hljs-constructor">UTC()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;获取UTC时区转换的当前时间：&quot;</span>+clock.instant<span class="hljs-literal">()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;获取UTC时区转换的毫秒数：&quot;</span>+clock.millis<span class="hljs-literal">()</span>);<br><span class="hljs-comment">//2.Duration的使用</span><br>Duration d = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Duration</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Days(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;一天等于&quot;</span>+d.<span class="hljs-keyword">to</span><span class="hljs-constructor">Hours()</span>+<span class="hljs-string">&quot;小时&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;一天等于&quot;</span>+d.<span class="hljs-keyword">to</span><span class="hljs-constructor">Minutes()</span>+<span class="hljs-string">&quot;分钟&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;一天等于&quot;</span>+d.<span class="hljs-keyword">to</span><span class="hljs-constructor">Millis()</span>+<span class="hljs-string">&quot;秒&quot;</span>);<br><span class="hljs-comment">//3.Instant的使用</span><br>Instant instant = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Instant</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;获取UTC时区的当前时间为：&quot;</span>+instant);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前时间一小时后的时间为：&quot;</span><br>                    +instant.plus<span class="hljs-constructor">Seconds(3600)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前时间一小时前的时间为：&quot;</span><br>                    +instant.minus<span class="hljs-constructor">Seconds(3600)</span>);<br><span class="hljs-comment">//4.LocalDate的使用</span><br>LocalDate localDate = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDate</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;从默认时区的系统时钟获取当前日期：&quot;</span><br>                    +localDate);<br><span class="hljs-comment">//5.LocalDateTime的使用</span><br>LocalDateTime localDateTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDateTime</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;从默认时区的系统时钟获取当前时间：&quot;</span><br>                    +localDateTime);<br>LocalDateTime times = localDateTime.plus<span class="hljs-constructor">Days(1)</span>.plus<span class="hljs-constructor">Hours(3)</span>.plus<span class="hljs-constructor">Minutes(30)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前的日期、时间加上1天1小时30分钟之后：&quot;</span>+times);<br><span class="hljs-comment">//7.Year、YearMonth、MonthDay的使用</span><br>Year year = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Year</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前年份为：&quot;</span>+year);<br>YearMonth yearMonth = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">YearMonth</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前月为：&quot;</span>+yearMonth);<br>MonthDay monthDay = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MonthDay</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前月日为：&quot;</span>+monthDay);<br><span class="hljs-comment">//8.获取系统默认时区</span><br>ZoneId zoneId = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZoneId</span>.</span></span>system<span class="hljs-constructor">Default()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string"><code class="language-hljs reasonml"><span class="hljs-comment">//1.clock的使用</span><br>Clock clock = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Clock</span>.</span></span>system<span class="hljs-constructor">UTC()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;获取UTC时区转换的当前时间：&quot;</span>+clock.instant<span class="hljs-literal">()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;获取UTC时区转换的毫秒数：&quot;</span>+clock.millis<span class="hljs-literal">()</span>);<br><span class="hljs-comment">//2.Duration的使用</span><br>Duration d = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Duration</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Days(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;一天等于&quot;</span>+d.<span class="hljs-keyword">to</span><span class="hljs-constructor">Hours()</span>+<span class="hljs-string">&quot;小时&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;一天等于&quot;</span>+d.<span class="hljs-keyword">to</span><span class="hljs-constructor">Minutes()</span>+<span class="hljs-string">&quot;分钟&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;一天等于&quot;</span>+d.<span class="hljs-keyword">to</span><span class="hljs-constructor">Millis()</span>+<span class="hljs-string">&quot;秒&quot;</span>);<br><span class="hljs-comment">//3.Instant的使用</span><br>Instant instant = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Instant</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;获取UTC时区的当前时间为：&quot;</span>+instant);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前时间一小时后的时间为：&quot;</span><br>                    +instant.plus<span class="hljs-constructor">Seconds(3600)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前时间一小时前的时间为：&quot;</span><br>                    +instant.minus<span class="hljs-constructor">Seconds(3600)</span>);<br><span class="hljs-comment">//4.LocalDate的使用</span><br>LocalDate localDate = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDate</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;从默认时区的系统时钟获取当前日期：&quot;</span><br>                    +localDate);<br><span class="hljs-comment">//5.LocalDateTime的使用</span><br>LocalDateTime localDateTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDateTime</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;从默认时区的系统时钟获取当前时间：&quot;</span><br>                    +localDateTime);<br>LocalDateTime times = localDateTime.plus<span class="hljs-constructor">Days(1)</span>.plus<span class="hljs-constructor">Hours(3)</span>.plus<span class="hljs-constructor">Minutes(30)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前的日期、时间加上1天1小时30分钟之后：&quot;</span>+times);<br><span class="hljs-comment">//7.Year、YearMonth、MonthDay的使用</span><br>Year year = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Year</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前年份为：&quot;</span>+year);<br>YearMonth yearMonth = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">YearMonth</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前月为：&quot;</span>+yearMonth);<br>MonthDay monthDay = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MonthDay</span>.</span></span>now<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;当前月日为：&quot;</span>+monthDay);<br><span class="hljs-comment">//8.获取系统默认时区</span><br>ZoneId zoneId = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZoneId</span>.</span></span>system<span class="hljs-constructor">Default()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"当前系统默认时区为："</span>+zoneId);<br><br></code></pre></td></tr></table></figure><p><strong>UTC:世界调式时间、又称世界标准时间。 CST:中国标准时间。 UTC与CST相差8小时时差。</strong></p><p><img src="https://pic4.zhimg.com/v2-4994a64386418ee229ee56e7913f30ef_b.gif" alt="img"></p><h2 id="六、格式化类"><a href="#六、格式化类" class="headerlink" title="六、格式化类"></a><strong>六、格式化类</strong></h2><p><strong>6.1.DateFormat类</strong></p><ul><li>Date类默认是以英文格式输出当前时间，那么<strong>输出中文格式</strong>就要用DateFormat类。</li><li>DateFormat类是专门<strong>将日期格式转化为字符串</strong>或用显示于特定格式的<strong>日期字符串转换为Date对象</strong>。该类是一个抽象类，无法实例化。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getDateInstance()</td><td>创建默认语言环境和格式化风格日期格式器</td></tr><tr><td>getDateInstance(int style)</td><td>创建默认语言环境和指定格式化风格日期格式器</td></tr><tr><td>getDateTimeInstance()</td><td>创建默认语言环境和格式化风格日期/时间格式器</td></tr><tr><td>getDateTimeInstance(int dateStyle,int timeStyle)</td><td>创建默认语言环境和指定格式化风格日期/时间格式器</td></tr><tr><td>format(Date date)</td><td>将Date格式化为日期/时间字符串</td></tr><tr><td>parse(String source)</td><td>将字符串解析为日期</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml">     <span class="hljs-comment">//创建Date对象</span><br>     Date date = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br>    <span class="hljs-comment">//DateFormat为抽象类所以创建实例的时候不能加new</span><br>    DateFormat dateFormat1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateInstance()</span>;<br>    DateFormat dateFormat2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">TimeInstance(DateFormat.SHORT, Locale.CHINA)</span>;<br>    DateFormat dateFormat3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateTimeInstance(DateFormat.FULL, DateFormat.DEFAULT, Locale.CHINA)</span>;<br>    <span class="hljs-comment">//将DateFormat类型转化Date类型</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat1.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat2.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat3.format(date));<br> <br>    DateFormat dateFormat4 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateInstance(DateFormat.MEDIUM, Locale.CHINA)</span>;<br>    DateFormat dateFormat5 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">TimeInstance(DateFormat.MEDIUM, Locale.CHINA)</span>;<br>    DateFormat dateFormat6 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateTimeInstance(DateFormat.LONG, DateFormat.LONG, Locale.CHINA)</span>;<br>    DateFormat dateFormat7 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat4.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat5.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat6.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat7.format(date));<br>    <span class="hljs-keyword">try</span> &#123;<br>    DateFormat dateFormat8 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM, Locale.CHINA)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat8.parse(<span class="hljs-string">&quot;2021年5月10日 下午2:23:45&quot;</span>));<br>    &#125;<br>    catch (ParseException e) &#123;  <br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e.get<span class="hljs-constructor"><code class="language-hljs reasonml">     <span class="hljs-comment">//创建Date对象</span><br>     Date date = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br>    <span class="hljs-comment">//DateFormat为抽象类所以创建实例的时候不能加new</span><br>    DateFormat dateFormat1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateInstance()</span>;<br>    DateFormat dateFormat2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">TimeInstance(DateFormat.SHORT, Locale.CHINA)</span>;<br>    DateFormat dateFormat3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateTimeInstance(DateFormat.FULL, DateFormat.DEFAULT, Locale.CHINA)</span>;<br>    <span class="hljs-comment">//将DateFormat类型转化Date类型</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat1.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat2.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat3.format(date));<br> <br>    DateFormat dateFormat4 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateInstance(DateFormat.MEDIUM, Locale.CHINA)</span>;<br>    DateFormat dateFormat5 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">TimeInstance(DateFormat.MEDIUM, Locale.CHINA)</span>;<br>    DateFormat dateFormat6 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateTimeInstance(DateFormat.LONG, DateFormat.LONG, Locale.CHINA)</span>;<br>    DateFormat dateFormat7 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat4.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat5.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat6.format(date));<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat7.format(date));<br>    <span class="hljs-keyword">try</span> &#123;<br>    DateFormat dateFormat8 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormat</span>.</span></span>get<span class="hljs-constructor">DateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM, Locale.CHINA)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dateFormat8.parse(<span class="hljs-string">&quot;2021年5月10日 下午2:23:45&quot;</span>));<br>    &#125;<br>    catch (ParseException e) &#123;  <br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e.get<span class="hljs-constructor">Message()</span>);  <br>    &#125; <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6.2.SimpleDateFormat类</strong></p><p>在使用DateFormat类时每次都要获取格式化器，比较麻烦。SimpleDateFormat类是DateFormat类的<strong>子类</strong>，可以<strong>new创建实例对象。线程不安全。</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs lasso">  <span class="hljs-built_in">Date</span> <span class="hljs-built_in">date</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Date</span>();<br><br><span class="hljs-comment">//日期格式化显示（Date转换成String)</span><br>SimpleDateFormat sdf1=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<span class="hljs-comment">//20210510</span><br>SimpleDateFormat sdf2=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<span class="hljs-comment">//2021-05-10</span><br>SimpleDateFormat sdf3=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="hljs-comment">//2021-05-10 12:00:00</span><br>SimpleDateFormat sdf4=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日HH时mm分ss秒&quot;</span>);<span class="hljs-comment">//2021年5月10日12时00分00秒</span><br><br><span class="hljs-comment">//将格式应用于日期</span><br><span class="hljs-built_in">String</span> s1 = sd1.format(<span class="hljs-built_in">date</span>);<br><span class="hljs-built_in">String</span> s2 = sd2.format(<span class="hljs-built_in">date</span>);<br><span class="hljs-built_in">String</span> s3 = sd3.format(<span class="hljs-built_in">date</span>);<br><span class="hljs-built_in">String</span> s4 = sd4.format(<span class="hljs-built_in">date</span>);<br><br><span class="hljs-comment">//字符串转换成日期（String转换成Date）</span><br>SimpleDateFormat sdf = <span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><span class="hljs-built_in">String</span> time = <span class="hljs-string">&quot;2021-05-10&quot;</span>;<br><span class="hljs-built_in">Date</span> <span class="hljs-built_in"><code class="language-hljs lasso">  <span class="hljs-built_in">Date</span> <span class="hljs-built_in">date</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Date</span>();<br><br><span class="hljs-comment">//日期格式化显示（Date转换成String)</span><br>SimpleDateFormat sdf1=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<span class="hljs-comment">//20210510</span><br>SimpleDateFormat sdf2=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<span class="hljs-comment">//2021-05-10</span><br>SimpleDateFormat sdf3=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="hljs-comment">//2021-05-10 12:00:00</span><br>SimpleDateFormat sdf4=<span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日HH时mm分ss秒&quot;</span>);<span class="hljs-comment">//2021年5月10日12时00分00秒</span><br><br><span class="hljs-comment">//将格式应用于日期</span><br><span class="hljs-built_in">String</span> s1 = sd1.format(<span class="hljs-built_in">date</span>);<br><span class="hljs-built_in">String</span> s2 = sd2.format(<span class="hljs-built_in">date</span>);<br><span class="hljs-built_in">String</span> s3 = sd3.format(<span class="hljs-built_in">date</span>);<br><span class="hljs-built_in">String</span> s4 = sd4.format(<span class="hljs-built_in">date</span>);<br><br><span class="hljs-comment">//字符串转换成日期（String转换成Date）</span><br>SimpleDateFormat sdf = <span class="hljs-literal">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><span class="hljs-built_in">String</span> time = <span class="hljs-string">&quot;2021-05-10&quot;</span>;<br><span class="hljs-built_in">Date</span> <span class="hljs-built_in">date</span> = sdf.parse(time);<br></code></pre></td></tr></table></figure><p><strong>6.3.DateTimeFormatter类</strong></p><p>该类也是格式化类，类似前两者的合体。可以将<strong>日期、时间对象转化为字符串</strong>，还可以特定格式化的<strong>字符串解析成日期、时间对象</strong>。</p><p><strong>获取DateTimeFormatter对象的三种方法：</strong></p><ol><li>使用<strong>静态常量创建</strong>DateTimeFormatter格式器</li><li>使用不同风格的<strong>枚举类</strong>创建DateTimeFormatter格式器</li><li>通过<strong>模式字符串</strong>创建DateTimeFormatter格式器</li></ol><ul><li><strong>完成日期、时间格式化</strong></li></ul><p>1.调用DateTimeFormatter的format(TemporalAccessor temporal)方法进行格式化，参数temporal是一个接口，实现类有LocaldDate、LocalDateTime。</p><p>2.调用LocalDate、LocalDateTime等的对象来format(TemporalAccessor temporal)方法进行格式化。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">// 获取当前时间</span><br>Loca1DateTime date = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Loca1DateTime</span>.</span></span>now0；<br><span class="hljs-comment">//1，使用常量创建DateTimeFormatter</span><br>DateTimeFormatter dtf1 = DateTimeFormatter.ISO_DATE_TIME;<br><span class="hljs-comment">//2，使用Long类型风格的DatetimeFormatter</span><br> DateTimeFormatter dtf2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">LocalizedDateTime(FormatStyle.MEDIUM)</span>;<br><span class="hljs-comment">//3.模式字符串创建DateTimeFormatter格式器</span><br> DateTimeFormatter dtf3 =  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Pattern(<span class="hljs-string"><code class="language-hljs reasonml"><span class="hljs-comment">// 获取当前时间</span><br>Loca1DateTime date = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Loca1DateTime</span>.</span></span>now0；<br><span class="hljs-comment">//1，使用常量创建DateTimeFormatter</span><br>DateTimeFormatter dtf1 = DateTimeFormatter.ISO_DATE_TIME;<br><span class="hljs-comment">//2，使用Long类型风格的DatetimeFormatter</span><br> DateTimeFormatter dtf2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">LocalizedDateTime(FormatStyle.MEDIUM)</span>;<br><span class="hljs-comment">//3.模式字符串创建DateTimeFormatter格式器</span><br> DateTimeFormatter dtf3 =  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Pattern(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>解析字符串</strong></li></ul><p>将指定字符串解析为日期、时对象，通过提供的<strong>parse</strong>(CharSequence text,DateTimeFormatter formatter )方法实现。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"><span class="hljs-comment">//字符串定义时间</span><br>String s1 = <span class="hljs-string">&quot;2021-05-10 12:00:00&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;2021年05月10日12时00分00秒&quot;</span>;<br><span class="hljs-comment">//定义解析格式器</span><br>DateTimeFormatter f1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateTimeFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Pattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;<br>DateTimeFormatter f2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateTimeFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Pattern(<span class="hljs-string">&quot;yyyy 年 MM 月dd 日 HH 时mm 分 ss 秒&quot;</span>)</span>;<br><span class="hljs-comment">//进行解析</span><br>LocalDateTime L1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDateTime</span>.</span></span>parse(s1,f1);<br>LocalDateTime L2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier"><code class="language-hljs reasonml"><span class="hljs-comment">//字符串定义时间</span><br>String s1 = <span class="hljs-string">&quot;2021-05-10 12:00:00&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;2021年05月10日12时00分00秒&quot;</span>;<br><span class="hljs-comment">//定义解析格式器</span><br>DateTimeFormatter f1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateTimeFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Pattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;<br>DateTimeFormatter f2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateTimeFormatter</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Pattern(<span class="hljs-string">&quot;yyyy 年 MM 月dd 日 HH 时mm 分 ss 秒&quot;</span>)</span>;<br><span class="hljs-comment">//进行解析</span><br>LocalDateTime L1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDateTime</span>.</span></span>parse(s1,f1);<br>LocalDateTime L2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LocalDateTime</span>.</span></span>parse(s2,f2);<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-ff28d8a677cb4d8ff07ddd191e7abe80_b.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章、面向对象（下）</title>
    <link href="/post/000be722-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000be722-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、类的继承"><a href="#一、类的继承" class="headerlink" title="一、类的继承"></a>一、类的继承</h2><p>1.1.什么是继承？</p><blockquote><p> 在java中，类的继承就是在一个类（父类或基类）上再去创建一个新的类（子类），而这个子类拥有父类的所有可继承的属性和方法。</p></blockquote><p>​      声明一个类去继承新类将使用关键字： extends   </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs scala">[修饰符]  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">子类名</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">父类名</span> </span>&#123;<br>                ......<br>               <span class="hljs-comment"><code class="language-hljs scala">[修饰符]  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">子类名</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">父类名</span> </span>&#123;<br>                ......<br>               <span class="hljs-comment">//代码</span><br>               ......<br>&#125;<br></code></pre></td></tr></table></figure><p>​     注意： </p><ol><li>类只能单继承，不能多重继承。（就是只能有唯一一个父类）</li><li>  多个类可以继承同一个父类。</li><li>  一个父类是可以去继承别的类的父类</li><li>  子类和父类是相对概念。</li></ol><p>1.2.重写父类方法</p><blockquote><p>​     Override： 重写是指在子类中对父类的方法进行重写。需注意，在重写时，被重写的方法是具有相同的方法名、参数列表以及返回值类型。     Overload：重载是指在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p></blockquote><p>​     就近原则： 在重写中，调用方法会优先调用子类的方法，后选择父类方法。</p><p>1.3. super关键字</p><blockquote><p>​       super用于访问父类的成员。</p></blockquote><p>   用法：</p><ol><li>使用super调用父类的成员变量、成员方法。</li><li>使用super调用父类的构造器方法。</li></ol><p>​       注意：</p><blockquote><p> 在定义一个类时，当尽量定义一个有参构造方法时，最好也构造无参构造方法，避免被继承时出现错误。</p></blockquote><p>1.4.Object类</p><p>​      Object类是所有类的父类。通常被称为超类、基类或根类。</p><p><img src="https://pic3.zhimg.com/v2-6cace80607a55e8c7f32c8df5041bd6e_b.png" alt="img"></p><p><img src="https://pic4.zhimg.com/v2-81d4a8b22ece893b35dcadb42326ab13_b.gif" alt="img"></p><h2 id="二、final关键字"><a href="#二、final关键字" class="headerlink" title="二、final关键字"></a>二、final关键字</h2><p>2.1.final的作用</p><blockquote><p>​      final关键字可以修饰类、变量、方法。</p></blockquote><p>  被final修饰具有以下特性：</p><ul><li>final修饰的类不能继承。</li><li>final修饰的方法不能被子类重写。</li><li>final修饰的变量（成员变量+局部变量），只能赋值一次。</li></ul><p><img src="https://pic2.zhimg.com/v2-2b4a4502343cde6f12f7439637e72989_b.gif" alt="img"></p><h2 id="三、抽象类和接口"><a href="#三、抽象类和接口" class="headerlink" title="三、抽象类和接口"></a>三、抽象类和接口</h2><p>3.1.抽象类</p><blockquote><p>​       抽象类是指如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。</p></blockquote><p>使用abstract关键字修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs java">[修饰符] <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>      ......<br>     <span class="hljs-comment">// 定义抽象方法</span><br>  [修饰符] <span class="hljs-keyword"><code class="language-hljs java">[修饰符] <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>      ......<br>     <span class="hljs-comment">// 定义抽象方法</span><br>  [修饰符] <span class="hljs-keyword">abstract</span> 返回值类型 方法名（参数列表）; <br>     ....... <br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>  包含抽象方法的类必须定义为抽象类，但抽象类中可以不包含任何抽象方法。</li><li>抽象类不能被实例化。</li></ul><p>3.2.接口</p><blockquote><p>​       如果抽象类中的所有方法都是抽象的，那就可以将该类定义为一个接口。接口是一种特殊的抽象类，不能包含普通方法。 类似于方法的集合。</p></blockquote><p>​    使用interface关键字修饰</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-string">[修饰符]</span>  <span class="hljs-keyword">interface</span> 接口名 [<span class="hljs-symbol">extends</span> 父接口<span class="hljs-symbol">1</span>，父接口<span class="hljs-symbol">2</span>，父接口<span class="hljs-symbol">3</span>] &#123;<br>                  .......<br>                 <span class="hljs-comment">//接口方法</span><br>          <span class="hljs-keyword">public</span> [<span class="hljs-keyword"><code class="language-hljs angelscript"><span class="hljs-string">[修饰符]</span>  <span class="hljs-keyword">interface</span> 接口名 [<span class="hljs-symbol">extends</span> 父接口<span class="hljs-symbol">1</span>，父接口<span class="hljs-symbol">2</span>，父接口<span class="hljs-symbol">3</span>] &#123;<br>                  .......<br>                 <span class="hljs-comment">//接口方法</span><br>          <span class="hljs-keyword">public</span> [<span class="hljs-keyword">abstract</span>] 返回值类型 方法名 （参数列表）;<br>                   .......<br> &#125;<br></code></pre></td></tr></table></figure><p>​    注意：接口中可包含3类方法：</p><ul><li>抽象方法：可通过接口实现类的实例对象调用。</li><li>静态方法：可通过“接口名.方法名”进行调用。</li><li>默认方法：可通过接口实现类的实例对象调用。</li></ul><p>​    实现类：就是实现接口中的具体方法。通过implements关键字实现接口。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs haxe">  [修饰符] <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword"><span class="hljs-keyword">implements</span> </span>接口</span>&#123;<br>            .....<br>        <span class="hljs-comment"><code class="language-hljs haxe">  [修饰符] <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword"><span class="hljs-keyword">implements</span> </span>接口</span>&#123;<br>            .....<br>        <span class="hljs-comment">// 实现具体方法</span><br>            .....<br>&#125;<br></code></pre></td></tr></table></figure><p>​    接口特点：</p><ul><li>JDK1.8之前，接口中的方法必须是抽象的，并且不包含方法体。必须通过接口的实现类对象进行调用实现方法。从JDk1.8开始，接口除了抽象方法，还可以有默认方法和静态方法。</li><li>当一个类实现接口时，如果该类是抽象类，只需要实现部分抽象方法，否则实现全部方法。</li><li>implements可同时实现多个接口，使用  , 逗号将接口隔开即可。</li><li>接口也可以通过extends实现继承，一个接口可继承多个接口。</li><li>一个类在继承一个类时还可以实现接口，但extends 得在 implements之前。</li></ul><p><img src="https://pic1.zhimg.com/v2-02eb27eb834595be470c88ae458c82d0_b.gif" alt="img"></p><h2 id="四、多态"><a href="#四、多态" class="headerlink" title="四、多态"></a>四、多态</h2><p>​      4.1.多态是什么？</p><blockquote><p>​     多态指的是不同类得对象在调用同一个方法时具有不同得多种行为。也就是在一个类中定义的属性和方法被继承或重写后，子类对象直接赋值给父类引用变量时，相同引用类型的变量调用同一个方法会有多种形态。</p></blockquote><p>​     4.2.对象类型转换</p><p>向上转型：将子类类型对象作为父类类型使用。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs haxe">ex:    <span class="hljs-type"></span>父类 对象名 = <span class="hljs-keyword">new</span>  <span class="hljs-type"></span>子类(); <span class="hljs-comment"><code class="language-hljs haxe">ex:    <span class="hljs-type"></span>父类 对象名 = <span class="hljs-keyword">new</span>  <span class="hljs-type"></span>子类(); <span class="hljs-comment">//向上</span><br></code></pre></td></tr></table></figure><p>向下转型：将父类类型对象作为子类类型使用。使用必须要转换其本质类，否则会出现错误。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs haxe">ex：   父类 对象名<span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>子类();<br><br>       子类 对象名<span class="hljs-number">2</span> = （子类）对象名<span class="hljs-number">1</span>;   <span class="hljs-comment"><code class="language-hljs haxe">ex：   父类 对象名<span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>子类();<br><br>       子类 对象名<span class="hljs-number">2</span> = （子类）对象名<span class="hljs-number">1</span>;   <span class="hljs-comment">//向下</span><br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-c814af1337f461cb3e26c02fb6159d99_b.gif" alt="img"></p><h2 id="五、内部类"><a href="#五、内部类" class="headerlink" title="五、内部类"></a>五、内部类</h2><p>​       5.1.成员内部类</p><blockquote><p>解释： 类中还可以定义类，该类称为成员内部类。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs nginx"> <span class="hljs-attribute">calss</span> 外部类名&#123;<br> <br>    <span class="hljs-attribute"><code class="language-hljs nginx"> <span class="hljs-attribute">calss</span> 外部类名&#123;<br> <br>    <span class="hljs-attribute">calss</span> 内部类名&#123;<br>   <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​      5.2.局部内部类</p><blockquote><p>解释：就和局部变量类似，只不过可以定义类。就是在方法中定义类，但限制于该方法使用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs javascript">calss 外部类名&#123;<br><br>      <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"><code class="language-hljs javascript">calss 外部类名&#123;<br><br>      <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>          calss 内部类名&#123;<br><br>           &#125;<br>      &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p> 5.3.静态内部类</p><blockquote><p>  解释：就是被static修饰过的成员内部内。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs nginx"> <span class="hljs-attribute">calss</span> 外部类名&#123;<br> <br>   <span class="hljs-attribute"><code class="language-hljs nginx"> <span class="hljs-attribute">calss</span> 外部类名&#123;<br> <br>   <span class="hljs-attribute">static</span> calss 内部类名&#123;<br>   <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    5.4.匿名内部类</p><blockquote><p>解释：就是没有名字的内部类，通常使用实现接口作为该方法的参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs javascript"><span class="hljs-number">1.</span>    interfance 接口名 &#123;<br>         <span class="hljs-keyword">void</span> test（）&#123; &#125;<br>    &#125;<br><br><br><span class="hljs-number">2.</span>    <span class="hljs-function"><span class="hljs-title">newTest</span>(<span class="hljs-params"><span class="hljs-keyword">new</span> 接口名（）</span>)</span>&#123;<br>      <span class="hljs-comment">//实现接口中的方法</span><br>       <span class="hljs-keyword">void</span> test（）&#123; &#125;<br>    &#125;<br><br> <span class="hljs-number">3.</span>    <span class="hljs-function"><span class="hljs-title">newTest</span>(<span class="hljs-params"><code class="language-hljs javascript"><span class="hljs-number">1.</span>    interfance 接口名 &#123;<br>         <span class="hljs-keyword">void</span> test（）&#123; &#125;<br>    &#125;<br><br><br><span class="hljs-number">2.</span>    <span class="hljs-function"><span class="hljs-title">newTest</span>(<span class="hljs-params"><span class="hljs-keyword">new</span> 接口名（）</span>)</span>&#123;<br>      <span class="hljs-comment">//实现接口中的方法</span><br>       <span class="hljs-keyword">void</span> test（）&#123; &#125;<br>    &#125;<br><br> <span class="hljs-number">3.</span>    <span class="hljs-function"><span class="hljs-title">newTest</span>(<span class="hljs-params">接口名 xx</span>)</span>&#123;<br>         xx.test(); <br>     &#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-e4980c55c70a6620f04b560ac53ee1b7_b.gif" alt="img"></p><h2 id="六、JDK8的Lambda表达式"><a href="#六、JDK8的Lambda表达式" class="headerlink" title="六、JDK8的Lambda表达式"></a>六、JDK8的Lambda表达式</h2><blockquote><p> Lambda表达式是简化了集合以及数组数据进行遍历、过滤和提取等操作。</p></blockquote><p>6.1.lambda表达式入门</p><blockquote><p>该表达式针对有一个抽象方法的接口实现的，实现接口功能作为方法的参数。</p></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs xl"><span class="hljs-function"><span class="hljs-title"><code class="language-hljs xl"><span class="hljs-function"><span class="hljs-title">ex</span>： （参数列表）-></span> &#123; 表达式 &#125;<br></code></pre></td></tr></table></figure><p>​     组成部分： “参数列表” 、  “ -&gt;” 、  “表达式” 三部分，具体解释：</p><ol><li>（参数列表）: 用来向表达式传递接口方法需要的参数，多个参数使用逗号隔开，可省略参数 类型，如果只有一个参数还可以省略（）。</li><li>​     -&gt;           :  用来指定参数数据指向。</li><li>{表达式}       ：本质就是接口中的抽象方法的具体实现。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs reasonml"> <span class="hljs-comment">//传统的语法：匿名内部类</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread( <span class="hljs-params">new</span> Runnable()</span> &#123;<br>      public void run<span class="hljs-literal">()</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>      &#125;<br> &#125;);<br><br><br><span class="hljs-comment">//使用Lambda表达式</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string"><code class="language-hljs reasonml"> <span class="hljs-comment">//传统的语法：匿名内部类</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread( <span class="hljs-params">new</span> Runnable()</span> &#123;<br>      public void run<span class="hljs-literal">()</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>      &#125;<br> &#125;);<br><br><br><span class="hljs-comment">//使用Lambda表达式</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"Hello World!"</span>));<br></code></pre></td></tr></table></figure><p>   6.2.函数式接口</p><p>虽然Lambda可以实现匿名内部类的功能，但有一个局限，接口有且只有一个抽象方法才可。</p><blockquote><p>​    函数式接口：就是指有且只有一个抽象方法的接口。为了确保函数式接口，便引入一个@FunctionalInterfancez注解，显示的标注接口是一个函数式接口。</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-comment">//定义有无、返回值的函数式接口</span><br>  @FunctionalInterface<br>   interfance  people &#123; <br>       <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>    &#125;<br><br><span class="hljs-comment">//实现people接口方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">peopleImpl</span> <span class="hljs-params">(people p)</span></span>&#123;<br>         p.<span class="hljs-built_in">run</span>();<br>  &#125;<br><br><span class="hljs-comment">//定义有参、有返回值的函数式接口</span><br>   interfance count &#123;<br>     <span class="hljs-keyword">int</span> sum（<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b ）;<br> &#125;<br><br><br><span class="hljs-comment">//实现count接口方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> viod <span class="hljs-title">showCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y ,count c )</span></span>&#123;<br>     c.<span class="hljs-built_in">sum</span>(x,y);<br>  &#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> test&#123;<br>     <span class="hljs-comment">//分别对两个函数式接口进行测试</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">String</span>[]args)</span></span>&#123;<br>          p.<span class="hljs-built_in">run</span>(()-&gt;System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;定义有无、返回值的函数式接口&quot;</span>));<br>          <span class="hljs-built_in">showCount</span>(<span class="hljs-number">2</span>,<span class="hljs-number"><code class="language-hljs arduino"><span class="hljs-comment">//定义有无、返回值的函数式接口</span><br>  @FunctionalInterface<br>   interfance  people &#123; <br>       <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>    &#125;<br><br><span class="hljs-comment">//实现people接口方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">peopleImpl</span> <span class="hljs-params">(people p)</span></span>&#123;<br>         p.<span class="hljs-built_in">run</span>();<br>  &#125;<br><br><span class="hljs-comment">//定义有参、有返回值的函数式接口</span><br>   interfance count &#123;<br>     <span class="hljs-keyword">int</span> sum（<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b ）;<br> &#125;<br><br><br><span class="hljs-comment">//实现count接口方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> viod <span class="hljs-title">showCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y ,count c )</span></span>&#123;<br>     c.<span class="hljs-built_in">sum</span>(x,y);<br>  &#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> test&#123;<br>     <span class="hljs-comment">//分别对两个函数式接口进行测试</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">String</span>[]args)</span></span>&#123;<br>          p.<span class="hljs-built_in">run</span>(()-&gt;System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;定义有无、返回值的函数式接口&quot;</span>));<br>          <span class="hljs-built_in">showCount</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,(x,y)->x+y);<br>     &#125;<br>    <br> &#125;<br></code></pre></td></tr></table></figure><h2 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h2><p>​        7.1.异常是什么？</p><p>​     java语言引用异常（Exception），以异常类的来表示一些非正常的情况，比如程序磁盘空间不足、被加载的类不存在等等。通过异常处理机制对程序运行时发生各种问题进行处理。</p><p><img src="https://pic2.zhimg.com/v2-173afc1ba4ca4e1dbf78f0f140303f1d_b.png" alt="img"></p><p>Throwable有2个直接的子类Error和Exception，其中Error代表错误、Exception代表异常。</p><ul><li>Error类称为错误类，是java运行时产生的系统内部错误或资源耗尽的错误，较严重，是无法靠程序修复。</li><li>Exception类称为异常类，是程序可以处理的错误。RuntimeException类是Exception’的子类，表示运行时异常。</li></ul><p><img src="https://pic2.zhimg.com/v2-8296e2100c8eea8502ecbbf663bcd01d_b.png" alt="img"></p><p>Throwable类的常用方法</p><p>​      7.2.异常类型</p><ul><li>编译时异常： 就是程序在编写过程时，java编译器会对编写的代码进行检查是否有异常</li></ul><blockquote><p>处理方式：               1.使用try……..catch 语句进行异常捕获处理。               2.使用throws关键字声明抛出异常。</p></blockquote><ul><li>运行时异常：RuntimeException类及其子类都是运行时异常，有java虚拟机自动捕获处理</li></ul><blockquote><p>​    运行异常一般是代码逻辑错误引起。 </p></blockquote><p><img src="https://pic1.zhimg.com/v2-97a5c501da0742f7fd208c811635b9f4_b.png" alt="img"></p><p>常见异常</p><p>  7.3. try….catch 和 finally</p><ul><li>​        try……catch : 异常捕获</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs php">   <span class="hljs-keyword">try</span>&#123;<br>     <span class="hljs-comment">//要捕获发生异常错误的语句</span><br>    <br>  &#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span>类 或其他异常类)&#123;<br><br>    <span class="hljs-comment"><code class="language-hljs php">   <span class="hljs-keyword">try</span>&#123;<br>     <span class="hljs-comment">//要捕获发生异常错误的语句</span><br>    <br>  &#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span>类 或其他异常类)&#123;<br><br>    <span class="hljs-comment">//对捕获的异常进行相应的处理</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>解释： try{}代码块发生异常，系统会将该异常信息封装成一个异常对象，将该对象传递给catch(){}代码块进行异常处理。</p></blockquote><ul><li>​     finally： 无论程序是否发送异常都要去执行。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs php">    <span class="hljs-keyword">try</span>&#123;<br>      <span class="hljs-comment">//要捕获发生异常错误的语句</span><br>     <br>   &#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span>类 或其他异常类)&#123;<br><br>     <span class="hljs-comment">//对捕获的异常进行相应的处理</span><br> &#125; <span class="hljs-keyword">finally</span>&#123;<br>     <span class="hljs-comment"><code class="language-hljs php">    <span class="hljs-keyword">try</span>&#123;<br>      <span class="hljs-comment">//要捕获发生异常错误的语句</span><br>     <br>   &#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span>类 或其他异常类)&#123;<br><br>     <span class="hljs-comment">//对捕获的异常进行相应的处理</span><br> &#125; <span class="hljs-keyword">finally</span>&#123;<br>     <span class="hljs-comment">//都要去执行 </span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：有一种情况finally{}中有System.exit(0)语句是不会执行的。   System.exit(0)表示退出当前Java虚拟机，停止代码运行。    </p></blockquote><p>​    7.4.throws关键字</p><p>   Java允许将异常从当前方法中抛出然后让后续调用者在使用时再进行异常处理。</p><p>   该关键字用于抛出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript">语法格式：<br><span class="hljs-string">        [修饰符]</span> 返回值类型 方法名 （参数列表） throws 异常 &#123;<br>                <span class="hljs-comment"><code class="language-hljs angelscript">语法格式：<br><span class="hljs-string">        [修饰符]</span> 返回值类型 方法名 （参数列表） throws 异常 &#123;<br>                <span class="hljs-comment">//方法体</span><br>    <br>       &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章、面向对象（上）</title>
    <link href="/post/9ce94980-f0ea-11eb-8338-636c1dc830d3/"/>
    <url>/post/9ce94980-f0ea-11eb-8338-636c1dc830d3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、面向对象的概述"><a href="#一、面向对象的概述" class="headerlink" title="一、面向对象的概述"></a>一、面向对象的概述</h2><blockquote><p>面向对象是一种编程思想。在程序中使用对象来表达生活中的事物，用对象的关系来描述事物之间的关系。所以一直会有一种”一切皆对象”的状态，没女朋友，我new对象就是啦！</p></blockquote><p>1.1.面向对象的特点可以总结为三点： 封装、继承、多态。</p><ul><li>封装：就是将对象的属性和行为封装起来，让其具有隐私性。（从侧面实现功能）</li><li>继承：主要描述的是类与类之间的关系，通过继承将被继承的类功能继承，还可扩展其他。</li><li>多态：当被继承完，该子类对象直接赋值给父类的引用变量，调用相同方法会呈现不同行为特点。（一种东西在某种环境中可以有不同的形态表现）</li></ul><p><img src="https://pic2.zhimg.com/v2-11bc12e757d7ff472f3b96e5b068559d_b.gif" alt="img"></p><h2 id="二、类与对象"><a href="#二、类与对象" class="headerlink" title="二、类与对象"></a>二、类与对象</h2><p>2.1.类与对象的关系</p><blockquote><p>类是对某一类事物的抽象描述，对象是用于表现该事物中的个体。类的范围更大。</p></blockquote><p>2.2.类的定义</p><blockquote><p>在程序中创建对象，会先定义个类。类用于描述一组对象的共同特征和行为。而共同特征作为类的属性(成员变量)，共同行为作为类的方法（成员方法）。</p></blockquote><ul><li>类的定义格式：  </li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs haxe">   修饰符 <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>          .....<br>  <span class="hljs-comment"><code class="language-hljs haxe">   修饰符 <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>          .....<br>  <span class="hljs-comment">//成员变量或成员方法  </span><br>&#125;               <br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs arduino">         <span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;</span><br>          <span class="hljs-comment">//成员变量</span><br>          <span class="hljs-keyword">String</span> name = <span class="hljs-string">&quot;买盐&quot;</span>;<br>           <span class="hljs-keyword">int</span> age =<span class="hljs-number">10</span>;<br>          <span class="hljs-comment">//成员方法</span><br>           <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>&#123;<br>        system.out.<span class="hljs-built_in">println</span>(<span class="hljs-string"><code class="language-hljs arduino">         <span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;</span><br>          <span class="hljs-comment">//成员变量</span><br>          <span class="hljs-keyword">String</span> name = <span class="hljs-string">&quot;买盐&quot;</span>;<br>           <span class="hljs-keyword">int</span> age =<span class="hljs-number">10</span>;<br>          <span class="hljs-comment">//成员方法</span><br>           <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>&#123;<br>        system.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"买盐10岁"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>语法格式具体说明：</p><ol><li>修饰符：方法的修饰符较多，有静态修饰符（static）、权限修饰符（public、protected、private）、最终修饰符（final）。</li><li>返回值：不需要返回值使用void关键字、或用于限定方法返回值的数据类型。</li><li>参数：用于限定调用方法传入的参数类型。</li><li>参数名：是一个变量，用于接收调用方法时传入的数据。</li><li>return关键字：用于结束方法以及返回方法指定类型的值，当方法返回值类型为void可以不用写return。</li><li>返回值：该值会返回给调用者。</li></ol><blockquote><p>​        类中的变量称成员变量，方法中的变量称局部变量。</p></blockquote><p>2.3.对象的创建与使用</p><ul><li> 使用new关键字创建对象</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs haxe">类名  对象名 = <span class="hljs-keyword">new</span> <span class="hljs-type"><code class="language-hljs haxe">类名  对象名 = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>类名();<br></code></pre></td></tr></table></figure><blockquote><p> 解释：在创建对象时，程序将分为两块内存区域，分别为栈内存和堆内存。对象名作为引用会存放到栈内存中，而正真的对象会存放到堆内存中。栈内存存放基本类型的变量和对象的引用变量，堆内存存放由new创建的正真对象和数组。</p></blockquote><p>2.4.访问控制符</p><p><img src="https://pic2.zhimg.com/v2-d57efff9bf19059f6e8c2434d60689d5_b.png" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-f34874bee716badc0a77737f1f5466e8_b.gif" alt="img"></p><h2 id="三、类的封装"><a href="#三、类的封装" class="headerlink" title="三、类的封装"></a>三、类的封装</h2><p>​      3.1. 定义：类的封装是指将对象的状态藏在对象内部，不让对外直接访问对象的内部信息，而是通过调用该类的方法来实现访问内部操作。</p><blockquote><p>解释：定义一个类时，将类的属性进行私有化（private），则修饰的属性只能在该类中访问。对外想要访问访问私有属性，需要在该类中将方法设置为共有的，通过共有的方法去获取属性值。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-eeb4840d01833c7d2fa46be6b049face_b.gif" alt="img"></p><h2 id="四、方法的重载和递归"><a href="#四、方法的重载和递归" class="headerlink" title="四、方法的重载和递归"></a>四、方法的重载和递归</h2><p>​      4.1.方法的重载</p><blockquote><p>允许在一个类中定义多个方法名称相同，但参数类型和个数不同的方法。就称为方法重载。方法名一样，但参数不一样，这就是重载(overload)。</p></blockquote><p>​     4.2.方法的递归</p><blockquote><p>方法的递归是指一个方法的内部调用自身的过程。递归必须要有结束条件，不然就会进入无限递归的状态，无法结束调用。</p></blockquote><p>​     4.3.构造方法</p><p>​        构造方法语法格式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs kotlin">[修饰符] 方法名 （参数列表）&#123;<br>      <span class="hljs-comment">//方法体</span><br> &#125;<br>需满足以下三个条件：<br> <span class="hljs-number">1.</span>方法名与类名相同。<br> <span class="hljs-number">2.</span>在方法名的前面没有返回值类型的声明。<br> <span class="hljs-number">3.</span>在方法中不能使用<span class="hljs-keyword">return</span>语句返回一个值，但可以单独写<span class="hljs-keyword"><code class="language-hljs kotlin">[修饰符] 方法名 （参数列表）&#123;<br>      <span class="hljs-comment">//方法体</span><br> &#125;<br>需满足以下三个条件：<br> <span class="hljs-number">1.</span>方法名与类名相同。<br> <span class="hljs-number">2.</span>在方法名的前面没有返回值类型的声明。<br> <span class="hljs-number">3.</span>在方法中不能使用<span class="hljs-keyword">return</span>语句返回一个值，但可以单独写<span class="hljs-keyword">return</span>语句作为结束。<br>    <br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-959a20c3b4c73c11353e7df1a17fe6f4_b.gif" alt="img"></p><h2 id="五、this关键字"><a href="#五、this关键字" class="headerlink" title="五、this关键字"></a>五、this关键字</h2><blockquote><p>​     this关键字指当前对象，用于方法中访问对象的其他成员。一般有3种常见用法：</p></blockquote><ul><li>通过this调用成员变量，解决局部变量名称冲突问题。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs arduino">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><br>      <span class="hljs-keyword">String</span> name ;    <span class="hljs-comment">//成员变量</span><br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span> <span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span></span>&#123;   <span class="hljs-comment">//局部变量</span><br><br>     <span class="hljs-keyword">this</span>.name=name;   <span class="hljs-comment"><code class="language-hljs arduino">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><br>      <span class="hljs-keyword">String</span> name ;    <span class="hljs-comment">//成员变量</span><br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span> <span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span></span>&#123;   <span class="hljs-comment">//局部变量</span><br><br>     <span class="hljs-keyword">this</span>.name=name;   <span class="hljs-comment">//将局部赋值给成员</span><br><br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><ul><li>通过this调用成员方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs typescript">    <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">A</span> </span>&#123;<br>      <span class="hljs-comment">//方法a</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span>  <span class="hljs-function"><span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;    <br>    &#125;<br>       <span class="hljs-comment">//方法b</span><br>      <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">// b调用a</span><br>        <span class="hljs-built_in"><code class="language-hljs typescript">    <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">A</span> </span>&#123;<br>      <span class="hljs-comment">//方法a</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span>  <span class="hljs-function"><span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;    <br>    &#125;<br>       <span class="hljs-comment">//方法b</span><br>      <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">// b调用a</span><br>        <span class="hljs-built_in">this</span>.a();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过this调用构造方法</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;<br>     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;A的无参构造方法&quot;</span>);<br>   &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span> <span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span></span>&#123;<br>           <span class="hljs-built_in"><span class="hljs-keyword">this</span></span>();    <span class="hljs-comment">//调用无参方法</span><br>     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;A的有参构造方法被调用了&quot;</span>);<br>   &#125;<br>&#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ex</span>&#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>       A a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span> (<span class="hljs-string">&quot;买盐&quot;</span>);   <span class="hljs-comment"><code class="language-hljs arduino"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;<br>     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;A的无参构造方法&quot;</span>);<br>   &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span> <span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span></span>&#123;<br>           <span class="hljs-built_in"><span class="hljs-keyword">this</span></span>();    <span class="hljs-comment">//调用无参方法</span><br>     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;A的有参构造方法被调用了&quot;</span>);<br>   &#125;<br>&#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ex</span>&#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>       A a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span> (<span class="hljs-string">&quot;买盐&quot;</span>);   <span class="hljs-comment">//实例化对象</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-ee3b143a27555505817ffc695ceeb883_b.gif" alt="img"></p><h2 id="六、static关键字"><a href="#六、static关键字" class="headerlink" title="六、static关键字"></a>六、static关键字</h2><p>​       6.1.静态变量</p><blockquote><p>​         被static修饰的成员变量，可以被所有实例共享，该变量称为静态变量。         注意：只能修饰成员变量，不能修饰局部变量。</p></blockquote><p>​        6.2.静态方法</p><blockquote><p>​          只要类中方法被static修饰就是静态方法。</p></blockquote><p>​       6.3.静态代码块 </p><blockquote><p>​      指若干个行代码被一对大括号包围称为代码块。在大括号前用static关键词修饰的代码块就称为静态代码块。当类被加载时，静态代码块就会被执行。类只加载一次，静态代码块也执行一次。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-24d480d48d15e87a6472ef490553cf99_b.gif" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章、Java语法</title>
    <link href="/post/000be721-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000be721-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一章、Java小基础"><a href="#第一章、Java小基础" class="headerlink" title="第一章、Java小基础"></a>第一章、Java小基础</h1><h2 id="每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。"><a href="#每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。" class="headerlink" title="每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。"></a><strong>每一门语言都有自己语法规范，java也不例外。本次将了解java的基本语法。</strong></h2><h2 id="一、Java基本语法格式"><a href="#一、Java基本语法格式" class="headerlink" title="一、Java基本语法格式"></a><strong>一、Java基本语法格式</strong></h2><p><strong>1.1.Java代码必须要声明一个类，然后才可以写业务代码哦。</strong></p><p><strong>类的关键字 class</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-string">[修饰符]</span>  <span class="hljs-keyword"><code class="language-hljs angelscript"><span class="hljs-string">[修饰符]</span>  <span class="hljs-keyword">class</span>  类名 &#123;<br>    代码块<br>&#125;    <br></code></pre></td></tr></table></figure><p><strong>1.2.java中的注释</strong></p><p>为了方便解释我们自己写的代码，必须、必须、必须加上注释，这也是一个高素质代码者要干的事情，不然估计过段时间都不知道自己写的啥玩意儿！！！</p><p>（1）单行注释 用符号“ // ” 在idea中快捷键为：Ctrl+/</p><p>（2）多行注释 用符号“ /** * ***/ ” 在idea中快捷键为：Ctrl+Shift+/</p><p>（3）文档注释 用符号“/** <em>/ ” 在idea中直接 /</em>* +回车即可</p><p>注意的是：多行注释可以嵌套单行注释，但不能嵌多行注释哦。</p><p><strong>1.3. 关键字： 是事先就被定义好的拥有特殊含义的单词。 关键字都是小写的哦</strong></p><p><img src="https://pic1.zhimg.com/v2-91dcb078a3dd7dc3c841a835ad0edd10_b.jpg" alt="img"></p><p><strong>1.4.标识符</strong></p><p>标识符不能以数字开头，也不能是关键字。但可以是任意大小写英文、数字、下划线_ 和美刀$哦 。建议按以下几个规范：</p><p>（1）包名都用小写</p><p>（2）类名和接口的首字母要大写</p><p>（3）常量名大写时可以用下划线_隔开</p><p>（4）变量名和方法名首字母要小写</p><p><img src="https://pic3.zhimg.com/v2-c0512886dba7d919f000a7a55bab3c5a_b.jpg" alt="img"></p><h2 id="二、常量与变量"><a href="#二、常量与变量" class="headerlink" title="二、常量与变量"></a>二、常量与变量</h2><p><strong>1.变量</strong>：程序运行会保存一些数据到内存单元中，用一个标识符来标识这些内存单元。 这些内存单元就是变量，而标识它们就是变量名。</p><p>语法格式：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript">变量类型  变量名 = 初始值 ;    <br>ex:  <span class="hljs-built_in">int</span> a = <span class="hljs-number"><code class="language-hljs angelscript">变量类型  变量名 = 初始值 ;    <br>ex:  <span class="hljs-built_in">int</span> a = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p><strong>1.1.变量数据类型</strong></p><p>数据类型分为两种：基本数据类型和引用类型</p><p><img src="https://pic3.zhimg.com/v2-cbdcd7b60548ee41c9e7c4e886c12aea_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-f9318bd6e955705beeee919484b6b494_b.jpg" alt="img"></p><p>注意： 在使用Long类型，在赋值后面加一个字母L ,说明赋值的为Long类型 。但是没超过int 类型就不用加L。</p><p>在使用Float类型，在赋值后面加一个字母F ，说明赋值的为float类型。</p><p><strong>1.2.变量类型转换</strong></p><p>数据类型转换分为两种：自动类型转换和强制类型转换</p><p>自动转换：从左往右（小类型数据—&gt;大类型数据）</p><p>强制转换：从右往左（大类型数据—&gt;小类型数据）</p><p><img src="https://pic2.zhimg.com/v2-3b604fd0fd8ea6bb8a131b53ef9ede61_b.jpg" alt="img"></p><p><strong>1.3.变量作用域</strong></p><p>变量需要在它作用范围才可以被使用，该作用范围称为变量作用域。</p><p><img src="https://pic3.zhimg.com/v2-a1d7dce7c91bb39301b7bf170bb07cd6_b.gif" alt="img"></p><h2 id="2-1-Java中的常量：就是在程序中属于固定不变的值，无法改变的数据。"><a href="#2-1-Java中的常量：就是在程序中属于固定不变的值，无法改变的数据。" class="headerlink" title="2.1.Java中的常量：就是在程序中属于固定不变的值，无法改变的数据。"></a><strong>2.1.Java中的常量：</strong>就是在程序中属于固定不变的值，无法改变的数据。</h2><p>java中的常量包括整数常量、浮点数常量、布尔常量、字符串常量等等。</p><ul><li><strong>整数常量</strong>：一般有4中表现形式：二进制、八进制、十进制、十六进制</li></ul><p>（1）二进制：由0和1组成数字序列。ex:101001</p><p>（2）八进制：由0开头，后面由（0~7）整数组成数字序列。ex:0624</p><p>（3）十进制：由（0~9）整数组成数字序列。ex:123456</p><p>（4）十六进制：以0x或0X开头，后面由（0<del>9）或（A</del>F）组成序列。ex:0x56AF</p><ul><li><strong>浮点数常量</strong>：分float单精度浮点数和double双精度浮点数。</li></ul><p>一般都要在浮点数加： float后面加F或f、double后面加D或d</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs apache"><span class="hljs-attribute">2e4f</span>      <span class="hljs-number">3</span>.<span class="hljs-number">8</span>d      <span class="hljs-number">0</span>f    <span class="hljs-number">3</span>.<span class="hljs-number">66</span>d      <span class="hljs-number">5</span>.<span class="hljs-number">20</span>e +  <span class="hljs-number">13</span>.<span class="hljs-number"><code class="language-hljs apache"><span class="hljs-attribute">2e4f</span>      <span class="hljs-number">3</span>.<span class="hljs-number">8</span>d      <span class="hljs-number">0</span>f    <span class="hljs-number">3</span>.<span class="hljs-number">66</span>d      <span class="hljs-number">5</span>.<span class="hljs-number">20</span>e +  <span class="hljs-number">13</span>.<span class="hljs-number">14</span>f<br></code></pre></td></tr></table></figure><ul><li><strong>字符常量</strong>：使用英文单引号 ‘ ‘ 修饰。</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs scheme"><span class="hljs-symbol">&#x27;a</span>&#x27;       <span class="hljs-symbol">&#x27;A</span>&#x27;         <span class="hljs-symbol">&#x27;$</span>&#x27;     <span class="hljs-symbol"><code class="language-hljs scheme"><span class="hljs-symbol">&#x27;a</span>&#x27;       <span class="hljs-symbol">&#x27;A</span>&#x27;         <span class="hljs-symbol">&#x27;$</span>&#x27;     <span class="hljs-symbol">&#x27;*</span>&#x27;<br></code></pre></td></tr></table></figure><ul><li><strong>字符串常量</strong>： 使用英文双引号 “ “ 修饰。</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs 1c"><span class="hljs-string">&quot;Java&quot;</span>           <span class="hljs-string">&quot;1234&quot;</span>          <span class="hljs-string">&quot;  &quot;</span>     <span class="hljs-string"><code class="language-hljs 1c"><span class="hljs-string">&quot;Java&quot;</span>           <span class="hljs-string">&quot;1234&quot;</span>          <span class="hljs-string">&quot;  &quot;</span>     <span class="hljs-string">" 我爱java"</span><br></code></pre></td></tr></table></figure><ul><li><strong>布尔常量</strong>： 分为true值和false值。</li><li><strong>null常量</strong>：表示对象的引用为空。</li></ul><h2 id="2-2-java运算符：一些特殊符号（-、-、-、-、-、-）"><a href="#2-2-java运算符：一些特殊符号（-、-、-、-、-、-）" class="headerlink" title="2.2.java运算符：一些特殊符号（+ 、-、 *、 %、 =、$ ）"></a><strong>2.2.java运算符：一些特殊符号（+ 、-、 *、 %、 =、$ ）</strong></h2><ul><li><strong>算数运算符</strong></li></ul><p><img src="https://pic4.zhimg.com/v2-6de6eab6888a6bf91f82c5f7cfb1f2cf_b.jpg" alt="img"></p><ul><li><strong>赋值运算符</strong></li></ul><p><img src="https://pic2.zhimg.com/v2-bd70cb692dae7f6da46c9efc04beb729_b.jpg" alt="img"></p><ul><li><strong>比较运算符</strong></li></ul><p><img src="https://pic1.zhimg.com/v2-930e1c088bf93e36f4d774f394794298_b.jpg" alt="img"></p><ul><li><strong>逻辑运算符</strong></li></ul><p><img src="https://pic2.zhimg.com/v2-fd28c236f400f7a6d51f748535964951_b.jpg" alt="img"></p><ul><li><strong>位运算符</strong></li></ul><p><img src="https://pic3.zhimg.com/v2-b4bb21ffc38eb260c4085ccab9dc1c26_b.jpg" alt="img"></p><ul><li><strong>条件运算符</strong></li></ul><p>三元运算符：由 ? : 组成</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs actionscript">(条件表达式=成功) ? <span class="hljs-literal">true</span>（成功执行） : <span class="hljs-literal"><code class="language-hljs actionscript">(条件表达式=成功) ? <span class="hljs-literal">true</span>（成功执行） : <span class="hljs-literal">false</span>（或者执行） ;<br></code></pre></td></tr></table></figure><ul><li><strong>运算符优先级</strong></li></ul><p><img src="https://pic1.zhimg.com/v2-b51114b6b944521dbd5cc7780bdcd008_b.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-95e447e417e4af45ecc4cde5fe7cfc48_b.gif" alt="img"></p><h2 id="3-1-选择结构语句"><a href="#3-1-选择结构语句" class="headerlink" title="3.1.选择结构语句"></a><strong>3.1.选择结构语句</strong></h2><ul><li><strong>if 条件语句</strong></li><li>解释：指满足某种条件，就可以进行某种处理。判断条件是一个布尔值，当判断条件为true时，就会执行执行语句。</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs dust"><span class="xml">if ( 判断条件 )</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">     执行语句</span><br><span class="hljs-template-variable"><code class="language-hljs dust"><span class="xml">if ( 判断条件 )</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">     执行语句</span><br><span class="hljs-template-variable">  &#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>if….else 语句</strong></li><li>解释：指满足某种条件，就执行某种处理，否则就执行另一种处理。</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs dust"><span class="xml">if（判断条件）</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    执行语句1</span><br><span class="hljs-template-variable">   &#125;</span><span class="xml">else</span><span class="hljs-template-variable">&#123; </span><br><span class="hljs-template-variable">  执行语句2</span><br><span class="hljs-template-variable"><code class="language-hljs dust"><span class="xml">if（判断条件）</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    执行语句1</span><br><span class="hljs-template-variable">   &#125;</span><span class="xml">else</span><span class="hljs-template-variable">&#123; </span><br><span class="hljs-template-variable">  执行语句2</span><br><span class="hljs-template-variable"> &#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>switch 条件语句</strong></li><li>解释:switch为选择性语句。即通过控制表达式的值与每一个case的目标值进行匹配，匹配成功就执行该case的执行语句，并通过break关键字跳出switch语句。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(控制表达式)&#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br>      执行语句<span class="hljs-number">1</span><br>         <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :<br>       执行语句<span class="hljs-number">2</span><br>       <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :<br>        执行语句<span class="hljs-number">3</span><br>         <span class="hljs-keyword">break</span>;<br>     ...........<br><br>   <span class="hljs-keyword">default</span>:<br>      执行语句n<br>      <span class="hljs-keyword"><code class="language-hljs arduino"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(控制表达式)&#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br>      执行语句<span class="hljs-number">1</span><br>         <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :<br>       执行语句<span class="hljs-number">2</span><br>       <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :<br>        执行语句<span class="hljs-number">3</span><br>         <span class="hljs-keyword">break</span>;<br>     ...........<br><br>   <span class="hljs-keyword">default</span>:<br>      执行语句n<br>      <span class="hljs-keyword">break</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="3-2循环结构语句"><a href="#3-2循环结构语句" class="headerlink" title="3.2循环结构语句"></a><strong>3.2循环结构语句</strong></h2><ul><li><strong>while循环语句</strong></li><li>解释：当循环条件为true时，循环体就会执行。循环执行完又去判断循环条件是否为true，为true则继续执行循环体，不为true就结束循环。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params"><code class="language-hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(循环条件)</span></span>&#123;<br>    执行语句（循环体）<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>do……..while循环语句</strong></li><li>解释：无条件先执行循环体，然后再根据循环条件进行判断为true，则再次执行循环体，否则为false就跳出循环语句。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs gcode"><span class="hljs-keyword">do</span> &#123;  <br>    执行语句（循环体）<br>       .....<br> &#125; <span class="hljs-keyword">while</span><span class="hljs-comment"><code class="language-hljs gcode"><span class="hljs-keyword">do</span> &#123;  <br>    执行语句（循环体）<br>       .....<br> &#125; <span class="hljs-keyword">while</span><span class="hljs-comment">(循环条件)</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>for循环</strong></li><li>解释：第一步 执行1。</li><li>第二步 执行2，如果循环条件为true，则执行3、如果循环条件为false，则执行5。</li><li>第三步 执行4。</li><li>第四步 执行3，再去重复第二步。</li><li>第五步 执行5。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs lasso">       for(初始化表达式;循环条件;操作表达式)&#123;<br>               执行语句<br>                <span class="hljs-params">...</span><span class="hljs-params">...</span><br>       &#125;<br><br><span class="hljs-comment"><code class="language-hljs lasso">       for(初始化表达式;循环条件;操作表达式)&#123;<br>               执行语句<br>                <span class="hljs-params">...</span><span class="hljs-params">...</span><br>       &#125;<br><br><span class="hljs-comment">//1.代表-初始化表达式、2.代表-循环条件、3.代表-操作表达式 、  4.代表-执行语句 、 5.代表-跳出循环</span><br></code></pre></td></tr></table></figure><ul><li><strong>循环嵌套</strong></li><li>解释：指在一个循环语句中再用一个循环语句。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs lasso">for(初始化表达式;循环条件;操作表达式)&#123;<br>         <span class="hljs-params">...</span><span class="hljs-params">...</span>.. <br>     for(初始化表达式;循环条件;操作表达式)&#123;<br>         执行语句<br>          <span class="hljs-params">...</span><span class="hljs-params">...</span><br>     &#125;<br>        <span class="hljs-params"><code class="language-hljs lasso">for(初始化表达式;循环条件;操作表达式)&#123;<br>         <span class="hljs-params">...</span><span class="hljs-params">...</span>.. <br>     for(初始化表达式;循环条件;操作表达式)&#123;<br>         执行语句<br>          <span class="hljs-params">...</span><span class="hljs-params">...</span><br>     &#125;<br>        <span class="hljs-params">...</span>..<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><strong>跳转语句</strong></li><li>**break **解释：就是跳出当前循环结构语句。</li><li>**continue **解释：终止本次循环，执行下次循环。</li></ul><p><img src="https://pic1.zhimg.com/v2-4454f2d1d27cb717bfa879693840217c_b.gif" alt="img"></p><h2 id="4-1数组"><a href="#4-1数组" class="headerlink" title="4.1数组"></a><strong>4.1数组</strong></h2><p>数组指的是一组数据的集合，数组中的每一个数据称为元素。数组中可以存放任意类型数据，但存放的数据类型の统一一致。数组分为一维数组和多维数组。</p><p>索引：（数组中的元素有对应的下标即索引）</p><p>（1）从0开始 （2）是连续的 （3）逐一增加 每次+1</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs inform7">数组的定义三种方式：<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型 <span class="hljs-comment">[ 数组长度 ]</span>;<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型<span class="hljs-comment">[]</span>&#123; 元素1,元素2,元素3，... &#125;;<br><br>           数组类型<span class="hljs-comment"><code class="language-hljs inform7">数组的定义三种方式：<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型 <span class="hljs-comment">[ 数组长度 ]</span>;<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = new 数组类型<span class="hljs-comment">[]</span>&#123; 元素1,元素2,元素3，... &#125;;<br><br>           数组类型<span class="hljs-comment">[ ]</span> 数组名 = &#123; 元素1,元素2,元素3，...&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>java不同数据类型元素的默认值</strong></p></blockquote><p><img src="https://pic3.zhimg.com/v2-de5542d27e363b8363e1982601c07bfe_b.jpg" alt="img"></p><p><strong>4.2.常见的数组操作</strong></p><ul><li><strong>数组遍历 ： 依次访问数组中的每一个元素，该操作称为数组遍历。</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs awk">ex：     int [ ] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <br>             sout(arr [<span class="hljs-number">0</span>]);   <span class="hljs-regexp">//</span>表示第一个元素   <br>             sout(arr [<span class="hljs-number">1</span>]);   <span class="hljs-regexp">//</span>表示第二个元素    <br>             sout(arr [<span class="hljs-number">2</span>]);   <span class="hljs-regexp">//</span>表示第三个元素    <br><br>        <span class="hljs-regexp">//</span> 一个一个太麻烦 用循环解决：<br><br>        <span class="hljs-keyword">for</span>（int i=<span class="hljs-number">0</span>； i&lt;<span class="hljs-number">5</span>; i++）&#123;<br>           sout( arr[i] ); <span class="hljs-regexp"><code class="language-hljs awk">ex：     int [ ] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <br>             sout(arr [<span class="hljs-number">0</span>]);   <span class="hljs-regexp">//</span>表示第一个元素   <br>             sout(arr [<span class="hljs-number">1</span>]);   <span class="hljs-regexp">//</span>表示第二个元素    <br>             sout(arr [<span class="hljs-number">2</span>]);   <span class="hljs-regexp">//</span>表示第三个元素    <br><br>        <span class="hljs-regexp">//</span> 一个一个太麻烦 用循环解决：<br><br>        <span class="hljs-keyword">for</span>（int i=<span class="hljs-number">0</span>； i&lt;<span class="hljs-number">5</span>; i++）&#123;<br>           sout( arr[i] ); <span class="hljs-regexp">//</span>代表每个索引元素<br>     &#125; <br></code></pre></td></tr></table></figure><ul><li><strong>数组最值： 获取数组中的最值（最大值、最小值）</strong></li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs excel">ex：         <span class="hljs-built_in">int</span> [ ] arr =&#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">33</span>&#125;; <br>                  <span class="hljs-built_in">int</span> <span class="hljs-built_in">Max</span> = arr[<span class="hljs-number">0</span>];<br>              for(<span class="hljs-built_in">int</span> x= <span class="hljs-number">1</span>; x&lt; arr.length; x++)&#123;<br>                 <span class="hljs-built_in">if</span>(arr[x]&gt;<span class="hljs-built_in">Max</span>)&#123;<br>                   sout(<span class="hljs-string">&quot;Max&quot;</span>+<span class="hljs-built_in">Max</span>);<br>              &#125;<br>          &#125;<br>          注：把第一个数假设当<span class="hljs-built_in"><code class="language-hljs excel">ex：         <span class="hljs-built_in">int</span> [ ] arr =&#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">33</span>&#125;; <br>                  <span class="hljs-built_in">int</span> <span class="hljs-built_in">Max</span> = arr[<span class="hljs-number">0</span>];<br>              for(<span class="hljs-built_in">int</span> x= <span class="hljs-number">1</span>; x&lt; arr.length; x++)&#123;<br>                 <span class="hljs-built_in">if</span>(arr[x]&gt;<span class="hljs-built_in">Max</span>)&#123;<br>                   sout(<span class="hljs-string">&quot;Max&quot;</span>+<span class="hljs-built_in">Max</span>);<br>              &#125;<br>          &#125;<br>          注：把第一个数假设当<span class="hljs-built_in">Max</span> 与后面的数比较   <br></code></pre></td></tr></table></figure><ul><li><strong>数组排序： 对数组中的元素进行排序</strong></li></ul><blockquote><p>基本思想: 冒泡排序，类似于水中冒泡，较大的数沉下去，较小的数慢慢冒起来，假设从小到大，即为较大的数慢慢往后排，较小的数慢慢往前排。 直观表达，每一趟遍历，将一个最大的数移到序列末尾。</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;<br>           <span class="hljs-built_in">exSort</span>(arr);<br>        ArrayUtil.<span class="hljs-built_in">print</span>(arr);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * @param arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr==null || arr.length &lt; <span class="hljs-number">2</span> )&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i <span class="hljs-number">-1</span>; j++) &#123;   <br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number"><code class="language-hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;<br>           <span class="hljs-built_in">exSort</span>(arr);<br>        ArrayUtil.<span class="hljs-built_in">print</span>(arr);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * @param arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr==null || arr.length &lt; <span class="hljs-number">2</span> )&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i <span class="hljs-number">-1</span>; j++) &#123;   <br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.3.多维数组</strong></p><p>多维数组，其实就是多个一维数组结合起来的，数组里面套数组。</p><p><img src="https://pic4.zhimg.com/v2-73b7ec3d67ed2bf730413ef88fc80bfb_b.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-5b164717409490488a541e3160c7a1d1_b.gif" alt="img"></p><p><strong>好了，今天就到这儿吧，小伙伴们点赞、收藏、评论，一键三连走起呀，我是买盐，我们下期见</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java了解</title>
    <link href="/post/000be720-f0e1-11eb-aee4-2f9809b08461/"/>
    <url>/post/000be720-f0e1-11eb-aee4-2f9809b08461/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-xurYQYup" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="30394495" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1.Java概述"></a>1.Java概述</h2><p><img src="https://pic4.zhimg.com/v2-f584bd516ff116cdc5511e3491235653_b.gif" alt="img"></p><blockquote><p>1.什么是java？       </p></blockquote><p>了解Java语言是什么之前，让我们先认识什么是计算机语言。计算机语言就是我们于计算机之间的通信语言，由指令进行操作。计算机语言分为三大类：<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%80">机器语言</a>、<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/61826">汇编语言</a>、<a href="https://baike.baidu.com/item/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80">高级语言</a>。 </p><p>Java则是一种高级语言。它由Sun公司于1995年5月所推出可以编写跨平台应用软件、完全面向对象的程序设计语言。  </p><p>   对于不同开发市场，Java分为3个技术平台，JavaSE、JavaEE、JavaME。</p><ul><li>  JavaSE(JavaPlatformStandardEdition，Java平台标准版）该版本是为开发普通桌面和    商务应用程序提供的解决方案，JavaSE是三个平台中最核心部分。JavaSE和JavaME都是从JavaSE的基础上发展而来的。</li><li>  JavaEE(JavaPlatformEnterpriseEdition，Java平台企业版）该版本是为开发企业级应用程序提供的解决方案。JavaEE可以被看作一个技术平台，该平台用于开发、装配以及部署企业级应用程序，其中主要包括servlet、JSP、JavaBean、EJB.WebService等。</li><li>  JavaME(JavaPIatformMicroEdition，Java平台微型版）该版本是为开发电子消费产品和嵌人式设备提供的解决方案。JavaME主要用于微型数字电子设备上软件程序的开发。例如，为家用电器增加智能化控制和联网功能，为手机增加游戏和通讯录管理功能。此外，JavaME提供了HTTP等高级lnternet协议，使移动电话能以Client/Server(客户/服务器）方式直接访问lnternet的全部信息，提供最高效率的无线交流。</li></ul><blockquote><p>2.Java语言特点</p></blockquote><ul><li>跨平台                                      </li><li>面向对象                                            </li><li>简单易用</li><li>安全，支持多线程</li></ul><h2 id="2-JDK的了解"><a href="#2-JDK的了解" class="headerlink" title="2.JDK的了解"></a>2.JDK的了解</h2><blockquote><p>1.JDK是什么？</p></blockquote><p>JDK是Java核心、是<a href="https://baike.baidu.com/item/Java/85979">Java</a>语言的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/10418833">软件开发工具包</a>，主要用于<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/9157757">移动设备</a>、<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87/10055189">嵌入式设备</a>上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。  </p><p><img src="https://pic1.zhimg.com/v2-012e07cd9a0d10266c6245ea8bd76340_b.png" alt="img"></p><blockquote><p>2.如何安装JDK</p></blockquote><p><img src="https://pic2.zhimg.com/v2-d9c6679c149aa0d15c650505d99d81a1_b.png" alt="img"></p><p>下面以Windows10系统下的JDK下载和安装为例进行说明。</p><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h2><p>个人附上俺的安装包：<br>链接：<a href="https://pan.baidu.com/s/1Sa2O4rYGgZwXR5M9Hdu5aQ">https://pan.baidu.com/s/1Sa2O4rYGgZwXR5M9Hdu5aQ</a> 提取码：vyff</p><p>还可以访问oracle官网：<a href="http://www.oracle.com/">http://www.oracle.com</a><br>在首页点击Downloads，进入oracle软件下载页。</p><p><img src="https://pic4.zhimg.com/v2-a485f9d08cef042a013c46671bc9b6eb_b.jpg" alt="img"></p><p>在下载页面，点击Java。</p><p><img src="https://pic2.zhimg.com/v2-3d45b0adae3b5150e43cb0592c89877d_b.jpg" alt="img"></p><p>选择Java (JDK) for Developers，点击。</p><p><img src="https://pic2.zhimg.com/v2-7bb299d07c0ead5f9030a93225dda92d_b.jpg" alt="img"></p><p>在 Java SE Downloads 页面，点击中间的DOWNLOAD按钮。</p><p><img src="https://pic4.zhimg.com/v2-bb7df35ab224b4ba20ac600839c1210b_b.jpg" alt="img"></p><p>在JDK下载页，首先勾选Accept License Agreement，同意Oracle Java SE的Oracle技术网许可协议。</p><p><img src="https://pic3.zhimg.com/v2-e92ca94f39b4f6b07a068b105c53f6b2_b.jpg" alt="img"></p><p>最后，根据操作系统选择合适的版本下载，以课程为例，我们选择Windows系统64位版本，exe是安装程序，点击下载即可。 </p><p><img src="https://pic3.zhimg.com/v2-605a774c8914b9b1a17ab16888529e8a_b.jpg" alt="img"></p><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>Windows版JDK安装，基本是傻瓜式安装，直接下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理，最好修改下安装路径，将与开发相关的软件都安装到一个文件夹下，例如E:\develop。注意，安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p><p>首先双击打开安装程序，点击下一步。</p><p><img src="https://pic4.zhimg.com/v2-55f0acf073d9d8777d74e18257cbbddf_b.jpg" alt="img"></p><p>默认安装目录为C盘，点击更改，修改安装路径。</p><p><img src="https://pic2.zhimg.com/v2-d699b701488d8c4450c337af81a6c7f5_b.jpg" alt="img"></p><p>将目录更改至E:\develop，要注意不要修改后面的Java\jdk-11\目录结构。点击确定，进入下一步。</p><p><img src="https://pic3.zhimg.com/v2-0fd00914f3b265f9c12109dfa288a742_b.jpg" alt="img"></p><p>点击下一步，开始安装。</p><p><img src="https://pic4.zhimg.com/v2-dbf8e6e96542ae81b1feef02b2be3e3b_b.jpg" alt="img"></p><p>看到安装成功界面，点击关闭，完成安装。</p><p><img src="https://pic3.zhimg.com/v2-1b48380fa799fa6164d06bbacd083b12_b.jpg" alt="img"></p><blockquote><p>当我们配置安装好就需要在windows系统中来使用Java就需要配置系统变量</p></blockquote><p><img src="https://pic3.zhimg.com/v2-4bafbedb6c2cac4ea37a23c423768bd6_b.jpeg" alt="img"></p><p>下面以Windows10系统下的Java环境变量配置为例进行说明。</p><ol><li>右键点击“此电脑”，选择“属性”项。</li></ol><p><img src="https://pic3.zhimg.com/v2-adf216938d82649c704588085c6ec8fa_b.jpg" alt="img"></p><ol><li>点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。</li></ol><p><img src="https://pic4.zhimg.com/v2-4e7d963fac01412b4112f7c5aea6b183_b.jpg" alt="img"></p><ol><li>在弹出的“环境变量”框，中选择下方的系统变量，点击新建。</li></ol><p><img src="https://pic2.zhimg.com/v2-ec07be29e818e547cf2ad090d356b6c5_b.jpg" alt="img"></p><ol><li>在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。</li></ol><p>变量名为：JAVA_HOME</p><p>变量值为JDK的安装路径，到bin目录的上一层即可。比如E:\develop\Java\jdk-11</p><p>注意：为防止路径输入错误，可以打开文件夹，拷贝路径。</p><p><img src="https://pic3.zhimg.com/v2-74a2f9d470ec259137885f6741934ad6_b.jpg" alt="img"></p><p>点击确定后，系统变量中会出现一条新的记录。</p><p><img src="https://pic1.zhimg.com/v2-20457aba4d9b2a9059a096f555ba1974_b.jpg" alt="img"></p><ol><li>然后选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA_HOME变量添加到“Path”变量中。</li></ol><p><img src="https://pic4.zhimg.com/v2-0a218e92be02de4220d8de4b0cd7c9ab_b.jpg" alt="img"></p><p>在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin。</p><p><img src="https://pic2.zhimg.com/v2-59afad93b16c426165c360cbd8499c49_b.jpg" alt="img"></p><p>输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。</p><p><img src="https://pic2.zhimg.com/v2-58e42051bf6e164349ac1ec945e7d1fd_b.jpg" alt="img"></p><ol><li>至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。</li></ol><p>如果之前已经打开命令行窗口，需要关闭重新启动才可。在非JDK安装的bin目录下，输入java或者javac命令，查看效果。</p><p><img src="https://pic2.zhimg.com/v2-b034baedaf78395f99940bc83b3dceb9_b.jpg" alt="img"></p><p>​                                 安装好这两步就可以秃头得来学Java了</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
